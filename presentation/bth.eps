%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: black_BTH_CMYK.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Petra Lundin
%%CreationDate: 2011-02-28
%%BoundingBox: 0 0 464 463
%%HiResBoundingBox: 0 0 463.2822 462.5635
%%CropBox: 0 0 463.2822 462.5635
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 18660 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA87D7DFFFF7DF827F852FD04FF5227F827287DFD67FFA8FF%FFFF7D27F852FFFF7D27F82752FFFFFF2727F8272727F827A9FFFFA852A8%A8FD5BFFA85252F827A8FFFFFFF827F8FFFF7DF827F827FFFF5227F8277D%FF522727FFFFFF5227F82752FD5AFFA827F827F8277DFFFF27F827A8FF7D%27F827F8FFFF52F827F852A8FFA8A8FFFFFF27F827F87DFFFF7D7DA8FD50%FFA852A8FFFFFFF827F827F8277DFF5227F87DFFA8F827F827FFFF5227F8%27F8277DFD04FFA8F827F8277DFF5227F82752FD4EFF2727F8FD04FF52F8%27F827F827527DF82752FFA827F827F8FFFFA8F827F827F82727FFFFFF52%27F827F87D2127F8277DFD4CFFA8FFFF27F87DFD04FF7D27F827F827F827%F827F827FFA8F827F827FFFFFFA82727F827F82752FFFF52F827F827F827%F852A8FD4AFFA87D2727A8A8F8277DFD04FFA8F827F827F827F827F827F8%FFA827F827F8A8FFFFFFA82727F827F827FFA8F827F827F82727A8FD0AFF%A8FD40FFA827F827F8A87D27F8FD06FF27F8277D27F827F827F827A8A8F8%27F827A8FF52A8FFFF5327F827F8FF7D27F827F827F87DFD0AFFA82727FD%40FF2727F8272152F852FD06FF2727F8A8A827F827F827F87DA827F827F8%A87D2727FFA87DF827F853FF27F827F827F82727FD09FF7D27F827F853A9%FD39FF7D7DFFFF7DF827F827F82727A8FD05FF7DF8277DFFFF52F827F827%27FFF827F827A87DF827F827F827F827A8FFF827F827F827F82784FD07FF%5227F827F827F8FD38FFA852F827FFFFA827F827F827F827F852A8FFFFFF%7D27F852FFFFA87DF8272752FF52527D7DFFFFA85252F827277DA8FF7D27%F827F852F827F852FD06FF2727F827F827F827FD37FF7D27F852A8FFFFFF%7D27F827F827F827F82752FFFFFFF82727FD18FFA85327F852A827F827F8%FD04FFA82727F8275227F82752FD36FF5227F87DA9FD05FF2127F827F827%F827F827F87DA852527DFD1BFFA87DFF2727F8277DFFFFA8F827F827A87D%F827F87DFD35FF2727F82752FFFFA827A9FF7DF827F8272727F827F82752%FD23FF7D52F87DFF7DF827F827F8272727F82784FD34FFA827F827F8277D%7DF82752FFA827F827F827A828F87DA8FD27FF7D7DF827F852A87DF827F8%27F8A8FD35FF7D27F827F827F8277DFFFFFF5227F827F8A8FD2DFFA8277D%FFFFFFA8F827F827FD32FFA821FFFFFF5227F827F827A8FD05FFF827277D%A8FD33FF7D27F82727FD31FFA8F827A8FFFFFF2727F827F87DFFFFA85284%7D7DFD36FF7DF827F87DFD30FFA8F8277DFD04FFA8F827F827F87E7D27F8%52FD38FF5227F8277DFD0BFFA8527DFD22FF272727FD06FFA8F827F827F8%27F87DFD3AFF7D27F8A8FD0AFFA827F827A8FD20FF2727F82727FD06FF53%F827F82727A8FD3CFFA852A8FD09FF7D27F827F827A9FD1EFF2727F827F8%2727FD06FF52F82752FD49FF5227F827F827F8A8FD1DFFFD0427F827F827%27A8FD04FFA8277DFD49FF2727F827F82727A8FD1DFF532728FFA827F827%F82727A8FD4EFF2727F827F82752FD04FFA8FD1BFF7DFFFFFF7D27F827F8%27F8A8FD4BFFA82727F827F827F8A8FFFFA853F8A8FD1FFFA827F827F827%F8A8FD4AFF2727F827F827522727FFA852F82727FD20FFA827F827F8277D%FD4AFFA8F827F8277DFF52272727F827F82727FD20FFA852F8277DFD1DFF%A827F827F82752FD05FF5227F827F827FD1DFFA8F852A8FFFFFF2727F827%F827F87DFD21FFA8527DFD1EFFA8F827F827F827F8FFFFA8F827F827F827%F8FD1EFFA8A9FFFFFF5227F827F827F8A8FD43FFA827F827F827F82752FF%2727F827F827F827FD22FF2727F827F82727A8FD44FFA8F827F827F827F8%27FF27F827F827F827F8FD20FFA82727F827F82727FD46FFA827F827F827%F827F8FFF827F827F827F827FD20FFA827F827F82752FFFFFFA8A8A8FD11%FF7D52FD2FFF2727F827F827F827FF27F827F827F82752FD21FFA827F827%7DFFA87D2727F827F87DA8FFA8A8FD0BFFF827A8FD2FFF2727F827F827F8%FFF827F827F82727FD23FF7D277DFFFF52F827F827F827F852FF52F8FD0A%FF7D2752FFFFA852A8FD2CFFFD06A8FFFD06A8FD25FFA8FFFF52F827F827%F827F827F87D7D7DFD0AFF27F8FFFFFF27277DFD17FFA8A87D7D7DA8A8FF%FFFF7D7D7DA87DA8FFFFFF7D7DA87D7D7DFD05FF7D7D7DA87D7DFFFFFFA8%7DA87D7D7DFFFFFFA8A87D7D7DA8FD14FFF827F827F82728A87D27F8FFFF%A8FD08FF7DF82752FFA82727FFFFFF527DA8FD12FF7DF827F827F8277DFF%A827F827F827F87DFFA8F827F827F82727FFFFFF2727F827F827F8FFA852%F827F827F827A8FF5227F827F827F8A8FD12FF7D27F827F87DA8FFFFFFA8%277DA8F852FD07FF2727F827F852F8A8FFFFA82727FD13FF7D27F827F827%F827A8A8F827F827F827F8A8A827F827F827F82752FF5227F827F827F827%FF7DF827F827F827F8A87D27F827F827F827A8FD12FF7DF82752FD07FFF8%52A87DA8FD06FF7D27F827F827F82727A8FF7DF87DFD13FF7DF827F827F8%27F87DA827F827F827F82752A8F827F827F827F852FF27F827F827F827F8%FF2727F827F827F827A852F827F827F827F8A8FD12FF7D27F8FD07FFA827%F8FD09FFA82727F827F827F827F852F827FD14FF7D27F827F827F8277DA8%F827F827F827F852A827F827F827F82752FFF827F827F827F827FF27F827%F827F827F8A85227F827F827F827A8FD12FFA8F852FD06FFA827F827A8FD%0AFF7D27F827F827F827F82752FD14FFA8F827F827F827F87DA827F827F8%27F82752FFF827F827F827F852FF27F827F827F82727FFF827F827F827F8%27A952F827F827F827F8A8FD13FF2721FD04FFA85227F827F8A8FD0CFFA8%5227F827F827F8FD16FF52F827F827F8277DFF5227F827F827F852FF7DF8%27F827F82752FFF827F827F827F8A8FF27F827F827F8277DFF5227F827F8%27F87DFD14FF7D27277D7D52F827F827F827FD0FFFA852F827F87DFD16FF%A87D5252275252A8FFFF7D5227FD0452FFFFA8FD0452277DFF5227FD0452%A8FFFF27525252277DA8FFFF7D5252275252A8FD16FF2727F827F827F827%F8277DFD08FF7DFD05FFA8FFFFA85227FD0EFFA8FFA8A8A8FFFFFFA8FFA8%A8A8FD05FFA8A8A8FFA8FD04FFA8A8FFA8A8FD07FFA8A8FFA8A8FD04FFA8%FFA8A8A8FD05FFA8A8A8FD05FFA8A8A8FFA8FD0DFF2727F827F827F82752%FD08FF7D27F8A8FFFF7D2721527DA8A8FD0DFF5227F827F82752FFFF7DF8%27F827F852A8FFA827F827F82727A8FFA8F827F827F8277DFFFFFF5227F8%27F827F8FFFF7DF827F827F827A8FF7D27F827F827F8A8FFA82727F827F8%277DFD0CFFA82727F827F8527DFD09FF27F827FFFFFF7DF827F82752FD0E%FF52F827F827F82727FF7D27F827F827F827A8A8F827F827F827F8A8A827%F827F827F8277DFF5227F827F827F827FF7DF827F827F827F8A8A827F827%F827F827A8FF2727F827F827F87DFD0EFFA87D7DA8FD0AFFA8F87DFD04FF%2727F827F852FD0EFF2727F827F827F827A87DF827F827F827F87DA827F8%27F827F82752A8F827F827F827F852FF27F827F827F827F8FF2727F827F8%27F827A852F827F827F827F8A87D27F827F827F8277DFD12FFA87D7D7DFD%06FF7D27A8FD04FF27F827F82752FD0EFF52F827F827F827F8FF7D27F827%F827F8277DA8F827F827F827F852A827F827F827F82752FFF827F827F827%F827FF27F827F827F827F8A85227F827F827F827A8A8F827F827F827F8A8%FD10FFA852F827F827F87DFD04FF53F8A8FD04FFA8A87D52F87DFD0EFF52%27F827F827F827A87DF827F827F827F87DA827F827F827F82752A8F827F8%27F827F852FF27F827F827F82721FFF827F827F827F827A852F827F827F8%27F8A87D27F827F827F8277DFD0FFF7D27F827F827F827F853FFFFFF5227%52FD07FFA8277DFD0EFFA8F827F827F827F8A8A827F827F827F8277DFF27%27F827F827F852FF7DF827F827F82752FFF827F827F827F87DFF27F827F8%27F82752FF5227F827F827F852FF7DF827F827F82727FD10FF27F827F827%F827F827F8A8FFFF52F827277DA8FFFFFFA852F8A8FD0FFFA8F827F827F8%27A8FF7D28F827F827F87DFFA85227F827F82727FFA87DF827F827F852FF%27F827F827F87DFFFFF827F827F82752FFFF52F827F827F852A8FF7D27F8%27F82727A8FD0FFFA8F827F827F827F827F82727FFFF7D27F827F8275252%5227F852FD66FF5327F8277DFD04FFA82727A8FFFFF827F827F827F827F8%277DFD0FFF5227F85252527DFFFF7DF827F827277DA9FFA827F827F85252%FFFFA8F827F8272752A8FFFFFFA853F827F827F8FFFFFF5227F827F827A8%FFA97D2727F827F87DFFFF5252F827F8277DFD0EFF52F852A8FD06FFA8F8%A8FFFF7DF827F827F827F82752FD10FF52F827F827F82752FF7D27F827F8%27F852FFA8F827F827F82727FFA827F827F827F827A8FFA827F827F827F8%27FFFF2727F827F827F8A8FF52F827F827F8277DFF5227F827F827F87DFD%0EFF5227A8FD07FFA8277DFFFFFF7DF827F827F82752FD11FF2727F827F8%27F827A87DF827F827F827F87EA827F827F827F82752A8F827F827F827F8%52FF27F827F827F827F8FF5227F827F827F827A87DF827F827F827F87D7D%27F827F827F8277DFD0EFF7DF8A8A8A852A8FFFFFF7DF87DFD05FFA87D52%A8A8FD12FF52F827F827F827F8FF7D27F827F827F8277DA8F827F827F827%F852A827F827F827F827F8FFF827F827F827F827FF52F827F827F827F8A8%5227F827F827F8277DA8F827F827F827F8A8FD0EFF7D27F827F8277DFFFF%FFF8277DFD1CFF5227F827F827F827A87DF827F827F827F87DA827F827F8%27F82752A8F827F827F827F827FF27F827F827F827F8FF5227F827F827F8%27A852F827F827F827F87D7D27F827F827F8277DFD0FFFF827F827F852FF%FFFF5252A8FD0B7DA8FD10FF7DF827F827F827F8A8A827F827F827F8277D%FF2727F827F827F852FF52F827F827F827F8FFF827F827F827F852FF52F8%27F827F82727FF5227F827F827F827A87DF827F827F827F8A8FD0FFF52F8%27F82727FD06FFF827F827F827F827F827F87DFD11FF52F827F827F827A8%FF5227F827F827F87DFFA8F827F827F82727FFA827F827F827F827FF27F8%27F827F828A8FF2727F827F82727A8FF52F827F827F8277DFF7D27F827F8%27F87DFD10FF7D27F8272752FD06FF27F827F827F827F827F8277DFD13FF%7D7D7DA87DFFFFFFA8A87DA87D7DA8FFFFFF7DA87D7D7DA8FFFFFFA87D7D%7DA87DFF7DA87D7D7DA8FD04FFA8A8A8FFA8FFFFFFA87D7DA87DA8A8FFFF%FFA8FFA8A8A8FD13FF7DFD0AFFFD057D27F827F827F87DFD07FFFD067DFF%FFFFFD067DA8FFFFA8FD057DFFFFFFA8FD057DA8FFFFFFFD057DA8FD05FF%A8FD057DFFFFFFFD067DA8FFFFA8FD057DA8FFFFA8FD057DA8FFFFFFFD05%7DA8FD06FFA87D7DFD05FFA8FD07FF52F827F827F827A8FD07FFF827F827%F82727FFFF52F827F827F827A8FF7D27F827F827F8A8FFA8F827F827F827%52FFA827F827F827F852FFFFFF52F827F827F827FFFF5227F827F827F8A8%FF7DF827F827F8277DFF7D27F827F827F87DFFA8F827F827F82752FD06FF%A8F82752FFFF7DF827F87DFFFFFFA827F827F827F852A8FD08FF27F827F8%27F82727FF2727F827F827F827A87DF827F827F827F8A8A827F827F827F8%277DA8F827F827F827F87DFF52F827F827F827F8FF5227F827F827F827A8%A8F827F827F827F87D7D27F827F827F8277DFFF827F827F827F852FD06FF%522727A8FF7DF827F827F87DFFA827F827F827F87DFD0AFFF827F827F827%F827FF52F827F827F827F8FF7D27F827F827F8277DA8F827F827F827F852%A827F827F827F82727FFF827F827F827F827FF52F827F827F827F8A85227%F827F827F8277DA8F827F827F827F8A8A827F827F827F82752FD06FF52F8%FFFFA8F827F827F827275227F827F82727A8FD0BFF27F827F827F827F8FF%5227F827F827F827A87DF827F827F827F87DA827F827F827F82752A8F827%F827F827F827FF27F827F827F827F8FF5227F827F827F827A852F827F827%F827F87D7D27F827F827F8277D7DF827F827F827F852FD06FFF827A8FF27%27F827F852F82727F827F827F8FD057DA8FD07FF5227F827F827F827FF7D%F827F827F827F8A87D27F827F827F8277DFFF827F827F827F852FF27F827%F827F827F8FFF827F827F827F827FF52F827F827F827F8FF5227F827F827%F827A87DF827F827F827F8A87D27F827F827F8277DFD06FF52F87D5227F8%27F87DFF27F8F827F827F827F827F827F87DFD07FFA8F827F827F827F8FF%A827F827F827F827A8FF2727F827F827F87DFF52F827F827F82727FF7D27%F827F827F827FF27F827F827F8277DFF2727F827F827F87DFF52F827F827%F82727FF7D27F827F827F852A87DF827F827F82727FD07FF5227F827F827%F827A8FF272727F827F827F827F827F8277DFD08FFA8FD0652FFFFA87DFD%0552FFFFFF53FD05527DFFFF7DFD05527DFFFF7DFD0652FFFD0652A8FFFF%7DFD0552A8FFFF7DFD05527DFFFFA8FD05527DFFFF7DFD055253FD08FFA8%F827F827F8277DFF282727FD0B52A8FD07FFFD05A8A9FFFFFFA8FD09FFA8%FD07FFFD05A8FD05FFFD05A8FD07FFFD05A8FD04FFFD06A8FFFFFFFD05A8%FD05FFFD05A8FFFFFFFD06A8FD07FF52F827F82727FFFF27F87DFD0BFFA8%FD07FFF827F827F8277DFFFF52F827F827F87DFFFF7D27F827F82752FFFF%A8F827F827F852A8FFA827F827F82727A8FFFFFF7DF827F827F827FFFF7D%27F827F827F8A8FFA92727F827F827A8FFA852F827F827F87DFFFF5227F8%27F82752FD08FF7D52527DFFFFFFA87DA8FD04FFA8A87D7D2727F827FD07%FF27F827F827F82752FF2727F827F827F852FF7DF827F827F82727FFA827%F827F827F827A8A8F827F827F827F8A8FF7DF827F827F827F8FF7D27F827%F827F827A8A8F827F827F827F8A8A827F827F827F8277DFF2727F827F827%F852FD06FF7DA8FD0BFF5352F827F827F827F827F8FD07FFF827F827F827%F827FF52F827F827F827F8FF7D27F827F827F8277DA8F827F827F827F87D%A827F827F827F82752FFF827F827F827F827FF52F827F827F827F8A85227%F827F827F827A8A8F827F827F827F8A8A827F827F827F82752FD05FFA827%F82752A8A8FD06FF7D27F827F827F827F827F8277DFD06FF27F827F827F8%27F8FF5227F827F827F827A87DF827F827F827F87DA827F827F827F82752%A8F827F827F827F852FF27F827F827F827F8FFF827F827F827F827A852F8%27F827F827F8A87D27F827F827F8277D7DF827F827F827F852FD05FF7DF8%27F827F827F8527DA8FFFFA8F827F827F827F827F827F87DFD06FF2727F8%27F827F827FF52F827F827F827F8A87D27F827F827F8277DA9F827F827F8%27F852A827F827F827F82752FFF827F827F827F827FF27F827F827F827F8%FF5227F827F827F827A87DF827F827F827F87D7D27F827F827F82752FD05%FF5227F827F827F827F827F827A8A827F827F827F852527D7DFFA8FD06FF%7DF827F827F827F8FF7D27F827F827F827A8A8F827F827F827F87DA827F8%27F827F82727FF2727F827F827F852FF27F827F827F82752FFF827F827F8%27F852FF52F827F827F827F8FF7D27F827F827F827A87DF827F827F827F8%A8FD05FF52F827F827F827F827F827F8FFFF527D7DA8A8FD05FFA852FD07%FF7DF827F827F827FFFF7D27F827F827F8A8FFA82727F827F8277DFFA852%F827F827F852FFFF5227F827F82752FFF827F827F82752FFFF27F827F827%F852FFFF5227F827F82727FFFF7DF827F827F852A8FF7D27F827F82727A8%FD07FFA82727F827F827F827F852FD0BFFA852F8A8FD10FFFD06A8A9FFFF%FFFD05A8FD04FFFD06A8FFFFFFFD05A8FFFFFD06A8FD0DFFFD05A8FD19FF%7D27F827F827F8272752F82752FD0BFF7DF8277DFD0EFF7DFD04527DFFFF%FF84FD04527DA8FFFFA8FD0552A8FFFF5227F827F827F827F827F827F827%F827F8277DFFFFA8FD0552FFFFFF847DFD04527DFFFFA8FD0552A8FD0DFF%7DF827F827F827F8277DFFA8FFFFFFA8A8FD06FFA8F827F828FD0EFF2727%F827F827F8A8FF7DF827F827F82752FF7D27F827F827F852FF52F827F827%F827F827F827F827F827F827F87DA852F827F827F827A8FF5227F827F827%F87DFF7DF827F827F8277DFD0DFF2727F827F8277D28F827A8FD05FF2752%FD05FF2727F82727FD0EFF52F827F827F82727FF7D27F827F827F827A87D%F827F827F827F8A85227F827F827F827F827F827F827F827F8277D7DF827%F827F827F8A87D27F827F827F8277DA8F827F827F827F8A8FD0CFFA827F8%2753A8FFFFA827F827FD05FF2727F8527DFF5227F827F8FD0FFF5227F827%F827F827A87DF827F827F827F87D7D27F827F827F8275252F827F827F827%F827F827F827F827F827F87D5227F827F827F827A852F827F827F827F87D%7D27F827F827F8277DFD0CFFA8277DA8FD05FF7D27F87DFD04FFA8F827F8%272727F827F87D5252FD0DFF52F827F827F827F8A87D27F827F827F8277D%7DF827F827F827F8525227F827F827F827F827F827F827F827F8277D52F8%27F827F827F8A95227F827F827F8277D7DF827F827F827F87DFD0CFFA8FD%09FF2727A8FD05FFA85227F827F827F827F827F8A8FD0CFF5227F827F827%F827A87DF827F827F827F87DA827F827F827F8272752F827F827F827F827%F827F827F827F827F87D2727F827F827F827A852F827F827F827F8A87D27%F827F827F8277DFD0DFF7D7D527DA8FD04FFA8F8FD09FFA8F827F827F827%F82753FD0DFF2727F827F827F8A8FF52F827F827F8277DFF5327F827F827%F8525227F827F827F827F827F827F827F827F8277D52F827F827F8277DFF%5227F827F827F87DFF7DF827F827F82752FD0DFF2727F827F82752FD04FF%A8FD07FF7D27F827F827F827F827F827FD0EFFFD067DA8FFA8A8FD057DA8%FFFFFD077D52F827F827F827F827F827F827F827F827F8FD077DA8FFFFA8%FD057DA8FFFFA8FD067DFD0DFF2727F827F827F82727A8FD0AFF27F827F8%27F827F827F87D7DFD27FF5227F827F827F827F827F827F827F827F8277D%FD25FF2727F827F827F827F82752FD0AFF5227F827F827F8527DFFFF52F8%FD26FF52F827F827F827F827F827F827F827F827F87DFD24FF7D2752A8A8%7D2727F827F827A8FD09FFA8F827F8527DFD05FF522753FD25FF5227F827%F827F827F827F827F827F827F8277DFD24FF2727FD05FFA827F827F8A8FD%09FFA8527DFD05FFA8FFFFFFF827A8FD24FF52F827F827F827F827F827F8%27F827F827F87DFD23FFA8F827FD06FFA952F827A8FD10FFF852FFFFFF7D%F852FD0EFFA8A9A8A8A8A9A8A8A8FD0CFFA8F827F827F827F827F827F827%F827F827F827F8FD04A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8FD0D%FF7D27F8A8FD06FFA827F8FD0EFFA8FFFF52F87DFFA82727F8A8FD0DFF7D%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F852FD0DFF7DF827F87DA8FD05FF2727FD0DFF277DFFFFA827F87DF827F8%2727FD0DFF7D27F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F82752FD0DFF7D27F827F8277DFFFFFFA8277DFD0CFFA827F8%A8FFFF2727F827F827F8277DFD0CFF7DF827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F852FD0EFFF827F827F827F85227%2727FD0EFF7D2752A82727F827F827F8277DFFA8FD0BFF7D27F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F82752FD0AFFA8%52FFFF7DF827F827F827F827F8A8FD0FFF2727F827F827F827F852A8FFF8%27A8FD0BFFFD3EA8FD09FFA8F82727FFFF7DF827F827F827F87DFD11FFF8%27F827F82727A8FFFFFF7DF852FD52FF2727F82727FFFFFF5327F82727A8%FD12FF53F827F8277DFD05FFA852F852FD50FF2727F827F82727A8FD19FF%A827F87DA8FD07FFA827F87DFD4EFF52272727F827F827F87DFD19FF7DA8%FD08FFA852F827F8A8FD4CFF522727FF7D27F827F827F87DA8FD20FFA827%F827F827F8FD4CFF27F8A8FFFFA827F827F827F852FD1FFF7D27F827F827%F87DFD4AFFA827A8A8FD04FFA952F827F827F852FD1DFF7D27F827F827F8%A8FD4AFF7D27F8A8FD07FF7DF827F827A8FD1CFF5227F827F82727A8A87D%F82727A8FD45FF7DF82752FD08FF7DF8277DFD1CFF2827F827F82752FFFF%7DF827F827F852FD44FFA827F827FD09FFA87DFD1CFFA952F827F82752FF%FFFFF827F827F827F827A8FD43FF2727F8A8FD28FF27F82752FD04FF52F8%27F87DA852F827A8FD3CFFA827A8FFFFA827F82752FD28FFA8277DFFFFFF%7D7D5227F852FFA8F827F8277DFD39FFA87DF827F8527D27F827F827FD29%FFA8FFFFFF7D27F827F8277DFF2727F827F87DFD39FF52F827F827F827F8%A85227F8A8FD2CFF27F827F827F8272727F827F852FD3AFFA852F827F827%F827277DF82752FD2CFFF827F8277DFF2727F827F852FD3DFFA82727F827%F827F827F827FD2CFF7DF82727FF5227F827F827A8FD3FFF5227F827F827%F827F8A8FD2CFF52F8527D27F827F8277DFD41FFA852F827F827F8277DFD%2CFFA97DF827F827F8277DFD44FFA82727F82752FD2FFFA8F827F82752FD%07FF522727FD07FFA87D7DA9FD1AFFA87D5227A8FD06FFA8272784FD09FF%7D2784FD31FFA8F82727FD07FF5227F82752FD06FFA8F827F82727527DFD%11FFA87DFFFFA827F827F8A8FD05FFA8F827F827A8FD3EFF52FD08FF52F8%27F827FD06FF7D27F8272752F827F8A8FFFFFD0A52A852F827F8FFFFFF27%27F8277DFD05FFA827F827F8A8FD47FFA827F8277DFD06FF52F827F852A9%27F827F8A8A827F827F827F827F827F8A8F827F8277DFFFF52F827F852FD%06FF2727F827A9FD48FFA87D7DFD07FF2727F8277DFFF827F827A8FFA8A9%7D27F827F8A8A8A9FF27F827F87DFFFF7D27F827F8FD07FF527DA8FD52FF%A827F827F8A87D27F827F8A8FFFFFFA8F827F827FD04FF5227F82752FFA8%52F827F827A8FD5BFFA8F827F827F827F82727A8FD04FFA827F827F8FD04%FF7DF827F827F827F827F827F8A8FD5BFF7D27F827F8A8F827277DFD05FF%A8F827F827FD04FF7D27F827F827527D2727F82752FD5BFF7DF827F852FF%52F827F87DFD04FF7D27F827F8FD05FFF827F827A8FFFF7DF827F852FD5B%FF2727F82752FF2727F82752FD04FF7DF827F827FD05FF27F827F87DFFFF%7D27F827F8FD5BFF27F827F8A87D27F827F87DFD04FF7D27F827F8FD05FF%5227F82752FFFFFFF827F827A8FD59FFA82727F827F827F827F827A8FD04%FF7DF827F827FD05FF7DF827F827FFFFA827F85252FD5DFFA97D7D522752%7DA8FD05FF7D27F827F8FD05FFA827F827F8FFFFFFA8FD6DFF7DF827F827%FD06FF527DA8FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2011-02-28T11:49:43+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXBgSQDUjY+x64q8W/MP/nJ7QPKOvX+gR6JeX2p6e4jl9R47eAsVDgq4MzlSrDqgwqyz8qv&#xA;zi8tfmFpvKzb6nrMCg3ukysDIni8Z29SOv7QHzAwK+fPzm/MHz/5c/OS5t5davTpOnXlte2lhHKY&#xA;oWgIjnCFEKq46r8VcKvVf+crJ5n/ACtsb2xuWjVdTtpVkiZlLxvBMoAIpseYOBXi/wDzivPw/N22&#xA;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&#xA;Ype8+Zfz58w3fkTRPMvkDRP0tLe3LW2rW7xzXLWcsaqTAyQFG5SFvhfpTtUiih7NYTzz2NtPcQm3&#xA;uJYkea3JqY3ZQWQnvxO2BVfFXx3/AM5SfmB+mvPcWg2rLLp3luqSLWqSXcnFpuQB34ALH7EN44Vd&#xA;5t/5yc1bzJ+XN15Zk0uOw1S8CW9xe2r0gNqN5FSJqshbiEpyI4k9MVe//lbH5T8m/lDaT2uoW93p&#xA;9have6pf2zrIjz8fUn+JTuVPwKDvQAYFQn5DfmL5t8+aPqura1aQW9hHeNDpckSsruu7sjVPFhEG&#xA;VQ46713GKvUMVdirsVdir5Y/5yp85eb9E/MLT7XRtc1DTLV9JhleCzupreMyG5uFLlY2UFiFAr7Y&#xA;VeSab+cH5padeR3cPmnU5ZIiCI7m6luYjQ1o0UzSI30jFL3zzl+bGs+ZP+cdv8U6fPPo2speQ2l3&#xA;LZyvAfVRwJDG6MHCOGBpX2364ofPI/NH8ywQf8W6zt/2sLr/AKqYpfQ//OPH51+YfNCaj5X8wytd&#xA;ajaWcl3Y6pQLI0cZCNHKVpVl5qVam+9d+qh88f8AK0PzL/6m3Wv+4hdf9VMUvQPyf/5yA876T5ns&#xA;NO1zULjW9Gv50t5o7tzNPGZW4rJHLIS/ws26lqEeGKGa/wDOSH55eZdI8wyeTfLVw+mm0SN9Tv49&#xA;p2eZFlSOJ+qKEdSSNydtgN1XhX/K0PzL/wCpt1r/ALiF1/1UxS97T85vMPlX/nHfy3qguJdQ8za1&#xA;Je28GoXrm4ZBFdzBpXMhZpCiBVQHbpXYUKh4RP8Amt+Z08zzP5s1cPISzCO+uI1qfBEdVUewGKXt&#xA;X/OOH5ja8umeeNZ8y6rqGsWui2MN2sNzcS3DAIJ2ZYvVZgrPwA/Xih5V5r/PX8zvMGqy3o1280uB&#xA;mPoWOnTyWsUadl/dFGen8zknFKefkv8AmB581D80fLtlqHmTVbyznueM1tPe3EsTr6bGjI7lWHzG&#xA;KH2vgV2KuxV2KvH/APnKq6uIPylnjiYqlze20U4HdAWkof8AZIuIV45+S3/OOFz5xsIfMXmK4ew0&#xA;CUk2lvDT6zcqpILVYERx1FAaEt2oKElX0fpP5MflXplmLSDyvp8yAUMl3Al1KfcyTiR/xwK8c8o3&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2011-02-28T11:49:44+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2011-02-28T11:49:44+01:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>595.275391</stDim:w>
            <stDim:h>841.889648</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standardfärgrutegrupp</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=45 Y=60 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=20 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>19.999998</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=40 Y=15 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>14.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=100 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=40 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>HavsblÂ</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>55.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>BlÂ</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>BlÂgrÂ</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>30.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>HimmelsblÂ</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Brun</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>MˆrkblÂ</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>10.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Skogsgrˆn</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>55.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Guld</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>5.000000</xmpG:cyan>
                           <xmpG:magenta>20.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Gr‰sgrˆn</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Orange</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Rˆd</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>14.999999</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Violett</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>45.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811910993024123B3C4</stEvt:instanceID>
                  <stEvt:when>2011-02-28T11:49:44+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:0180117407206811910993024123B3C4</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0180117407206811910993024123B3C4</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:0180117407206811910993024123B3C4</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -462.563 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 462.563 li
463.282 462.563 li
463.282 0 li
cp
clp
[1 0 0 1 0 0 ]ct
101.396 386.816 mo
104.778 382.639 108.55 382.927 111.276 385.134 cv
102.055 396.522 li
98.6689 393.781 97.8003 391.258 101.396 386.816 cv
cp
89.4355 377.133 mo
84.9497 382.674 89.1582 388.265 92.46 391.739 cv
88.4795 389.463 82.3374 388.057 78.9199 392.278 cv
74.2559 398.038 76.7139 403.814 83.6177 409.404 cv
100.02 422.685 li
125.903 390.716 li
109.896 377.756 li
103.873 372.879 94.7402 370.581 89.4355 377.133 cv
cp
90.667 400.697 mo
93.7998 396.828 96.2563 396.851 99.5981 399.558 cv
91.5161 409.539 li
88.1304 406.797 87.7119 404.347 90.667 400.697 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
94.8613 364.556 mo
63.3999 391.052 li
53.8145 379.671 li
80.7319 357.001 li
71.8755 346.484 li
76.4194 342.658 li
94.8613 364.556 li
cp
f
74.1831 339.412 mo
38.6831 360.188 li
24.2231 335.479 li
29.3018 332.506 li
36.2456 344.372 li
45.8164 338.771 li
39.1582 327.394 li
44.2368 324.422 li
50.895 335.8 li
61.54 329.569 li
54.5962 317.704 li
59.7231 314.703 li
74.1831 339.412 li
cp
f
50.4917 290.441 mo
42.374 301.084 li
52.9097 297.446 li
57.7646 311.513 li
18.8833 324.934 li
14.0283 310.867 li
28.3081 305.938 li
10.2993 300.064 li
6.33008 288.566 li
28.4238 298.297 li
44.9531 274.396 li
50.4917 290.441 li
cp
f
45.123 270.851 mo
4.57324 277.75 li
2.07715 263.08 li
42.627 256.181 li
45.123 270.851 li
cp
f
41.1587 224.82 mo
19.6353 241.328 li
41.1919 241.284 li
41.2129 251.582 li
.0800781 251.665 li
.0541992 238.821 li
21.0679 222.315 li
.0209961 222.357 li
0 212.06 li
41.1328 211.977 li
41.1587 224.82 li
cp
f
47.563 185.44 mo
44.8105 197.056 35.481 207.231 21.2217 203.853 cv
6.96289 200.475 3.11377 187.759 5.99609 175.592 cv
7.77002 168.104 9.49316 164.269 11.9639 160.958 cv
18.876 163.933 li
17.6631 169.053 li
14.481 169.229 11.9878 170.674 10.9834 174.913 cv
9.45752 181.354 15.7534 186.684 24.7827 188.823 cv
33.7563 190.949 41.3818 189.441 42.9473 182.834 cv
43.208 181.733 43.3525 180.14 43.3525 180.14 cv
28.9834 176.735 li
32.4141 162.256 li
48.9854 166.182 li
49.9517 169.958 49.6235 176.741 47.563 185.44 cv
cp
f
53.2358 163.117 mo
16.0269 145.585 li
28.2295 119.687 li
33.5522 122.195 li
27.6919 134.632 li
37.7236 139.359 li
43.3428 127.434 li
48.6655 129.941 li
43.0469 141.867 li
54.2046 147.124 li
60.0645 134.687 li
65.4385 137.219 li
53.2358 163.117 li
cp
f
70.2954 73.48 mo
96.2627 97.3159 li
86.1621 108.32 li
60.1948 84.4839 li
52.8486 92.4868 li
48.5137 88.5078 li
73.3066 61.498 li
77.6411 65.4771 li
70.2954 73.48 li
cp
f
106.643 87.1172 mo
82.0811 54.124 li
105.045 37.0283 li
108.559 41.748 li
97.5303 49.958 li
104.152 58.8535 li
114.727 50.981 li
118.241 55.7012 li
107.667 63.5728 li
115.031 73.4663 li
126.06 65.2568 li
129.607 70.022 li
106.643 87.1172 li
cp
f
152.705 58.1484 mo
141.226 51.2632 li
146.01 61.3301 li
132.571 67.7178 li
114.915 30.5674 li
128.354 24.1802 li
134.838 37.8242 li
138.676 19.2744 li
149.663 14.0527 li
142.445 37.0903 li
168.035 50.8628 li
152.705 58.1484 li
cp
f
196.881 44.1909 mo
176.149 26.6997 li
180.806 47.7476 li
170.751 49.9717 li
161.866 9.80957 li
174.406 7.03516 li
195.029 24.0293 li
190.482 3.47852 li
200.537 1.25439 li
209.422 41.4165 li
196.881 44.1909 li
cp
f
213.947 41.8457 mo
211.824 .767578 li
226.684 0 li
228.807 41.0776 li
213.947 41.8457 li
cp
f
247.105 42.6274 mo
241.755 42.1196 235.979 40.0938 233.281 38.5874 cv
235.63 30.001 li
239.967 30.4126 li
239.896 34.1567 243.266 36.9771 247.04 37.3354 cv
250.475 37.6616 253.348 36.7402 253.636 33.6987 cv
254.197 27.7847 235.158 24.7847 236.42 11.4917 cv
237.163 3.6626 245.34 -.449219 254.014 .374023 cv
258.632 .8125 264.547 2.56738 267.914 4.81885 cv
265.483 11.8628 li
261.822 11.5156 li
261.666 8.375 259.411 5.77393 255.919 5.44238 cv
252.935 5.15918 249.673 5.98633 249.379 9.08398 cv
248.855 14.604 268.476 16.8638 267.182 30.4946 cv
266.359 39.1685 258.202 43.6802 247.105 42.6274 cv
cp
f
290.911 50.6885 mo
287.141 37.8452 li
283.834 48.4888 li
269.623 44.0732 li
281.83 4.79297 li
296.04 9.20898 li
291.557 23.6348 li
306.953 12.6006 li
318.57 16.21 li
297.646 28.2524 li
307.12 55.7256 li
290.911 50.6885 li
cp
f
347.271 78.9609 mo
354.827 35.6377 li
343.141 28.7227 li
308.853 56.228 li
317.763 61.5005 li
327.483 53.1836 li
336.638 58.6001 li
334.026 71.124 li
347.271 78.9609 li
cp
337.67 52.9658 mo
331.827 49.5088 li
340.021 42.3267 li
337.67 52.9658 li
cp
f
382.353 115.607 mo
396.503 104.042 li
389.162 95.061 li
375.013 106.626 li
365.596 95.1045 li
397.444 69.0742 li
406.861 80.5957 li
393.719 91.3374 li
401.059 100.318 li
414.201 89.5767 li
423.618 101.099 li
391.769 127.128 li
382.353 115.607 li
cp
f
433.043 165.289 mo
446.347 159.146 448.447 147.77 442.162 134.157 cv
435.901 120.596 425.855 114.765 412.551 120.907 cv
399.247 127.05 397.996 140.402 403.38 152.063 cv
409.688 165.727 419.738 171.432 433.043 165.289 cv
cp
447.548 128.68 mo
449.5 127.778 450.356 125.45 449.455 123.499 cv
448.531 121.495 446.228 120.689 444.275 121.591 cv
442.323 122.492 441.442 124.768 442.367 126.771 cv
443.269 128.724 445.596 129.581 447.548 128.68 cv
cp
452.813 140.083 mo
454.766 139.182 455.646 136.905 454.721 134.902 cv
453.819 132.95 451.492 132.093 449.54 132.994 cv
447.588 133.896 446.73 136.223 447.632 138.175 cv
448.557 140.178 450.86 140.984 452.813 140.083 cv
cp
426.568 151.266 mo
417.219 155.582 410.636 155.63 408.003 149.929 cv
405.441 144.381 409.678 139.247 419.025 134.931 cv
429.197 130.235 435.338 130.578 437.898 136.125 cv
440.461 141.673 436.738 146.57 426.568 151.266 cv
cp
f
418.188 200.136 mo
416.098 188.383 420.615 175.338 435.043 172.772 cv
449.47 170.206 458.055 180.344 460.245 192.655 cv
461.593 200.23 461.536 204.436 460.584 208.455 cv
453.06 208.472 li
452.138 203.292 li
454.987 201.865 456.701 199.549 455.938 195.26 cv
454.779 188.742 446.884 186.354 437.748 187.979 cv
428.669 189.594 422.271 194.008 423.459 200.693 cv
423.657 201.807 424.158 203.327 424.158 203.327 cv
438.697 200.741 li
441.303 215.391 li
424.536 218.373 li
422.148 215.292 419.754 208.938 418.188 200.136 cv
cp
f
420.69 236.427 mo
420.897 231.057 422.596 225.176 423.948 222.397 cv
432.653 224.261 li
432.485 228.615 li
428.743 228.754 426.116 232.276 425.97 236.063 cv
425.837 239.513 426.918 242.329 429.971 242.446 cv
435.907 242.675 437.835 223.498 451.178 224.012 cv
459.036 224.314 463.6 232.247 463.265 240.954 cv
463.086 245.59 461.666 251.594 459.606 255.082 cv
452.438 253.051 li
452.579 249.375 li
455.706 249.043 458.176 246.646 458.312 243.142 cv
458.427 240.145 457.418 236.935 454.309 236.815 cv
448.768 236.602 447.612 256.318 433.93 255.791 cv
425.224 255.456 420.262 247.564 420.69 236.427 cv
cp
f
415.123 280.634 mo
427.731 276.138 li
416.916 273.442 li
420.515 259.004 li
460.426 268.952 li
456.827 283.391 li
442.169 279.737 li
454.063 294.48 li
451.121 306.283 li
437.906 286.08 li
411.019 297.104 li
415.123 280.634 li
cp
f
408.515 348.2 mo
421.59 354.814 431.813 349.397 438.581 336.019 cv
445.323 322.69 443.657 311.195 430.581 304.58 cv
417.506 297.965 406.262 305.275 400.465 316.736 cv
393.67 330.165 395.438 341.585 408.515 348.2 cv
cp
415.487 334.417 mo
406.299 329.769 402.173 324.639 405.008 319.034 cv
407.767 313.582 414.421 313.714 423.609 318.363 cv
433.605 323.42 437.149 328.446 434.391 333.898 cv
431.633 339.352 425.483 339.475 415.487 334.417 cv
cp
f
387.338 341.108 mo
419.135 367.203 li
409.694 378.705 li
382.49 356.38 li
373.769 367.008 li
369.176 363.238 li
387.338 341.108 li
cp
f
333.106 393.622 mo
371.017 415.912 li
381.595 407.398 li
367.885 365.635 li
359.819 372.126 li
364.191 384.147 li
355.904 390.816 li
345.097 383.973 li
333.106 393.622 li
cp
360.817 393.763 mo
366.106 389.506 li
369.953 399.701 li
360.817 393.763 li
cp
f
189.615 446.455 mo
188.64 451.74 185.19 453.29 181.74 452.654 cv
184.398 438.243 li
188.683 439.034 190.651 440.835 189.615 446.455 cv
cp
204.749 449.246 mo
206.042 442.236 199.673 439.335 195.112 437.861 cv
199.697 437.959 205.764 436.259 206.749 430.917 cv
208.093 423.629 203.175 419.729 194.439 418.118 cv
173.686 414.29 li
166.225 454.739 li
186.477 458.476 li
194.1 459.882 203.22 457.537 204.749 449.246 cv
cp
192.407 429.135 mo
191.504 434.03 189.335 435.185 185.106 434.404 cv
187.436 421.774 li
191.721 422.564 193.259 424.517 192.407 429.135 cv
cp
f
238.569 427.316 mo
238.232 462.563 li
223.297 462.421 li
223.634 427.174 li
212.771 427.069 li
212.828 421.186 li
249.489 421.536 li
249.433 427.42 li
238.569 427.316 li
cp
f
286.746 456.445 mo
283 438.56 li
271.648 440.938 li
275.395 458.822 li
260.831 461.874 li
252.398 421.616 li
266.961 418.565 li
270.441 435.178 li
281.794 432.8 li
278.313 416.188 li
292.877 413.137 li
301.311 453.394 li
286.746 456.445 li
cp
f
139.719 428.732 mo
144.042 428.732 147.546 425.229 147.546 420.905 cv
147.546 416.582 144.042 413.078 139.719 413.078 cv
135.396 413.078 131.892 416.582 131.892 420.905 cv
131.892 425.229 135.396 428.732 139.719 428.732 cv
cp
f
325.703 428.938 mo
330.025 428.938 333.53 425.434 333.53 421.11 cv
333.53 416.787 330.025 413.282 325.703 413.282 cv
321.38 413.282 317.875 416.787 317.875 421.11 cv
317.875 425.434 321.38 428.938 325.703 428.938 cv
cp
f
69.4492 222.831 mo
86.2495 222.874 li
86.2495 222.874 87.8413 222.743 89.3188 223.457 cv
90.7988 224.169 92.9146 225.567 93.5254 226.059 cv
94.1343 226.55 96.6748 229.103 97.2852 230.631 cv
97.8984 232.159 97.6689 233.517 97.6689 233.517 cv
97.6689 248.277 li
79.7646 248.275 li
79.7646 248.275 77.8252 248.154 77.2607 247.942 cv
76.6953 247.731 74.8105 247.096 73.2212 245.688 cv
73.2212 245.688 70.8408 242.994 70.5337 241.893 cv
70.5337 241.893 69.4277 239.51 69.4492 239.205 cv
69.4688 238.899 69.4492 222.831 69.4492 222.831 cv
f
169.248 253.321 mo
186.049 253.362 li
186.049 253.362 187.64 253.23 189.118 253.946 cv
190.598 254.66 192.714 256.057 193.324 256.547 cv
193.933 257.038 196.474 259.591 197.086 261.119 cv
197.697 262.648 197.466 264.005 197.466 264.005 cv
197.466 278.768 li
179.564 278.766 li
179.564 278.766 177.624 278.643 177.06 278.434 cv
176.495 278.22 174.609 277.584 173.02 276.179 cv
173.02 276.179 170.638 273.482 170.333 272.383 cv
170.333 272.383 169.227 269.998 169.248 269.693 cv
169.268 269.388 169.248 253.321 169.248 253.321 cv
f
296.887 253.185 mo
280.086 253.226 li
280.084 253.226 278.495 253.094 277.015 253.809 cv
275.537 254.523 273.419 255.921 272.811 256.412 cv
272.199 256.903 269.658 259.454 269.048 260.984 cv
268.436 262.514 268.666 263.868 268.666 263.868 cv
268.666 278.631 li
286.569 278.629 li
286.569 278.629 288.511 278.508 289.074 278.296 cv
289.639 278.084 291.523 277.449 293.115 276.041 cv
293.115 276.041 295.495 273.348 295.801 272.246 cv
295.801 272.246 296.906 269.863 296.887 269.559 cv
296.865 269.251 296.887 253.185 296.887 253.185 cv
f
202.481 253.302 mo
219.282 253.343 li
219.282 253.343 220.873 253.213 222.351 253.926 cv
223.831 254.641 225.947 256.038 226.558 256.529 cv
227.166 257.021 229.707 259.571 230.318 261.102 cv
230.93 262.631 230.699 263.987 230.699 263.987 cv
230.699 278.748 li
212.796 278.746 li
212.796 278.746 210.857 278.625 210.291 278.413 cv
209.728 278.202 207.842 277.566 206.253 276.159 cv
206.253 276.159 203.871 273.465 203.565 272.363 cv
203.565 272.363 202.459 269.98 202.481 269.676 cv
202.5 269.37 202.481 253.302 202.481 253.302 cv
f
263.761 253.302 mo
246.96 253.343 li
246.96 253.343 245.369 253.213 243.891 253.926 cv
242.411 254.641 240.295 256.038 239.685 256.529 cv
239.075 257.021 236.535 259.571 235.922 261.102 cv
235.312 262.631 235.54 263.987 235.54 263.987 cv
235.54 278.748 li
253.444 278.746 li
253.444 278.746 255.385 278.625 255.948 278.413 cv
256.515 278.202 258.396 277.566 259.989 276.159 cv
259.989 276.159 262.369 273.465 262.676 272.363 cv
262.676 272.363 263.78 269.98 263.761 269.676 cv
263.741 269.37 263.761 253.302 263.761 253.302 cv
f
102.673 253.355 mo
119.474 253.398 li
119.474 253.398 121.065 253.268 122.543 253.98 cv
124.023 254.695 126.139 256.093 126.75 256.584 cv
127.358 257.075 129.899 259.626 130.51 261.156 cv
131.123 262.685 130.892 264.039 130.892 264.039 cv
130.892 278.803 li
112.989 278.801 li
112.989 278.801 111.049 278.68 110.483 278.468 cv
109.92 278.256 108.035 277.62 106.445 276.213 cv
106.445 276.213 104.063 273.52 103.758 272.417 cv
103.758 272.417 102.652 270.035 102.673 269.729 cv
102.693 269.425 102.673 253.355 102.673 253.355 cv
f
135.904 253.339 mo
152.707 253.38 li
152.707 253.38 154.296 253.248 155.776 253.963 cv
157.254 254.678 159.372 256.072 159.98 256.564 cv
160.591 257.056 163.132 259.608 163.743 261.138 cv
164.355 262.667 164.125 264.022 164.125 264.022 cv
164.125 278.785 li
146.222 278.783 li
146.222 278.783 144.282 278.662 143.716 278.45 cv
143.152 278.239 141.268 277.603 139.676 276.196 cv
139.676 276.196 137.296 273.5 136.991 272.4 cv
136.991 272.4 135.884 270.018 135.904 269.711 cv
135.926 269.405 135.904 253.339 135.904 253.339 cv
f
363.379 253.152 mo
346.578 253.195 li
346.578 253.195 344.986 253.063 343.507 253.777 cv
342.029 254.492 339.914 255.888 339.303 256.38 cv
338.691 256.871 336.153 259.424 335.54 260.952 cv
334.93 262.48 335.158 263.837 335.158 263.837 cv
335.158 278.598 li
353.062 278.598 li
353.062 278.598 355.003 278.476 355.566 278.264 cv
356.131 278.052 358.016 277.416 359.606 276.01 cv
359.606 276.01 361.987 273.314 362.293 272.215 cv
362.293 272.215 363.398 269.831 363.379 269.525 cv
363.359 269.221 363.379 253.152 363.379 253.152 cv
f
330.253 253.269 mo
313.452 253.313 li
313.452 253.313 311.86 253.182 310.383 253.896 cv
308.903 254.608 306.787 256.006 306.176 256.497 cv
305.567 256.988 303.027 259.541 302.416 261.069 cv
301.803 262.598 302.034 263.955 302.034 263.955 cv
302.034 278.718 li
319.937 278.716 li
319.937 278.716 321.877 278.593 322.44 278.381 cv
323.007 278.17 324.891 277.533 326.48 276.128 cv
326.48 276.128 328.863 273.433 329.169 272.333 cv
329.169 272.333 330.274 269.948 330.253 269.643 cv
330.232 269.338 330.253 253.269 330.253 253.269 cv
f
69.3335 253.143 mo
86.1343 253.184 li
86.1343 253.186 87.7261 253.055 89.2036 253.768 cv
90.6836 254.482 92.7993 255.88 93.4097 256.371 cv
94.0186 256.862 96.5596 259.413 97.1724 260.943 cv
97.7827 262.472 97.5518 263.828 97.5518 263.828 cv
97.5518 278.59 li
79.6494 278.588 li
79.6494 278.588 77.7095 278.466 77.146 278.255 cv
76.5801 278.043 74.6948 277.407 73.1055 276 cv
73.1055 276 70.7256 273.307 70.418 272.204 cv
70.418 272.204 69.3125 269.822 69.3335 269.517 cv
69.353 269.211 69.3335 253.143 69.3335 253.143 cv
f
396.41 253.063 mo
379.609 253.104 li
379.609 253.104 378.018 252.972 376.54 253.687 cv
375.061 254.401 372.944 255.797 372.336 256.288 cv
371.725 256.78 369.185 259.332 368.573 260.861 cv
367.961 262.392 368.191 263.746 368.191 263.746 cv
368.191 278.509 li
386.094 278.507 li
386.094 278.507 388.034 278.386 388.6 278.175 cv
389.164 277.963 391.048 277.326 392.638 275.92 cv
392.638 275.92 395.02 273.226 395.326 272.124 cv
395.326 272.124 396.432 269.742 396.41 269.435 cv
396.39 269.129 396.41 253.063 396.41 253.063 cv
f
232.882 282.4 mo
200.689 282.4 li
200.689 321.26 li
200.689 321.26 200.593 329.4 194.068 329.4 cv
187.544 329.4 121.413 329.332 121.413 329.332 cv
121.421 344.001 li
346.255 344.001 li
346.33 329.166 li
346.33 329.166 278.428 329.144 271.827 329.144 cv
265.303 329.144 265.394 321.26 265.394 321.26 cv
265.394 282.4 li
232.882 282.4 li
f
169.161 283.938 mo
185.961 283.979 li
185.961 283.979 187.553 283.848 189.031 284.563 cv
190.511 285.276 192.626 286.672 193.237 287.163 cv
193.846 287.655 196.387 290.208 196.998 291.736 cv
197.61 293.266 197.379 294.622 197.379 294.622 cv
197.379 309.384 li
179.477 309.383 li
179.477 309.383 177.537 309.262 176.971 309.048 cv
176.407 308.836 174.522 308.2 172.933 306.795 cv
172.933 306.795 170.551 304.1 170.246 302.999 cv
170.246 302.999 169.14 300.615 169.161 300.31 cv
169.181 300.005 169.161 283.938 169.161 283.938 cv
f
102.586 283.973 mo
119.387 284.016 li
119.387 284.016 120.979 283.885 122.456 284.597 cv
123.936 285.312 126.052 286.709 126.661 287.2 cv
127.271 287.691 129.812 290.244 130.423 291.773 cv
131.036 293.302 130.805 294.658 130.805 294.658 cv
130.805 309.419 li
112.902 309.417 li
112.902 309.417 110.962 309.296 110.396 309.084 cv
109.833 308.873 107.948 308.237 106.358 306.83 cv
106.358 306.83 103.976 304.137 103.671 303.034 cv
103.671 303.034 102.565 300.651 102.586 300.347 cv
102.606 300.039 102.586 283.973 102.586 283.973 cv
f
135.817 283.955 mo
152.618 283.997 li
152.618 283.997 154.209 283.865 155.689 284.58 cv
157.167 285.294 159.285 286.689 159.893 287.182 cv
160.504 287.672 163.043 290.225 163.656 291.754 cv
164.268 293.284 164.038 294.639 164.038 294.639 cv
164.038 309.401 li
146.135 309.4 li
146.135 309.4 144.193 309.278 143.629 309.067 cv
143.065 308.855 141.181 308.22 139.589 306.813 cv
139.589 306.813 137.209 304.117 136.903 303.017 cv
136.903 303.017 135.797 300.635 135.817 300.327 cv
135.839 300.021 135.817 283.955 135.817 283.955 cv
f
296.991 283.847 mo
280.189 283.888 li
280.189 283.888 278.6 283.756 277.119 284.471 cv
275.642 285.186 273.523 286.583 272.915 287.074 cv
272.305 287.565 269.764 290.116 269.152 291.646 cv
268.54 293.176 268.771 294.53 268.771 294.53 cv
268.771 309.293 li
286.674 309.291 li
286.674 309.291 288.615 309.17 289.18 308.959 cv
289.743 308.747 291.628 308.11 293.219 306.703 cv
293.219 306.703 295.6 304.01 295.904 302.908 cv
295.904 302.908 297.011 300.525 296.991 300.221 cv
296.97 299.913 296.991 283.847 296.991 283.847 cv
f
363.483 283.813 mo
346.684 283.857 li
346.684 283.857 345.091 283.726 343.611 284.44 cv
342.134 285.152 340.019 286.551 339.407 287.042 cv
338.797 287.533 336.258 290.086 335.645 291.614 cv
335.034 293.143 335.264 294.5 335.264 294.5 cv
335.264 309.26 li
353.166 309.26 li
353.166 309.26 355.107 309.138 355.672 308.926 cv
356.235 308.714 358.12 308.078 359.711 306.671 cv
359.711 306.671 362.092 303.977 362.396 302.877 cv
362.396 302.877 363.503 300.493 363.483 300.188 cv
363.462 299.883 363.483 283.813 363.483 283.813 cv
f
330.356 283.932 mo
313.557 283.975 li
313.557 283.975 311.965 283.843 310.487 284.558 cv
309.007 285.271 306.892 286.668 306.281 287.159 cv
305.672 287.65 303.132 290.203 302.521 291.731 cv
301.907 293.26 302.139 294.617 302.139 294.617 cv
302.139 309.378 li
320.041 309.378 li
320.041 309.378 321.981 309.255 322.545 309.043 cv
323.11 308.832 324.995 308.195 326.585 306.79 cv
326.585 306.79 328.965 304.094 329.273 302.994 cv
329.273 302.994 330.378 300.61 330.356 300.305 cv
330.337 300 330.356 283.932 330.356 283.932 cv
f
169.326 223.055 mo
186.127 223.096 li
186.127 223.096 187.718 222.965 189.196 223.679 cv
190.676 224.394 192.792 225.792 193.403 226.28 cv
194.012 226.771 196.552 229.325 197.165 230.854 cv
197.776 232.384 197.547 233.738 197.547 233.738 cv
197.547 248.501 li
179.642 248.5 li
179.642 248.5 177.702 248.378 177.138 248.167 cv
176.573 247.955 174.688 247.318 173.099 245.912 cv
173.099 245.912 170.718 243.218 170.411 242.116 cv
170.411 242.116 169.305 239.734 169.326 239.429 cv
169.346 239.121 169.326 223.055 169.326 223.055 cv
f
296.965 222.917 mo
280.165 222.961 li
280.165 222.961 278.573 222.83 277.094 223.544 cv
275.615 224.257 273.498 225.654 272.889 226.146 cv
272.277 226.638 269.739 229.189 269.127 230.718 cv
268.516 232.247 268.744 233.604 268.744 233.604 cv
268.744 248.364 li
286.647 248.364 li
286.647 248.364 288.59 248.241 289.153 248.029 cv
289.717 247.818 291.603 247.182 293.193 245.775 cv
293.193 245.777 295.573 243.081 295.879 241.981 cv
295.879 241.981 296.984 239.597 296.965 239.292 cv
296.944 238.986 296.965 222.917 296.965 222.917 cv
f
202.56 223.038 mo
219.36 223.078 li
219.36 223.078 220.952 222.947 222.429 223.662 cv
223.909 224.376 226.025 225.772 226.634 226.264 cv
227.245 226.755 229.785 229.307 230.396 230.836 cv
231.009 232.365 230.777 233.721 230.777 233.721 cv
230.777 248.484 li
212.875 248.482 li
212.875 248.482 210.935 248.358 210.37 248.147 cv
209.806 247.936 207.921 247.3 206.332 245.895 cv
206.332 245.895 203.949 243.199 203.644 242.1 cv
203.644 242.1 202.538 239.715 202.56 239.409 cv
202.579 239.104 202.56 223.038 202.56 223.038 cv
f
263.839 223.038 mo
247.038 223.078 li
247.038 223.078 245.447 222.947 243.969 223.662 cv
242.489 224.376 240.373 225.772 239.762 226.264 cv
239.153 226.755 236.613 229.307 236 230.836 cv
235.39 232.365 235.619 233.721 235.619 233.721 cv
235.619 248.484 li
253.523 248.482 li
253.523 248.482 255.463 248.358 256.026 248.147 cv
256.592 247.936 258.478 247.3 260.066 245.895 cv
260.066 245.895 262.447 243.199 262.754 242.1 cv
262.754 242.1 263.86 239.715 263.839 239.409 cv
263.819 239.104 263.839 223.038 263.839 223.038 cv
f
102.751 223.09 mo
119.552 223.133 li
119.552 223.133 121.144 223.001 122.621 223.716 cv
124.101 224.429 126.217 225.826 126.828 226.317 cv
127.437 226.809 129.978 229.361 130.59 230.891 cv
131.201 232.418 130.97 233.775 130.97 233.775 cv
130.97 248.536 li
113.067 248.536 li
113.067 248.536 111.127 248.413 110.563 248.201 cv
109.998 247.99 108.113 247.354 106.523 245.948 cv
106.523 245.948 104.143 243.253 103.836 242.152 cv
103.836 242.152 102.73 239.769 102.751 239.464 cv
102.771 239.158 102.751 223.09 102.751 223.09 cv
f
135.982 223.072 mo
152.785 223.113 li
152.785 223.113 154.376 222.984 155.854 223.697 cv
157.334 224.411 159.45 225.809 160.059 226.301 cv
160.67 226.792 163.21 229.342 163.821 230.872 cv
164.434 232.401 164.203 233.756 164.203 233.756 cv
164.203 248.519 li
146.3 248.517 li
146.3 248.517 144.36 248.396 143.795 248.185 cv
143.231 247.973 141.346 247.336 139.757 245.93 cv
139.757 245.93 137.375 243.236 137.069 242.134 cv
137.069 242.134 135.963 239.751 135.982 239.446 cv
136.004 239.139 135.982 223.072 135.982 223.072 cv
f
363.457 222.887 mo
346.656 222.929 li
346.656 222.929 345.065 222.797 343.586 223.512 cv
342.107 224.226 339.991 225.622 339.381 226.113 cv
338.77 226.604 336.231 229.156 335.619 230.686 cv
335.008 232.217 335.236 233.571 335.236 233.571 cv
335.236 248.334 li
353.142 248.332 li
353.142 248.332 355.081 248.211 355.646 247.999 cv
356.209 247.788 358.094 247.152 359.686 245.744 cv
359.686 245.744 362.065 243.049 362.37 241.949 cv
362.37 241.949 363.478 239.566 363.457 239.259 cv
363.438 238.954 363.457 222.887 363.457 222.887 cv
f
330.331 223.005 mo
313.53 223.046 li
313.53 223.046 311.939 222.915 310.461 223.629 cv
308.981 224.344 306.865 225.741 306.255 226.23 cv
305.646 226.722 303.105 229.274 302.494 230.804 cv
301.882 232.334 302.113 233.688 302.113 233.688 cv
302.113 248.451 li
320.016 248.449 li
320.016 248.449 321.955 248.328 322.521 248.117 cv
323.084 247.905 324.97 247.269 326.56 245.862 cv
326.56 245.862 328.94 243.168 329.246 242.066 cv
329.246 242.066 330.353 239.685 330.331 239.377 cv
330.312 239.071 330.331 223.005 330.331 223.005 cv
f
396.488 222.796 mo
379.688 222.837 li
379.688 222.837 378.096 222.706 376.619 223.42 cv
375.139 224.135 373.022 225.532 372.414 226.024 cv
371.803 226.516 369.262 229.065 368.651 230.597 cv
368.039 232.125 368.27 233.479 368.27 233.479 cv
368.27 248.242 li
386.173 248.241 li
386.173 248.241 388.112 248.119 388.678 247.908 cv
389.241 247.696 391.127 247.06 392.716 245.652 cv
392.716 245.652 395.099 242.959 395.403 241.857 cv
395.403 241.857 396.51 239.476 396.488 239.17 cv
396.469 238.863 396.488 222.796 396.488 222.796 cv
f
169.383 192.673 mo
186.184 192.714 li
186.184 192.714 187.775 192.583 189.253 193.297 cv
190.732 194.012 192.849 195.407 193.459 195.899 cv
194.068 196.391 196.609 198.943 197.219 200.471 cv
197.832 202.002 197.601 203.357 197.601 203.357 cv
197.601 218.12 li
179.699 218.118 li
179.699 218.118 177.759 217.997 177.195 217.783 cv
176.629 217.574 174.744 216.938 173.155 215.53 cv
173.155 215.53 170.772 212.834 170.467 211.734 cv
170.467 211.734 169.361 209.353 169.383 209.045 cv
169.402 208.74 169.383 192.673 169.383 192.673 cv
f
297.021 192.536 mo
280.219 192.577 li
280.219 192.577 278.63 192.448 277.149 193.161 cv
275.672 193.875 273.554 195.272 272.945 195.764 cv
272.334 196.255 269.796 198.806 269.184 200.336 cv
268.572 201.865 268.802 203.222 268.802 203.222 cv
268.802 217.983 li
286.704 217.981 li
286.704 217.981 288.644 217.859 289.21 217.648 cv
289.773 217.437 291.658 216.8 293.249 215.393 cv
293.249 215.393 295.63 212.7 295.936 211.598 cv
295.936 211.598 297.041 209.215 297.021 208.91 cv
297 208.604 297.021 192.536 297.021 192.536 cv
f
202.616 192.653 mo
219.417 192.696 li
219.417 192.696 221.008 192.565 222.486 193.278 cv
223.966 193.993 226.082 195.39 226.69 195.881 cv
227.301 196.373 229.842 198.925 230.452 200.454 cv
231.065 201.982 230.834 203.339 230.834 203.339 cv
230.834 218.1 li
212.932 218.098 li
212.932 218.098 210.992 217.977 210.426 217.765 cv
209.862 217.554 207.978 216.918 206.388 215.51 cv
206.388 215.51 204.006 212.817 203.7 211.715 cv
203.7 211.715 202.594 209.333 202.616 209.027 cv
202.636 208.722 202.616 192.653 202.616 192.653 cv
f
263.896 192.653 mo
247.095 192.696 li
247.095 192.696 245.503 192.565 244.023 193.278 cv
242.545 193.993 240.43 195.39 239.819 195.881 cv
239.21 196.373 236.669 198.925 236.057 200.454 cv
235.445 201.982 235.675 203.339 235.675 203.339 cv
235.675 218.1 li
253.58 218.098 li
253.58 218.098 255.52 217.977 256.083 217.765 cv
256.646 217.554 258.531 216.918 260.123 215.51 cv
260.123 215.51 262.503 212.817 262.811 211.715 cv
262.811 211.715 263.915 209.333 263.896 209.027 cv
263.875 208.72 263.896 192.653 263.896 192.653 cv
f
102.808 192.708 mo
119.608 192.751 li
119.608 192.751 121.2 192.62 122.678 193.334 cv
124.158 194.047 126.273 195.444 126.882 195.936 cv
127.493 196.427 130.034 198.979 130.645 200.508 cv
131.257 202.037 131.026 203.394 131.026 203.394 cv
131.026 218.154 li
113.124 218.154 li
113.124 218.154 111.184 218.031 110.62 217.82 cv
110.055 217.608 108.169 216.972 106.58 215.565 cv
106.58 215.565 104.198 212.872 103.893 211.771 cv
103.893 211.771 102.787 209.387 102.808 209.082 cv
102.828 208.776 102.808 192.708 102.808 192.708 cv
f
136.039 192.69 mo
152.842 192.731 li
152.842 192.731 154.431 192.601 155.911 193.315 cv
157.389 194.029 159.507 195.427 160.115 195.916 cv
160.726 196.408 163.267 198.96 163.877 200.489 cv
164.49 202.02 164.259 203.375 164.259 203.375 cv
164.259 218.137 li
146.356 218.135 li
146.356 218.135 144.415 218.014 143.851 217.802 cv
143.288 217.591 141.402 216.955 139.811 215.547 cv
139.811 215.547 137.431 212.854 137.125 211.752 cv
137.125 211.752 136.02 209.37 136.039 209.063 cv
136.061 208.757 136.039 192.69 136.039 192.69 cv
f
363.514 192.506 mo
346.713 192.547 li
346.713 192.547 345.122 192.416 343.643 193.13 cv
342.164 193.845 340.048 195.24 339.438 195.731 cv
338.827 196.223 336.288 198.775 335.676 200.304 cv
335.064 201.833 335.294 203.189 335.294 203.189 cv
335.294 217.952 li
353.198 217.951 li
353.196 217.951 355.138 217.827 355.702 217.616 cv
356.266 217.404 358.15 216.768 359.742 215.362 cv
359.742 215.362 362.122 212.667 362.428 211.567 cv
362.428 211.567 363.533 209.183 363.514 208.877 cv
363.494 208.572 363.514 192.506 363.514 192.506 cv
f
330.388 192.623 mo
313.587 192.665 li
313.587 192.665 311.995 192.533 310.518 193.248 cv
309.038 193.962 306.922 195.357 306.311 195.849 cv
305.702 196.34 303.161 198.893 302.549 200.421 cv
301.938 201.95 302.169 203.307 302.169 203.307 cv
302.169 218.07 li
320.072 218.068 li
320.072 218.068 322.012 217.946 322.576 217.735 cv
323.141 217.523 325.026 216.886 326.615 215.48 cv
326.615 215.48 328.998 212.785 329.303 211.685 cv
329.303 211.685 330.409 209.301 330.388 208.995 cv
330.367 208.689 330.388 192.623 330.388 192.623 cv
f
169.257 162.407 mo
186.058 162.448 li
186.058 162.448 187.649 162.317 189.129 163.031 cv
190.606 163.746 192.723 165.143 193.333 165.635 cv
193.944 166.126 196.482 168.676 197.095 170.207 cv
197.706 171.736 197.478 173.09 197.478 173.09 cv
197.478 187.853 li
179.573 187.852 li
179.573 187.852 177.633 187.73 177.069 187.519 cv
176.505 187.307 174.62 186.671 173.029 185.264 cv
173.029 185.264 170.648 182.57 170.343 181.468 cv
170.343 181.468 169.237 179.086 169.257 178.781 cv
169.276 178.473 169.257 162.407 169.257 162.407 cv
f
296.896 162.27 mo
280.095 162.313 li
280.095 162.313 278.504 162.182 277.023 162.896 cv
275.546 163.611 273.43 165.006 272.819 165.498 cv
272.211 165.989 269.669 168.542 269.057 170.07 cv
268.446 171.599 268.676 172.956 268.676 172.956 cv
268.676 187.718 li
286.58 187.716 li
286.58 187.716 288.52 187.593 289.084 187.382 cv
289.647 187.17 291.532 186.534 293.123 185.129 cv
293.123 185.129 295.504 182.433 295.811 181.333 cv
295.811 181.333 296.915 178.949 296.896 178.644 cv
296.876 178.338 296.896 162.27 296.896 162.27 cv
f
202.49 162.389 mo
219.291 162.43 li
219.291 162.43 220.882 162.299 222.359 163.014 cv
223.839 163.728 225.956 165.124 226.566 165.615 cv
227.175 166.106 229.716 168.659 230.326 170.188 cv
230.939 171.716 230.708 173.073 230.708 173.073 cv
230.708 187.834 li
212.805 187.834 li
212.805 187.834 210.865 187.71 210.302 187.499 cv
209.736 187.288 207.851 186.651 206.262 185.246 cv
206.262 185.246 203.881 182.551 203.574 181.451 cv
203.574 181.451 202.468 179.066 202.49 178.761 cv
202.509 178.456 202.49 162.389 202.49 162.389 cv
f
263.77 162.389 mo
246.969 162.43 li
246.969 162.43 245.377 162.299 243.899 163.014 cv
242.419 163.728 240.304 165.124 239.693 165.615 cv
239.084 166.106 236.544 168.659 235.933 170.188 cv
235.32 171.716 235.551 173.073 235.551 173.073 cv
235.551 187.834 li
253.453 187.834 li
253.453 187.834 255.394 187.71 255.959 187.499 cv
256.522 187.288 258.407 186.651 259.998 185.246 cv
259.998 185.246 262.379 182.551 262.685 181.451 cv
262.685 181.451 263.791 179.066 263.77 178.761 cv
263.75 178.456 263.77 162.389 263.77 162.389 cv
f
102.682 162.443 mo
119.483 162.485 li
119.483 162.485 121.074 162.354 122.554 163.068 cv
124.032 163.782 126.147 165.178 126.758 165.669 cv
127.369 166.161 129.908 168.713 130.521 170.242 cv
131.131 171.771 130.902 173.127 130.902 173.127 cv
130.902 187.89 li
112.998 187.889 li
112.998 187.889 111.058 187.767 110.494 187.556 cv
109.928 187.342 108.045 186.706 106.454 185.301 cv
106.454 185.301 104.074 182.605 103.767 181.505 cv
103.767 181.505 102.663 179.121 102.682 178.815 cv
102.702 178.51 102.682 162.443 102.682 162.443 cv
f
135.915 162.424 mo
152.716 162.465 li
152.716 162.465 154.307 162.336 155.785 163.048 cv
157.264 163.763 159.381 165.161 159.991 165.652 cv
160.6 166.144 163.141 168.696 163.751 170.224 cv
164.364 171.753 164.133 173.11 164.133 173.11 cv
164.133 187.871 li
146.23 187.869 li
146.23 187.869 144.291 187.748 143.727 187.536 cv
143.161 187.325 141.276 186.688 139.687 185.281 cv
139.687 185.281 137.305 182.587 137 181.485 cv
137 181.485 135.894 179.104 135.915 178.798 cv
135.935 178.493 135.915 162.424 135.915 162.424 cv
f
363.388 162.239 mo
346.587 162.28 li
346.587 162.28 344.995 162.149 343.519 162.864 cv
342.038 163.578 339.923 164.976 339.312 165.465 cv
338.702 165.957 336.162 168.509 335.549 170.038 cv
334.938 171.568 335.168 172.923 335.168 172.923 cv
335.168 187.686 li
353.072 187.684 li
353.072 187.684 355.012 187.563 355.576 187.351 cv
356.142 187.14 358.026 186.503 359.615 185.096 cv
359.615 185.096 361.996 182.403 362.303 181.301 cv
362.303 181.301 363.409 178.918 363.388 178.611 cv
363.368 178.306 363.388 162.239 363.388 162.239 cv
f
330.264 162.356 mo
313.461 162.398 li
313.461 162.398 311.869 162.267 310.392 162.981 cv
308.912 163.695 306.796 165.093 306.187 165.584 cv
305.576 166.074 303.036 168.626 302.425 170.157 cv
301.812 171.686 302.043 173.04 302.043 173.04 cv
302.043 187.803 li
319.945 187.801 li
319.945 187.801 321.886 187.68 322.451 187.468 cv
323.015 187.257 324.899 186.621 326.489 185.213 cv
326.489 185.213 328.871 182.52 329.178 181.418 cv
329.178 181.418 330.283 179.036 330.264 178.73 cv
330.242 178.423 330.264 162.356 330.264 162.356 cv
f
169.255 132.267 mo
186.055 132.31 li
186.055 132.31 187.646 132.178 189.126 132.891 cv
190.604 133.605 192.72 135.003 193.331 135.494 cv
193.942 135.986 196.48 138.536 197.093 140.067 cv
197.704 141.596 197.475 142.952 197.475 142.952 cv
197.475 157.713 li
179.57 157.711 li
179.57 157.711 177.63 157.589 177.067 157.378 cv
176.503 157.167 174.618 156.531 173.027 155.124 cv
173.027 155.124 170.646 152.43 170.341 151.328 cv
170.341 151.328 169.235 148.946 169.255 148.64 cv
169.276 148.335 169.255 132.267 169.255 132.267 cv
f
296.894 132.132 mo
280.093 132.173 li
280.093 132.173 278.502 132.042 277.021 132.756 cv
275.544 133.47 273.428 134.866 272.816 135.357 cv
272.209 135.849 269.668 138.401 269.055 139.93 cv
268.444 141.459 268.673 142.815 268.673 142.815 cv
268.673 157.578 li
286.577 157.576 li
286.577 157.576 288.518 157.455 289.081 157.243 cv
289.646 157.032 291.529 156.396 293.121 154.989 cv
293.121 154.989 295.502 152.293 295.81 151.193 cv
295.81 151.193 296.913 148.811 296.894 148.503 cv
296.874 148.198 296.894 132.132 296.894 132.132 cv
f
202.488 132.249 mo
219.288 132.29 li
219.288 132.29 220.88 132.159 222.357 132.874 cv
223.837 133.588 225.954 134.983 226.564 135.475 cv
227.173 135.966 229.713 138.519 230.326 140.047 cv
230.937 141.578 230.708 142.933 230.708 142.933 cv
230.708 157.695 li
212.803 157.693 li
212.803 157.693 210.863 157.572 210.3 157.361 cv
209.734 157.149 207.849 156.513 206.26 155.106 cv
206.26 155.106 203.879 152.413 203.572 151.311 cv
203.572 151.311 202.468 148.929 202.488 148.621 cv
202.507 148.315 202.488 132.249 202.488 132.249 cv
f
263.768 132.249 mo
246.967 132.29 li
246.967 132.29 245.375 132.159 243.896 132.874 cv
242.418 133.588 240.302 134.983 239.69 135.475 cv
239.082 135.966 236.541 138.519 235.93 140.047 cv
235.318 141.578 235.549 142.933 235.549 142.933 cv
235.549 157.695 li
253.451 157.693 li
253.451 157.693 255.391 157.572 255.957 157.361 cv
256.521 157.149 258.406 156.513 259.995 155.106 cv
259.995 155.106 262.377 152.413 262.683 151.311 cv
262.683 151.311 263.789 148.929 263.768 148.621 cv
263.748 148.315 263.768 132.249 263.768 132.249 cv
f
135.913 132.284 mo
152.713 132.327 li
152.713 132.327 154.305 132.196 155.783 132.91 cv
157.263 133.623 159.378 135.02 159.989 135.512 cv
160.598 136.003 163.139 138.556 163.75 140.084 cv
164.362 141.613 164.133 142.969 164.133 142.969 cv
164.133 157.73 li
146.229 157.73 li
146.229 157.73 144.289 157.607 143.725 157.396 cv
143.159 157.185 141.274 156.548 139.685 155.143 cv
139.685 155.143 137.303 152.447 136.997 151.347 cv
136.997 151.347 135.891 148.963 135.913 148.658 cv
135.933 148.352 135.913 132.284 135.913 132.284 cv
f
330.261 132.217 mo
313.459 132.26 li
313.459 132.26 311.867 132.128 310.39 132.841 cv
308.911 133.555 306.794 134.953 306.185 135.444 cv
305.574 135.936 303.033 138.486 302.423 140.017 cv
301.811 141.545 302.041 142.902 302.041 142.902 cv
302.041 157.663 li
319.943 157.661 li
319.943 157.661 321.884 157.54 322.449 157.328 cv
323.014 157.117 324.898 156.481 326.487 155.073 cv
326.487 155.073 328.869 152.38 329.175 151.278 cv
329.175 151.278 330.281 148.896 330.261 148.59 cv
330.24 148.283 330.261 132.217 330.261 132.217 cv
f
202.581 102.054 mo
219.384 102.096 li
219.384 102.096 220.973 101.964 222.453 102.679 cv
223.931 103.393 226.049 104.789 226.658 105.28 cv
227.268 105.771 229.809 108.324 230.42 109.853 cv
231.033 111.381 230.801 112.738 230.801 112.738 cv
230.801 127.499 li
212.899 127.499 li
212.899 127.499 210.959 127.375 210.393 127.164 cv
209.83 126.953 207.944 126.316 206.353 124.911 cv
206.353 124.911 203.973 122.216 203.667 121.116 cv
203.667 121.116 202.562 118.732 202.581 118.426 cv
202.603 118.121 202.581 102.054 202.581 102.054 cv
f
263.863 102.054 mo
247.062 102.096 li
247.062 102.096 245.471 101.964 243.991 102.679 cv
242.514 103.393 240.396 104.789 239.786 105.28 cv
239.176 105.771 236.637 108.324 236.023 109.853 cv
235.413 111.381 235.643 112.738 235.643 112.738 cv
235.643 127.499 li
253.547 127.499 li
253.547 127.499 255.486 127.375 256.051 127.164 cv
256.614 126.953 258.499 126.316 260.09 124.911 cv
260.09 124.911 262.471 122.216 262.776 121.116 cv
262.776 121.116 263.882 118.732 263.863 118.426 cv
263.844 118.121 263.863 102.054 263.863 102.054 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Petra Lundin) ()%%Title: (black_BTH_CMYK.eps)%%CreationDate: 2011-02-28 11.49%%Canvassize: 16383%AI9_DataStream%Gb"-6BlYN?OY6JgOF&s!ce(_C-UJ]5Z[+=C.-[`[d9)Q<\#J+q@+D5#6k!W,MA#B]2Z;Q[H4TkO?1^a\Im-8FAEEnf're)&"Jf#u%)&\'^]8'0:IIP)#c.hQN(Y>jODZ9.cc-U>p2f?3=h"3=%++3S,Mbgg+ZRc>eh+Yn60_AjNR>6E'liWLY#>KhK-T<^8?>Zn75InIQ%Z+[b2^:Cne^&.?^kjnYjQdl=r5O1Kp]=?Xfh:u>-heti0:a7^5c]6jg>e^-TgT/Z0[m/_+rIEtk1G8[m]CXY/+)gpm8cIE9Mp&R_%\"?KngQt.:U<e&Y0RUli5Mt>T'?J[<+FoJ:rjSLA^V.7o\`*rEEDms$S!ooZO"UJ)`ue-Ls$r4^>5Hk'LY'#sa0A!/qKDc0g<p4R%W:e&(DZBSus6K+Gm@V-bheRV#oPa"Sa4ne(nd,Ju>#,%\q,_d44%MgmaPSVQY-s\b1SCB(+1M%8T>.r8dM51e'UW7aSmT7h>*T,f%SGqcF^W@Su!)@tAjj!*(o!Xa:nF\^V2j]3H+"0$1Bn+A"iq`)QT5J"Cgtgk*D[H7>nH1)qmEM-$o@kpT(usbRfH-"3e8P2p3J^&S%DT8?&rmg`-c/nd"QMIV]qb9H2oXEs*[c+Ep57#LfCdLp"C55MBG*4OQ';]eJnn1GIIW_porJrlZT>.nG^;%5U6Fc<EM\j6kLU[$(%0E)J:=D6I#QN-'iVf+5t\%fYk\0pLNek(aJI.MB*WC^@om.)._<q@!qs,u>BkI7Y(pGA7T0&PMmgftLBX9E).BBNW?DhV9?^b=S]%YCC]d)i"-_:f##U6dlDF%`:]*%%Al0KEZ7hD)NP4WT@Of9D,4l<EU8oljl:R&b=-"Mq8cs57W@b=pE8JDD,>YEAL"W(B5b03kBg)%r=aFTlhC/.CPAAbo'sc2T"7,\ppi6NX"S.&?_:[:h?&7hIj77#6p,O=EdiL5a^a5[S"FTuYW;RV*Ws!NT;KI)oRVIg$3)(h>ADXF%GLPJce)5#jaOdaSPa53qO'I*o\%YA8^.5??5<H24V[7XG$$dlo60W)MY%^3Tr.Y05lhD=-NfR'.p_[@uO-/Vl$t%?+qAuKZcLCf!%9ZdXZ!jBBa/]q.Z[-p^fI=V?[$[onlaFuf\:ZWOAK`@/>4i76_[p_VGU/1P+Ds.f47nnR_W>Rk9s6)Cj,8GVnRt=@K+1]`Or/WsQ%B1OiT!-5o\?r=.]s.uO`>bDnc"ZC'8O;j01L\r82qM5)JP>G)%/`24jpl/PBT2A^p,%].dr/Wf/:?[c="`gEsJ)irrn@qds\4#g9%mA!,1!C1Q#@l+ko"RF,TGVd!'cNSV[/oXCo;R=bDEnConTQeDDkT*8gYN7;2L]<K0p`'/FS4Hf\O$)W3omq+kN?,j*Zln.@4D_Z>%g]kiR;hPs'>Sp0=mfK%f?.p%+!HOrkohAga/o+a-Qh']QIKX[/RDR38F2<jcE5k,Z^Nm1ZRHaknXa+FpShfaBG8oFPr^5qo6T3@K%Pmtp)%Y2VSM:*7\#-5RUm7P&i15)*Gn6;\td%;0:9E$M-:gs.@^ZDBiT^*jLs-B9cOSAZWI`>7Aa3iT^p#kg@^?"2BF*&\rq7$9$%+.Sil9)^D,Vl0*WJ'1WYIRKc[G5,G..e!'X^Su^f4`7m<PGUE'3uj$>i<8E;rtpNtZ&<6BFaJ;_7D-S_;NA)IIR%5(QFrYBrCrSM%PkqA4PgeNF9VFhrI7VM>l8\$gjIJp$q^CR%FUnfW43MRO-YOH;P+KDgipIA#C+7F[YZM8]D-s-@obLmF7t\\L(f#f!L:B_-LRL:l%S(eQXn/(1g5]:KAPJD%\PKQQ_g/Gn^;'D9l4G"S]482f1ls\$rb,'qm+iD\K$Upo<#+8?;r_^F/Dp"YCq]7MRf3FbaG1%E=YFu)/%HPIL]5JanD)<T+CQi0BhocZ;[gTAX[UjnW(2d4OS/C59cd&KsVCGNWI;V[JR"<6kLg.`e8!%U17H:p[WAIXEthhESrR<!&+\MMY.%Un0\"?#p:nHdYU)]<fnLn^CXPjN1B]I\11VPbliRSY_;teN&G%nQuQb;9"T8c/GbbR2])T#@=Q8gVR*T(=o633ro;S;StIOO)0kq%p[=mqZ36Z+?2cXJB%RUAS&WT3:/t&tf)1nQqCE^Z)D_#',gOCHo7?P!>!#V5Ucqo\4ajCg8jK+`#RoUGPNRO<bQ@@fi&gF_qWId>%.GV:O)%3MtV%MXCU\*XV=;>.9e@*,'N$2!G/L?JM2+pH]),I%Sd0;D;GL?a:@9t^1]lB$&LSi2\Eqs,9AUWLV\FSM/U>Lpu53%RY%CFd.HgP/X@$_p*Z7b2F@>I>[SN_s!B&`/k^#hHMn6\F6+hP'7PoFa^\l'fh3P,gT<H>P!%Qu>a:WQ,%n:3B"cmrg1#/aro$Mf@VM%>j9TR%Ag/h8BHFg(hI^2I1jW_H[Aq^17O!@*\gC7]PZYRXZ]kO&Ci?Lfa@UM;P@sV@V*.uV+i!;hWLZPoUk;`.9fDc.4]PG"?6uV%2X>'9_`-aGm9-#`c!EHLO?!_kSa5+.'nOf!=7!FS9"3&CY!XB][hQ."34ku1]4(r"-CW-=N8G7hD82m6p1[dI0Va_$q*W`UeDC8Z%_@lAaSul[f)-!+ZGYSu8:j';-5M;GedaKUMeB`/P/:/15:<g2Sa](ia$kULdoTt[\O*N;MbT69O,^*f"H0t'reVVAWqG@$Xq24u\%OPWM\Z(K9"O;-r![\?]KS^1dj'u#7BQ0;X:WPs%8QYap;RC-+W-BCkG`FK3h/TIrPL;b!6f^Z,9P#d0CO#=6\(Xb!`Bp<UYaF);%%@^-?U%8b&TP?K)'.AN_VZ`&;ACEp-<MbDC#O_s0R7h0GAV<BY11M_Yh3V0mOq?Z/gnQje\#3WWP?!PMQ5X$9Vaj/[mH%GiHaYi:o%\L'#31TjgW+i%=1]<h^37%)5hZfN#+`9Xp.r8?WS^6+J+\:i#g&m"(,kumA)Di*L6bk&(<SlTjT^'VnHe\\0-<Z_^Ac[CGmcXiO=%L,3)mRaMG46O#`De&g4+D'l#,Eer!+b+7$pc<HG/]grCh7=Ft2:nn_05P<Z>Xo.S?k'*+b/3-O-^?6D>S_Ved)hhKuDTZ'jq3gRa%Bgm-SkqBB#cQq@VQEP_](7<QA_sG(%dTIs/)O@e%/E%AjU)okZWqI:B@FZ3"daQqp8tOlTTpa)hP0Zd>ToAZ/'(0_/NutF[EslLS%\4d^^WLaa+SX$VSGWh<?eU/XE7i=oI9JSaf*i,sHP,2uW&Q-[OitTt@[G%G=X*AtcqQ_GXkH15$.7`Sc148Lm8Gu3WZJlb%N&7#U%Un[,rj5,Bc\0plo1JKXU6k>W'5:5-moV-PFZ@,;cN07"aWKV"Lkb%\r2I;T6Y!)>8J!`94[..XB+oT;VK9\-Z8$tgWqJ8krF\NpP%iWGZ6cFg]GZi,^,-rn)fA\XQM6HYSl?<Tb?Rc5I^=jUC3bP$"ClUFUGgruZo*uNWJ9B\usM+-dW?n;,V12l%<K%!/7>26sZ?A#=q%];-N*Pj*,5Xm^<f1e0T#19]=o=f*M`/_Y.bULYoN?J\?0V/NA=Cq+B\W1NmbWlM!b)j=ME;gD&>`7j3'VSAI[:q!n!\Raq394)Yp%`AN-ScJ*D'B0Pfi$B'Zo*u-(LX&M3HoY[pNCM1iiE*pJn6sds!e&Q<K*oAI\Ijl%t'$JVOPgi!*Yrjf?c+g3"2G5SRZ_M_;rET(P%k-:0IX-&'(m7SsR9rB[&:.n-2.d$W7L-+6&>AMggb.)nb(*]1/4T[KABMj_.O\@[-,f683G5[N1P&"<KF58>5b'2%h\OEIf(tMC[%q9i.#RL@?9nV$F0_BcEu1%P#TlTu*eq)Gk9/<V\/kB#=nOOZOTSS(.;qI71K`3:QMio;W451J!A@PF6D7];S'E[4:H/Tb&\l962I%c^i*cYlV:(0p5UMf*;6&9=0GSjYudaUf?o5ps%MgD_*+i;Nu4*e[+rroglhl4623`8_?%Q=KEdk(=TIFS?#sf.@K>i/2gS<(b96?%XqXW:7_TY*T!`:F`)mtlLM$>c;^G*QMjmA:3:,[&bU#Z;ONh3>8r2T]2om)'BhR-RrK]FV7C#NZ/\(Flh)BS&/T`n.*\2<N78.<q%G-N=UT&a2i_DJST\%#,;biBGXZKEuT3=l%*T#iOt[[.`6N+&neGn,K"fLDP./CKJPDE#b$'eLYG9]e=kMpk]NKDX$+KY\kKO2l=0%;jGWH`QGb[@f>o,1P[Va>R8$pCtV8T@7OS`@<rHBkYbP^QDnF[rCh9IDa?D$>+0A8l+'7?7..\;$*^YG,_6p(L\#3ADc2aJRhiA9%ahr(/7/P3oj&S"F\%n1"nOOt1kfb[*h&WAk2b3&ZGF]\^^O:ETQ=l6'/=fGs&kS-:[9uu67ChT[BR;oq$N@8Y(\6fACSFMa[HO:8%;T;f".PM_Zn-hJ9&,geh#=fY5A@XEu"?1,4dKU<jV"IQF`QBbYhO<94i7bMKA8j,d['[6m@U/fS(!Xdhpd@$`@rf>"jq9*QBB,/`%haS!r8rY.J(@COd"o"N7;iApnK?)3u>FTn011Fj:$b*dL(M?Pqm?VmUH4GdNn!q_ue:l_![RK34aWb'U]8l88HVp#6U!!enV`E>b%D,/?BhD`HY7eO1;Sp*f.fSVNG%9j;7&;Mo!E%QM[(O#A4p*DnCSE]Q@[`!ss7*F#=cd&?$IL\nX\1=o,BC"E5mut^Qr<Th+j_h(k%Nr6&CBi`A!n28NT/G7ju>\r8,mb<kbjhf1V/U+-T"!5pTKjHm`\\ke_ifJM"]QiL<BNjb\k7_p4Lf[lj`TVEp`%F53XCWmBOokL4%Q>O0Y\JIn&2end&o^PlZ53COoH2N%-\Y%Vr]2klSs2j!:P1,cKhQU,BaM"-Y4H%N)YGW74\&'m1CGSV'Fgc552gC-F)%M5*`7j6t%o.\G$Rrmj4itBVsqBD0LnG"tkBfkZ+8P=HtU6p3I*_X]?j)U@mDItdsFX1%[M`=B.p/-<o9kU$[pfb,4jE$`mJ"1+$)L,H*KpT<V%T!;q%.jMa7?#.b7]oOhVZnkD<4@V%iHa8Q5K#<:L_YBGI(>_7#.r^ekZ^8#fqf^211hGoqTi"tA4DM-c'ZN:OCJRrcY)NAPO/5:*%2ju)D2+=5i(6GZuPFOP*75>U(TO3mt6LdF6qmWs.X<L9V[0Xf&*dIp7[qmGNk&<?(R_:j:]iYNHrf?#QD11I'-u0$"hHRfp\me%Y%bCZd([jK_XHR>koSF=+WR7HJ7CEr(mKd=+=qmDg5jY`V:\*-RmBpC61'^HK>@d=q?NCY&FIO?SMUM'1IK7B5qXSi>nfa?1aVrb=P%;o=0h;Fktr=Un(Vphp,GI;'Y:3J*eZ4CasQN7g?dRm]!SZ#bTer&:7qr-"oX0+*.k1T8!IbVRoC&SekBf%bJ-o>bkh-dP^;)B4I<%1g;G9iM%-$(6L$0o%i;QT783V%X%bt*Ogf=?`j,D9IX0l+tLW.RaY0;`J&N2I*+70F&14S_Z6<i3CR-mh;mA(+t:[g,KD1omn"OB%$,&s1.7\u2S32cThR,)qoq68"&m)@rKA![u/a[Q7pGnkL3cmFbMYK2udMfdKRlE%EHrTbJFJjk>l=-e.CL4R<63cXk_fA7BYuZo?%F?K:r,u.S/D+T*GEg4tMJF]u+\$NV0L/P/2WMQ+pjaD(<bl+&)%s;5LQJXFAkF';QXk`8g+_Pk4)"a1c.GN0YZ:a8Pe%-a$ZN+iP%E,32qN1\&1As)9(L,+'h29e!5-mgMfl4/X`"6E_-k-0dP)oXS/G`Tfn"C0et_hD(NZGVNYaSEQXk%r;RcZ%(+S71?O%J*-!U_C_-%ANeQ@90:nE.(`D59oq\Bc]CVkNc0pb@B\=WXh[fueQ[GAWCS`ShFe]U1b30L/C'd?eQpMNFpQ5&`JDe\;Lp^qb]s=+r`BcQc2LLr%ef7!`>H2XDSeoVVd'qlC'cqgI9kF0c-1WhJS8*&Vj%J.l<hg$Vh2ZCGJVt9>fgYQf-LX6Y*OjhcSu&;\6?g,`Eb<Ypa>qh8\_*Mm%+JY@4TVIA1r1E_tg_H2!C"IO+GcZ+C`]%cj$5N+&`SPbU0:Ck3UYM1-gE<tm6@ku9`,eeAlLO8/]Y68Fl$B27Vl,<JQpA)LJR*5+%0@p&TJc\%-]GM)i3-RI'q-P%a&kV=_7$>WY7tb\"Oi_R-V\P$4ee]AcC]?Ti+8-YK59HD%^VoY4o%3EV'ooB,Z\+B(\\5PdGqIq%%hu)U3pAXFu3TQ%S5PrD/jhA7E_+W<3priHc-^Sc9dnak"hS/g=orFSI_o%g"T5Q[']#@6CY;a5or--m3pHR;Xq"++#0DX*MqHH0J%IsZ1M4ZL3$o7I:K3kIMhh/;9u($8TprHRRjmAl`2X'D/nml#+JrM,;:bqH9g0$aRIl1J-4bF:HFc2%%Uc2W->qr[FK5Iink5/5om%]%+GR\[^IEH2m0e@u.Ut5LO0-la)MQW5L])Di]e%n%[Kp?#HiQhPGPu4kAFjgY:=ZEI7Z\r)Tk_>`Vt^qur,-]%n@^^:jDQo;e@M%b>e*)2n'SVYAor\S*fn)(*>@lB1CbH^]%$=_"B@a"ZOV*55t</`9TM-KN9]C6&2rDIpGcFmbQFnr.aLNB#_BoG^[=%X)@"nr0#4[%T"k*\il,XoqYes`h3XU!G:E2;D"[JOk;S_DG?:3%>fnGW\+^[l0"90A-DFa.<#a3SlJhXdE@=JN>i#ASp"fGe%>4l9GlP`#kBif#%lTQQ8k[iXA+$C_\6eiYe]C.tp4b%`Co(L*`]CF5)>lSafB.4U7RsIH@?<4hCri+me\.7a`ioc]#'7N^@3Q#o?dhDM5oJHKQoQ:$'%oF1Z%[8N\N3AlYc@sUoF3MkmIcV[D4i$Zt%nC,h7n^GrCn2&KK<=B`0P+Q61:A?iGk7#[V9i'[pdaR^7daRa8dkgJLdPFne,JZA&%](kp"'7N^@3Q#o9dhDM5oJHKQoQ:$'oZ.s)Oe/O]KV=G.)!]OZT]eDRF'@$+pkeW"r3Z*<r:KUir/C8A'lX\*ST5eQeg]4iB1STP%3NMBNr'YiLITh%YIX6;EILs#].Np'V0*joe"YeFp>5MZ_'lXL]*U.;'[dNADl_,BaR>:r1ZsuE1H?'cL,L5Q]9k`eU66?DX`\9->%*"aJ&FVT&n%/&$;a%m@Q1.-A6#4dX!H4Gf2+P@&E"hgk(cqq0JC"fGZVf.<%Uh:m;,9Eh?Xs]1?ZaN?@D/:.T"fuM:G+`Ja-ZCCe%dkSp4(d:;W\q$VZoX%oUp%/[KfM11$&Ha+0PFN1%J@E*#!3gD<(A[g@a/Q:Q57sB;1QRCd+P5:CUW6o42/%3tL)suc<Ppdi4;s69%hnUG66inJcN"J2jgTa+oj"QMR7*d#23V`/u-kB5+;ZLF,AnhXfY+#3$5X$6c1.$,"lDTYU2"is;D>5.;Yd4AN6`o?f-=^lATk/k6%LD-uqZ,A)2a"b7L''G4l83NZE,pnPgE](,H.C%nf1$9\\1D8mE`5aIW-5)Bk`*0(Ws2Qr7%V]a<'qqA"Ojh`<MSpDjESr:*P@JA&%O@J8$K<lpdZnu_H%HEm"3@0KA$+<3QE?o4EK"Ij37-[BM&Mp%WmuFB>LE,n,W;dmsTcoAJ6ZQN?7jitl,Jr2'p_sL&*?hg6jG&NH%9LAL\+o[9g0TBR2'^:H4/^YsZ[E,\k!AHp\,Jr_6F<-1U*KdoVU5+:N?XeX$@Yc7<NJU1e&@6Js2@Zoekj+-$l'1u.QoOGo-ohph%ou);2emT.XOu#AiGs[I97-'hnFU)C8NgR@#[LR.K,PmYWrKrCa80_NDBJB(s`%;FZ8->]c+`g7CkElJ$+gDI2KUrBM9-Yk5OK1r4%SC0AZVX\n%,BG,Zm:iZ11hn7phRXmK6DU>aI7+1-:dW(5VpRh*e"F\%I/d*p<S2]gg!MD9MP,_,lZoT1VP?B@)P<X'++1N_o?giD%+7sl,D#0<PXa[$#7jgkGRSMV2k2'E^raBknEI#:W`61ee]4E2:Ss5g=3g"J-j[@+FKKF8'9k9_a2N_c!e:J?I6cJUiU`%?2Q"2)Z%7#Hg0'*0H>98&Xf/eM>4[Rb(38S3gt&pYe?MFEd;.M5T'UdRV-J.hAt_ML^F#pp6W,*YJ@M*M\n,f5@+OU<9E6R%.N!f?h8X'#:U%n.F%mJk*b>#TXL;,&]m'Lob#V_^[aRU5"OH.d1JFb/^T@cWC?@<kKG'gl]#2&Souseu=4CC!.D/\oV>GH-D0:XC;VV=YFs"%nBZP%8$)V`<U&lpnWLscj5![H3`dhbhG%b6:iff%C0*33mi_CgjGDkPRTBkKZm>N$_Oi*mj!\7hl$!_h2u.(pOQ_0nm::cR9X'uq:15YQ%.u^]C"]cqH9LPG-64oJ,8k%6e-l,Z3U0L+"Lk63R'.VQgU1ZmCLoqn<6\lP$,76q?N[PoF4/-sfon`/^ohuH270AAV&hPAT82QIm%,1/lWO$k4t:*SqO`YR_D)a-\+S+%(Igq\XVoTNr:ekrHD6r/Z:&mZg;9(\B^/CmshW\%(QU:OHPd518'Jc68k`]?f$R-69PA>778%S+RLH1fJ+_e3pEq@M@9=b"^BT-ob(D3*u;P[@HHkUP`'B-p(:MU@:S4/X.<:$EnG=GWun"X\JY-B*M7C+e>.;VCu#b]t<:9iC!,O%Wc+2nQ!\CncRZe/"jWCk\f,[JYZ_=SUV0[dW\UYJD7G?VHpeuU4,)^ilHnm+q)L$u'DEKYkK#fAm[<F@fVm*Ai1AdgSU9)_2"$4k%<;\8BVp8'=ErJ(=cZ+8km&AXE[qBa-kaiq\I=;qVaI@Bn'.,Y](8"tel893%=2Wb=fq%(Ba3P8T?cbGB5L]^t_^2oZ;Od';+o,Y>%cE2l[Jn-l<-I-o&!bN'#b@._C(Mnp?A^Rj%ap$0<N0ZhF-Y[+_\WC"^!c&EPbMb=q?H'pO7G/pjd(<t\`7mb@$<YY,#Mp^uE1@#L%Q,_`[*)<WI*0$/,>]`h'M9G#5S4)Ns6<C!+SNN*"f)$[.Z--"VP:XC@rc7psSk=W['#r+g4:1/X/u0j\]c>[gclRu:oO5+.0$JNM%c(CNeE1^g%I3Kt!@jT;p8Yr\TGE8&cGY&c*W?-k^ll@fP!>DbHX*9Mjm#7B8d%ji5:#8$NOs28-4fc7?-[Wm/lEa)m-[S9Xri&f.%$>'IN$\oo$$\E$-oF?o_(h]?heckLm:4rBO63F*:dUD8q<6f?J3t=Ro+cSmsNco^Y67&@)`Q$%LO0W':K9/e5-_su<*e]26`U8A?%EOQ#n,Sd$\=YjKSZqB+P"K9qC#beWPHA<Gj3>!ULOBi.L<\m6477"B8U,192ETU!$Cl!Ak9C8k()-\k?d&JX2=IqpH.<mgMc_d\k%.mG5^7!tt%'CdEd:.1][64o,-$_iB0;.P627h?il<WJGSl).uFFi:$>ON#bGi`tVR7,!Rc(JQ#u6*u;Y%2i3@;beiD0IJF/N`j@B%Z(*md=Z<Uu)d2;4/GFIVI@\Nq<n1Pf3>a`!bk)Rn.6&)B#f'@0TnWWG[%:Gf!kj<l3`YFgTp9A?f)L1KjiK.Q]<M`tlqMfcGO\Yi%9f;B@@G'bBp<0oEo3GD<5?7Y&rtH1\foq;+Tm4]nZSFb6_^@4`o.4UI-accCSgp"V:IDm;o;)PE`%:m=@c2pYr>G32:iXj$Gg5AG%oB`HG5Ll]jMbWA;e3&e\B2Xdm8tW>Z3R_A0huI1aZ-Mf;Jlpr7j@GkDbqlCY\!gr2oDC(2Q\kr?RUfta,D%7_e?`_%VUl+!aEESt%\C5i+RrROt[tl.7Gisq84S>-j?ZYu]Jk8@/cf*\W<_?=8UL^m\V#%^HohqkmHcbqN,eFlZeU's_*Po&H]92J1g*9S[G9l!=\1d"T%hHR^PGd!WbJ%s+oh/hK(qb;P.T)5\IDt88LgirF?PMa"8^8q!tr8'U2?+o.Vp[5T\._0KtoU")Kr:=!c0&N_H^MY"QnYZE(=bUHf%/o)KITq%aC3ks0Qjf=-=qZ`2IhLFlR+1be)+R:;)IB!hCOM<`F>;*6C&(eW61tR`Cd%%h^.X#HMQN6m.Df;e-:rtAjV9]fKm+mSL%hq:GXm,p;g<@Ii1qu$$KFGBXs)Psd-+W2ol`>th+^nd0O19ih&jC5;)Jki3],uS-uK#gt*T"7fE>o[nXRk7+.&PJ%T>!R;[Yem?F%P7h2`VlO9n+q8D=k3VM.2X3W7X)4"h*-DWdMX,':gVZY$acf1@j;IUS2+l9\KP.@UMFM(k(:ORk'L&R63_0;SqH1Q,-j;I<Fb4_`%n:jW$%N=Jk#udEPXc.@U^Z0/!Vj1dg/'2f_oUi/%o):Y;4ianlB^qmTQ?%fBB3[R:m-//D%\tS6W'$s"Z'CrkGih6?n#GkHcPFjk%loCIsa7H4/O(Q_sm$SX83-tl0<,#V7Vjfj:ltI6]69DCIiha[hCi^-m_E.5,],QnDZ[VT8L?'u<pAh6_3&c9h#DO8:>-BG,j;E(h%[6-p]UInTg+7$e%'9+3+MF3f+#o6ADM;Oa9>EJW34FNIr%2*K=B1bGp#s92AnA,/;(5+Y)m?@kp.ZI"f?,S=U.(W.qdt:!p<K+N-%HV4.`o]^@lCVESB%-(=<IqpUQiYb$`K?'e,gD&K-FN#9(\uS`-6c'l7**V!I+0d)-rm0qi1Q@%:l;u.B.h.BW@m?Lg8Eb=+o);o!%H$<$_-`Kp7K.I7"$(tcmXgYMYT*BZ(7XC(;G"!*bFHOMZ1naG:cGMVL&Ei#A#AuP4o3a^Rq_D'60o\pKQ'D_9[V7]20'MLh?ljaX%W3c7D0l`IJRZ4VhKd*Et378SgT$$DgDXp>L8[,i<:.fad#:Lsk_m(?G0i)q_\klt?Q9c!^dSm!0A^BtD(:TfY>)9[ECC5*W/Lp[/%!'_@:C&mQfpp&%9VKG2Ah4m`(bHorSG4'E_rpp6Ko?iH]]]M3FR&O\HF"I7Oh(J;=iA*K=\OmpLpQrK,B6hHr??;@3R:B'>!8cE_%D>Vb;G6WCO1XF\.j#-"EVe]P^XQ27J\=W)g8O9096;0"/,>2PuA%gqhLb<5u=&\P00e;/XYOu)p=Unc\S,d<%'e%gNSh$o($C^:R%.Dof;2PS1"GDSpT]=:!'iTBj[hn8mGk4Mr[Ln:M@Kh[S-4ium%2u1\'Gd`:pJOP6+/$NANQrapc>/JE6--V8Ro5_^\TQ%?8YZObi%f+]9--RX@O@GXYIp(Q%q=0_-DNc'>dUMGL(T5isN)u"6nZ#)SbXiK\JCVS=::Ua#fTrE-dc"Z%#S@0crDM,63;U-5HD6n9K[Ofm+%\WuW9gV5:8>!26heE:E:M/!nuB;_#GUjJWfH9CKlHVE)Z*l6D(:"\hS_:AEWf^0`reb`(nm2j*oqb>`1*l6D(:"VH6bATaM0_q6l%`tc%TZ%'/B%[Q.K(`1.Iql0Ka=W&s;OY\(FYoHD:YoBKE4Pf#](Q[I%1/tSg[iBk?@CR;;DHKrYesPK,dnDrY@"o9jR0Qo]TpB8o%jcS@kZ)Q4RShIl]#$mO'QY#*O_ap08?C&3hQJn0A!%*D-Wl7g;3=<+J]sJQ2R>#*"GITnu`[p+(bKZU$OGj<RW``;5TC&0u1paL.%XtBBucZ]2eI:f7?VdbQ59NQ-!,>XFs\p%h96i-*"G;2C5WS<,5bF'llNJK.5*?VRQ9'5?T97g4]"[B@@\D"JEplU9H]@I-eDIN#r%/e),i),/bkg3[i/lLNl?3]O5PY24MVE*=GjXq7bm@>XL!7Dd"^@46Qt--p[+nYpCVQ5pgJ]PP$`/k<%p(Y5]AX#nN1QW.k#G[=A$%3jCHA/?(GqU'p8aHFc`1bd_^S>u6)N/uBS)0jQie7#s1(oW4bM:,VQ>.%b<rC^1<D4\nq9&aJ0A-=c.t%Q`0.K?c;gCki2%.\V1E%I5KV8FEJ-i22ob1jN9&'b?NE8FT.><#<Gj84_Srj:Aa95`]U8d_>>dEePaKOqF$<&VhJbZ:?p`)PIf5]rQ?icqj%W=^@rpfoB1%/%8_O7]VYSVKh>,M^jPRp=UhqpEAN?^VTY#CYFgp>*3tCA6'%qIW3tHW2@E"\Gd7oEo2^/G8EhB0;M5PZYabao\4jr@aCkL_(b0M2"%_8*,=A\Xu+&T)[A+mR(d+Ia0i"65ee@Q`1Sfl>`ia@hU*F\h$SB^N^1],Q+QiRmD=8Y`2Y6p2\>aGrbR.>@LZ<k@to7(43ZknZg8%-9XV*eD64=cM4XP-dsi^nA&'fKM&[DlM2oBHH++,"p;i7[;FNN\oDc=c'+pJ9_Q&S&jMbp[,$@q4\K_mJYsu'rB6``*2%PV4i.=4%4c9k<[1ZJa35Y13ZP%\2pfYT`(/OU2i8W^.oqs9,PJ;NR)6ijm+3Z!:DMu&iVY$B?n*'2\Y^7O7rQ%%^GOq"_h7gW&r(hfi]d;8i%s.,Jh5M<_GG-BW5_9\NY_;Md]F5CQue_WBk]"\%7Akm(%<8ZBC/%'Dtmr$aB=?4p@2fm-l<n6JUX#VQooCJN`)rI&<^Ka.<pJVg1%o>S9/nPmK=eSk<rRo_+uMVn)0XAaT;Gm]`tWJf;Z=.[(b^CTf.d8db8)\Hs:s-'g7Oqu0LFL.+Acg4p8[W]sZ\GMZ>d?`6%e8^jM%1\SdC\CL%^Oe#-_lZ/t1q+8601-'YNDXg;2<d,P9^&7Fr52XW@3A8;!=jRV*^I=T`&cM#1i+hpdhi7Dskl*r(e[sIUX/=nEkFIRb%G6u"PRWWRbnFF5rIh!:@[!9U]WR<o7J,7.5/Y7.Un@Wh-:+a[gcuCr]m@V@P4UFL#%$LE=^E%\"p3_mdHNG:8k5,<`SndFh_Y%QU%_/SpDCHE&N4Ss@-h8@-@hncVIUY:3"4R,>;1]G\]#5L56>A%>Z%/^]J[^*\L'ne']#hWt/ELHus;XE;d)f.C]+&[oEEC+psZ$[#>%[q[Vlo*0CY;4^N20@(P!WVfVG)I)YfU>D7pOd7/Z6")+Zr!Z+Z?-pk4bU3e\6cg9[@:U<%02B`'L)LtqmV=e%V[2E@"Prm)`VJPL%]'CJC*Q8&AhXX4G8%E-R64/1fR,9VVc1[%VI:E2+.Gh[AShG6IQbFb'(t/[C4'!h<C68*3BuI[#/)>'(:6M%fh49h+=-#O!7P7HD%@klbD;9i2'cGPL=L[R7Uj-kV5/;8MDC3QaqEO!eq?;IsZ=uHod[sW1Qgn1knmGF=!KCsAW06Z[)1[<T+kOV#tdnBt\)K,NF]9mul%n,N%#9=!l$ajeL`(Q7.A4L$80N8lfl;4FJ^9c:>fmh&Z)*5(d[;p%q?CdB#18%b5<Hp=7sq,cagpK5_!288Lthm<)'igrQ.(NJo_%ctiRWDQN](Mu1a`n6SY0A^!ajFT#mB,XWG0%8VQ)-f3^b3q\=ESlh\VJP/LAe5']4P?Cs,RIe?(:TX%=:R8t`3dJ"^SljsnZ?T7p%:R8s5.m-rM:[7#_Z?Ti4-d1L@Sc!W0P:'CU@YH2Qi^o\'=Vaf7n75ZaWKS^Qie\ELEgF[_hg#aX1A.<C]6>e>i^#X8]1^Oq]BO4A%'oG3)d9h")r4Z>g[KfaYir"/4$>Ae)GB#R74,Po5_u6A!lX8_i6iGbBYalj'?aiddY(!m14,W]ld')=qLAhe]m4:4Z6GHs"&Aoab%gJMd7KRVr615q:@DeHlmoQu+llQ$),hE>,Obg'3mPjm?ZDQZ47]stek\:4D(7rC&Js%r[R%DF[ijcf<5qsEeDO#J/PI"(nXiqdlR%E"EO4Y&A<oas)\9Br6MBOGo:Y4i.!GD0)d;s8"UfrbqZ)GEhn"9tU4Go@s;D2_R2i?U*']N`Z-_CY:hF[opsE>2Zl_^TY2J?g=N/%J2:nSm!JXcQ&(nH%g!@AasDc(TF^_:<Q+m0n(1Hn`Tfor)l_D+>U6_P<UOqq9T#ttd:[fkP"/'MShu^?V*!mq@7k7[>agG%##X1b%bG5D0fC[chC1/^=[/alh?(D=D&2u%R4N]4!(GF*Ibecr3=o,lMZh1;4q_JU4Nqe#Pfkuah="Xr0d7qJ&N9d^6A0mkMe5d3OdZnje%'d7O'<4S0f-(h<hp2,W\p&4hua@dGm-k'-a4M3<rV(P9aYU!kLjS@QFlqc5q$.dShj*!0>6V(q;>T-Zs@mgO$0i<6!8c)s.XX*_B%r?u<9$?sV=91dHWP.^=0S\6_Va0PNKZs;iWEQ#ilebM)9J.pAg16@9D0_X>"%0ofNhOF@6GcaDB/o*)fFq*O/+R1"i:M_@a'H4F.%P,.I#S<SE0W65`TDdG4^gmWD$,3h,#e5m#p3K:tWV*.KI)GQ,BXY97=RGiZYY>A2T,QbpIjJ9&ZE)nZt?T8>PJ/&f>>!!LF-!r4'%S<lsKi-f0_k]noD'()k")bH9kSVh%1B`6)I.V(eCDAid([RG=!]>l!_5pf(t9EVur@o5GO:@2i=i^5-KFP42,h3>W,]%n2$V#HHA%;dpr*K6C'TRo_PhMWMNTa2V;JRa&<(YAK"ThoH/Iek0^9hoMn)N*jbM[6X(NO\jQl1%)(kcoWe6HGSV>j(pqq_O@'innM7rQ-lut%g=N.;$FO1lnU%[=oU>,L&IU,+@tfGi,MH&0Q$lc0q-5DoACnG,V6fd:bOb%dgWeiP^\NaD;u+_mWJ^u`iF/5d`pdi)9W<]=/?8@l%]CceTI>pfUPr2h6Wo9(@A^Hrd"(U@J+3]<jCuR`D2C9!4M+lKQ8-rg\`"=Y>dqsP4Z%4WaDF=?P;B`=\aPWBq=u&+,)FK4Kb_+9'%Rq$Ck$2AM5cVrTVo0e4gr9/[GA$bD1lCj?!JcG'I!Z=9u6^?(rTQ[9^(0cTaK9"THF40qV_sni^bY:SSF@T=816A")TH+-JF9F%*%,m1#7!na!bN>"Yd"0jup9aaM4Y-kon7Pm]!3X/R6;8)28VBO,6U0s@qg@:i20#0P];f`;9F6]0%_n`"R*MqVYW!T!0nmbn3Rf_HD%&Fi5=+De5nLfSZSZ&:UDb3jf!5FIcWpU+_ffppb!1LYmZZl5RUJ>BXqIueSW"-.&*0GAm;TnposH>@!qS$U"7V-am/99MQ']-ii*%nf[(g?YF\!3-U<(cHrdsdZ')+A5!4S66eB8Q0AS=eBnRC,SY3(@\^_GHQ(*"<l6aATULD?VJ"X#j'0','%;*$p5.=G66QB[&l<R1%L_K;c:"HIh;,`RG3&1sK"1gIR%F*b]83!?0RW5^i5p2RlF#,S=W/KOIlR?`W(R_5=#63>!aP:oCE<Cf(9[hqa)^[&.P\A#n[7#*l%rgT5<f8c;b\/JKpQ&'CSgQ$Q7WBp3@2PWGdlDWPO[UdY,JBi=I)%c*62%;?M56u%$nUXdMQt<09j,"[$_,?6cA!7:nMpSn4^FC4^%"=Al_^hUKZ0$kQJNt;BB]eHaZ%hjGIbJF/]O.hko"G+qLdKBRT(R.g,$Ydu['/2?W/LCLULp$]PNY/%<Hk6NGeG);I,Os"%!kL7@%5&jB^CJBVZiB%Hu+@&NFJEf8t"PCLLD2<=\if"2Nkt+1hW+e62d^PB^3/BHH,U3Vo:+E"+d;UH1off:dK)uugE!0s"ONKs>k2V2h%QAj%&_UpHh,(Mg$TT7r&+BRJ@7NRmAE2_B>a'_9%(knID-+8].U#g#9;OKB6#bqF[!o8K:VAEf7l>Fd?+/#??-"'/,CRnT4')7UB%O`1J1'%p5S-*VWS.O%,UJ4bD+IB+4q!XIbDE];ff,Onn2.k".:%uARdn/0dL"u64*OmioqN0Q*$E+$631LW#.43ee)[A`ON>j+8-%b(6BG:lT@U.KC\[+8&ZWhfB,m3gdG>[g6\<bY?q"&TigamNH=\:-l&a!m8s4#n0B70gtkIN!9Tu+5crrBGeNr5lS^a,k57*"kEO=%;qf<X`K:7??">,7a:O1#PekB&61EFAC8T,tj*K]$e"cs^T4OPV)q6CL:^hCar#!@?'p?"rRA+QA2D?&B?[^,4+;KC$!h[2jctQ&`%6.^30]b.%cPr?"N_7QYi&(r3H(CC0g#uE(5'ao[oK-=ZLLMV426h[e%Mc.JM2KVq8PP1b86^MqiV.mFrY]i&=.[lT?f-R7VoGi>F%85;Ec\#^qrU.YmGJYNlu'!tJ-2mR%KF[O\E(=KAj@XuT2@_A_^6?s2<D.La`^DaC^g4iTJ]g;:uUg"&J9nNu=2R,CS)>X?jNjA>^%C-$$.<3=_H$O2`R+9XtcMfI*3DI?r?[(URD$HJH09HRt2&=9+ri4#]EIeL/TKbi)_EmK96M-62%aPYWl0X2Kc@k.YTUCe^6,2?&X%&SN;t6?3,rR8PMO>2hX5JWQ0_RR[9?'(K1^n55%G&.an;42A1q+k6ssHdl71o$T#E1kdV`1W[q6i)Pqc*Ma8dTM]8<Eqdf-(hZ*!%cR_/>$E%K58CbGJ0!\J<!*q1W$Q(/)U!O/U*kFa*P(qIE,UWl"jp;>%/PF!"C.?D&"Wia7ZNK_YFPk"Xf*GYLN=Ul0K%Lpq7q/t6%3AB!sn2W"JZYlbYQ?@[MPu-=\@$k+ECM4UH;,%M:Gmt^'A;S<<=NedbRuJNi-54m$+M>O4EDAeMb"B>KYSf=Zg]GiVjL+gf*LTUN%CNU%HZ>$\@l53>)Pb`U0`-?+gZYr)SD,mmAF$M1iY^$J;&:rYiG"CgTs'R,FhO0!]20T1`H3haQab5D,d(qUJjs'lkd$i&??p-C(%8Y?c*=*t-m$;<$X!Yt*&1T:eWmqpmLT?tEK(sGe>T_"oP'0<.8R*8@i8>X74IR5t[0fq=F&n:(K9qXH-G]=D.OU^gH-?Kn/$?[$Y%>)&b2$M82XEY=B6I36@7N^?NRr*Xt?&!Ss.:[#d#;a1;NRp^[HhT!E0kWt-C*!L)'k^to'*Oo_RSc[i'`Y)&J:r+:e:P#MMN6YAc%@7irZ'^0CM#P/XUR"i<K'REkIXa(7Q)jj;^"_qb=;XPZhE(iiV#!n.#e5p&--SGV:!g@4OB7\p:^+j9:@9]9+oXg^E?0GZ3:$+(t%>Nagr%L-i*GC^Tcc!kZ/LtTQmc<h\0"';G95]?U7mK,SO&"r>W#BeC_^VDn)h3=XAjtR8UpVD1b_gj)`@2RqhO5=@`3YlSt1%[k^%op:MtqiUQ%o,&kZ_cJsTJP6XJi5t(.i_O.n_df?m5U&Hu#'u-^Ub2b_FD^2G#-+UJ2(L9]J^?[rZDI"4&=3D(`'`N>oPbS?\d\PQ%@kbM'IEtrI\.&"]Z+quDb:2n5!iQCu)1&ga6%+J/7b$LH#%_fE)1(pO>Qu*6hI3'14V5OQ"4[Z'-e:FeRclkg54YokO+DO:!X7pF%&/1'R?c6MPXq[4R\.1bsX\L.!cd3i^3LS>]ljeeWSV@X(CVA1^btd8D^hKIU@&U'RTS(ZQ%6t95A8rLf5PRa=#'=5kS_$+5*U+mC%)XnN:GmsmI+-N`9YFuKN3pJR&fgBO]6P!bYHEVlt>4Lt<2:*</@eCXqhP'2If)Q<E)tP!3Xc:`@#3(/VnkK9N_p&spJJ\TU:p6RJ%7#p,>TTi=O-[6*=^lZ%j2%X^#.MTj;(nfrbGn$^Rl.'S5a/!1p:XGeEDm5GZ9f^^9?3:u%jN/P>%9*ZI;#Q,7$pj&8$k4/.l8K.0%`*e#r]p[u_I`%g5.e+G^8t8AW0'QSYl9[Ug!MX]jcXEVU8d#`PI#J:[dFE<2KX!JV@;Nma'W"NB;kMQ!*/Ce-F'frC&]S3sNl-[o%FmtCnIE*fDFW<kAf4^2^#gq"Fa+7,2j4/,dM>FJ5a'g7LDkTQR6q7[,d2WC;X/AE-#?7hA&To)?Oe@.*J;1,@IKRDKWlM&e"+?2P%nf1Jfll#I9W8]l1hK'N2BJRnbEl05#cN1QB#4FP`p;/MOlS-2u*Q3(CM@Ek[?&):Y;KX#L#$iLWK@8ZQ%[7T^I-NdI[nPpHi6Ae7%"*7[P:ZabJi.Jk9#NFfNBs,_`;F!Zj*eotlS2q2!`C#@_X><*spZ;Ga:`56Q&)d$2GisXlF2,Y=TXnp%m8g[;mZ][A".3LpmfD^S%%d#qH#SAD,K(gr%kp1TdK/bUN4Ub*%M#2_M.#oG*#@JfPk!'8nLf5]BrW=8NNVO+#:C*Ff&t"(!HXc,]s8ASi`M\:??_e+(jTu*,%`n*Tt(s5S)<Al;DZP`-h23[@=dT<Q8-V)=&I$,7k<n9!43qE,#dtB7gpltgY8`^^:@+9C3F"e>bUGPPlJ\ua7L>Ph>-uK!(R7I9>%<e(_g#ID:3Ul<`HatIZd7#CQ?h_iN+[,Nm7;>ZndqAmM]lO04fY`pKN[;;<8W4cAQk+BbW5^9>[YO'^HYXi@mhmN`5W^$6:/ERLR%b$cDs"g]g`cV!b7a`&<eN,&jL#(DUuDQhWrfk8`Q,??O6iKZkKE08f@le]EPp#h>Y0#_mTRR84+nmr'->D>>@Xspm,dL8TuAZ)L1%3I2aR*!HZf7Y1MTCacLl@m^H\/2T"/kg_J`V'Ur*L3X<l4VJ;27F*O0G]JeeI)dd*_6ebTAq+%*R(L4K*A]7kOQJW:BaJ1L@GZS2%)"ScS6"XiNp'1;.)#05ZZ4pHZC@cKXD6R.ZXA7YI)fCt-^t1X0h3e^3hb+o.Q=aXB5bF#B5O9qZNB=1MXn;jN3qB?W<i>D_NP1QH%U":c+SXG\iO$4ebV'VYsi0r]Ydk^#6&CRY?Ongsl>1tsB3rN/;>$>*]?gF*RB1>PO9r"P]-)>8lk",3aZogfOX(/:-"c,cEl[m[O%]4o2WGnbY.@b.$Z^bMV"$QMeqAIZ[ClZ[-bX)lNoC0f#042`BS3Q<5HE+4Yk:3SWT8OqL8QT1:C&6fV8*mE<epWV:>dZWTj^ut&_%.!NjE@b#e6df(4U@oM]Ge`lsFChdYg^XY(-c\tSH2iUN`/ZEaW_OQ#]<Ng\,9s'G`jqf-iRp$W0:>\cUe!*A<[jl"'Ytj_&bPu[2%H$9cLrq?3DQLliZA193u&qn)M=5S$m^XgE*k/s-N[,mH$>nL'h]L$!u(Inp:f>E0p]%&,*=SgE%]V&a9r@XAsfQJNaG-WELdm8oB%Im+t+,@P2eO4-'Vc;XZnVGJn!*>('bC<7hUZ;L45*/j(^V*UiXnk(6Lq)ibTEKC9JBq;37,+J;V=,*o7OL[8H8R$e4ZD$ZodIheh%i\'-9/c>FhorIKYr<71;q@bBrBIIhMCI"D]UWJOAhVBc*2."t:<%=I&<th%phNk?dQgd)>I]#806`+@YeY$]<,q+^r+T=AO$,hK+%&oOU#1*F<O!I)dDE8uaCqFk.ulZ6!l_1TP=n4L5<ka[a8lLVWgWT!*i@$qqcptZo:>mBIAC0D*U]8Cj(7EU7>FmrZ;&NU`&c_P?h%>c++U<j<(WYghi6Y.5TPPe@<+hbuu65\>_ODhrXr6:.p6Z8GK,k,^1A:=XEYJ'?RWELR$nM\$]r&Yc*RU;dK'-ci%+f,P4tA>!@o%V;o[U"<.eDXD'`Z)mQCk!>IY`C6o6*gR&j7aEZ!fqq8OjFJM??R=je#Z7]h:4Z]e_(&gG<Y]T^+Ld_mqiCr(GoHDPQ"RY;i&?2!!%n!#oe%'mU7X8lP.JgiPOO!JpIK,k3Q0qB7PAp4>1K]#S7)?,Fp4q'+NZn%9DJQHDW\M>^eRP4u!3>((MLKNWY;8GB-&6hT=RIcA"%R0ZZXZXCHHG7YFh=$hE''1.(2_h;/'"RV[B[Dqf9j]HDFin:i0LYGobHsketP?&2)e2YXj$XAJB=QDacMG/hu,H)G7Q]@V.MNit<%Nm#rWJ_L]8d)G2,8SUXII<-G#A)HBQ*@HLA"[.'b-WtPI0iDU[%DbV&Q`KHqQ3%-LQAOL3JhOEcc&sIlPeMWE6tStT70\00R`P*j%Y-'`u?TdP>Acdr$$c++WN62UqE#Y]W9?PFnb=oQbG/ain"<F4S.T$bG+q*p,O$J'O"4Z(k(r/fj8#H//2m=-/<`'F-DF!dp:RJ=S%VV[1".qu_+T:oXSOlNQV:72L]<=MCSY_iNBS+1a@.fiSGi"D3/!X?5"lglM].e8BTbrj@]0#?)Vdk]KZbK[F@iHU1rm+@ES>NhNA%0bBn<!=Zna%X?G??YE/.-`\R7nHN=lasaoc0p^Z0T)b3[K,#$f1.YnHh_Ede9"K"N,_S`uI#6s8bbgU._Xrjg_W2?bfF0+[[&/s[%E=Z$hgmS8a\f@eZ,!l^5cc+aQc-+Bhh\b$tDk&BI-D$I@pf'-)9hOP7Q=8_ccZIe(*-Mce<)0N_;`:$Tj!CqCAV3m2mMT91!$^u9%*`K,,Es8/0dsm>g.7qliLt%[a(t3G%UOnh]'S[#pElo-5M@:f=7AMhqe^Vo8F$GJCQL\Dl``UC&QM6cRI6n]()q1`9YSB6n;+T>k%!$N9>j9gYoO[WDZ6!/c&=CTg+2B4e3*f6@sBG<!E##Q.P,2$HWV9s8/HYjugYj<[>hJ>)$3j.P7#8o)K&uAn+.)c1$$H.^#Q!7,u%0QMHLKf9`k&iU]](^-]6baQcolN*)tEP7IM&eR#p`b_/R3T,G`b?+a.a`:B=<Cm;1LhjuLE_,D:h5SuW=I3Zh'$Z$?6X#0le1/hj%%%#AeMQ/*/DI5F`EQ,D$B<Fs6o5%$([7e9300PVEl*0fV.hYlFOgam:_G]a$Ytsf>bh=.n200j<[=u;TPnq['<tcU\g80dhH#.,h%X8+o#F8Hn,]c,3q0W^%IAm&UbgmQ`&1]q]82.LCVM-@>b^$&9KT^Vt$h@>;50gfl,LLCr+h5*IJ@mY<>=3J150r'?^@$=`i"jNO1%?iqqaUmfs1]+RuYn%Bg]OscJs>*iaV=NIi?fA#'+0C;/mig#.1]]bH3U&M4/>qjN<HWKBO`a!SI[WDK.#0ZEnI%EYUpX\A8JUWj>%@:KWO:SDW(g,#@U2(hU9d53;aQKH?(.NrIBJ,o%42O@.jotqeeY[WqH#=iSo_?)QRFgYW*oM/Sdl#lu"e$,hhq`:r6((2Us15\AM%>7M=^esUMM@n@(bQ?lsqLmB3Ph%*Ga;.#5N/Id6<ZADAdcX9Gmqt@0#0T;PZ?<b'[YiHE)dpta+G1(dX(:2/do#lusHlGMC17Qgu%0?56;c\</-*)*g2f\VjB@03l`HA:Ng966q1\I:QP7c(Z(@KK#Fg$rNXm)J;rMqFT;P8M5YLs/OYp0eHu,kFP?ePXL"8M'dj5M+!m%dC/0H=<q_9i>HK,X/(`D-@s%L]>&^CS@iKJC^6PZD.,J7+_FBe':'>BmJ%&dD-\BaNf9?P7F7Lt;3':I53pt._Z<>Y^8TY&DcmZn%%NZ![jFl>"JqO0j?`/PZWhLA@JHK^0kduKMfl?@Tco4[hUAuO5^]7EpaX132!3m3G?5N_Tp*.u&p]"X&]@;7F`l)?PU.`P=(]Xbf%$q8JSeABG2FIfO+hQY%K`sPTnH1RSfN1Ms#T'4RFZD0>!CA*rpP.L'S>3ie]@DfrT]8ocpa0?uZ5*h+N]Y?1D+,;.aa=7).#/po'%ncSu)cQ8gpjn+0jO^Os"Y[G?kTtu_@KE`G&#n8p.*$3O!E-Onu+X'0BJg&!#JmlNWKS0[Q$AJp-$aVJ"YJ@R+P0.u4.]Hib_.&LM%%ZrYchH-aNAP';).]::UeMJlMbh').P)"X\A2ge3M(-]h-AhB6S*#4/;TE[o?=QV?msPYBf<P!6[Zup+rJXOb72/CA,7hAgDUL$K%]YV2/2Pik/@i]e33>#N)-d*r3!R%3rf.9K(X[o9,@eY^h1/]Wg#KJ/KXKO:?PaZWY^tT!;Z1c7Z_>!Ag)=?GOrlsiTX,F(7B.7jX%&^EE^--(KY2FhVtVgd7?Y4@M%B8UeDRd#%j;D?k&c>",`KP/r@MRQP*p0kch*E&H7'ON&K`VnOAf<hQdZMLWO!<btTXDUhI=JV08%X8qOTCNFR-VUSl/+A</gA[S]ePp!0Dq.^)@AQ>]u?Kcsr+BJ:^@0XLcSA)Zh\!O,;XiXW6^<=RJXX/6(Q;I!7VlM50:M.'%Pf9ku%1]q.qde=`P8JB=3m+f63N>_QjhWlKCWFf1r*AuoY0@KcLB)ZAnpuHJ.S?\W*KKik(]I#eJUfrdOdhC6(?Q#W^,`KkpA?`:!CRO7`%?]JF;`(+Qa#[upJ8&0\(Re4fM0aukNdP@f^eb]XU')(p]a]H2eab4.4P:f?tVSSFeV5.3Y5]C1Ba@[)+n>RPh8s66(.0h-I,f?VM%c&-:PnX!af,u[tKP;d->D_(oYfD)_EVJWG.$H&a"[^6SnFqXN-ZtCg^:Z7cuOR.WRP?;(SoNFt1/aOgY#RmORFaiURd^,J)-jF'V%Hgrl^Ng`E&I6g#'Y6V!b)nZ>(f`Xp2IM)JMjTl?%(1c+Fj*@(-]j)B.i&'9l&7B2if4&M%.,/E'=;Wf2,g:GB/3'h=`AEX$B]:'O%dc<n?Ga9F!XB\p]e^p!Xap"p@I0K0h(RI+do[ih%]!s(q>eJcNZn:RphsW(J:&JaC9\-N3,&JpU`_1jClpUg`2KHM,3Tp:s'i0`_%>SbdK@lbjC`A[*3)ZlZ!8:o7CbH\l\Q/?Z))Q,#qAYNRf,k`9P&lYG=R.2-]fBf'A0Cf+XEd=m_'.^uKHc/[oDY&#DDUD=XP?PKq%/JG8b9@9hH96q\;.2!YI[5*Nnk=4-JKs9U#YiC>>_h,%<A,5iX`KsYUroX&P:3J5H,mldUnET]:>9]L$;%%00^$S!>Y?a@`oR3`n%d.gu'"$R+fJ1M)/<_mSOWBZmB+I^2NA!>+j"oa"85KdF'oWU")^0i![oCJTqM*1]ffZ6O&ViUb27)fF*QC9dSDXN2[0.E9YF9(=9%+G15f(b$YYAI.CgS'V6-2sO!him]1T'#>N<;Z99rb,_tq"WUVN;C]aoFDGrYOUlN%VBEW3/r0A(X4#$LI3ZQ?;^$EPG0VM>Hub\k%auSNYc6mJN-`L+gjOOe$N4Z._-H'GJq-I\(8(j(T$%a$DPL7EYn/G;+94[B:-BMj#"1KoY'3HQRM$rrULamPW*17>E@7_#\[#i!=%rUc@HC]2F:1,gUbjHHr!ATI)@o)JQ/`Cl=?RjE$KPQ-:IZUbfN4ar_!]Gc6/Ke6?BUuP]]R;_k+L`PkJ`m.1*a[IEChjT='7#Ij6%'-FhElptU2RK$7]%Q^XYIO.6J$nD05+S8Z/*gA9-gl**Lo/P]cTlo!bn>-U4+0L'Fh#q[<@LcE<j$RWi&`@VoBl]Kq[(!iZ&QF3$%$],]/Z-#.\8kLj8\]PeU7!UI!'7XV",)eL.`DJ<Y4I8G7/GM'R.ih]##o0uhr>XjZ'CJeOqC4LZ'TV&@VtEQ)&g_2Ud<Ho[7p[K+%=.P8pQoD(YX8bbV\!I/.M3s"feb:2NpXBq]'U+\CA+G+G2=G04,a;n3^G"]RYB"t+J+1qS)tPQ-T:<VH33\Jd;o&ouqVTo*B[&`I%H?dZYl7UL]i`R`mo.KZ]+S@2IYMX=bi:hiB$$G>UjZ&i/%_NYSoS*q_CI!#Nk.B/B!d/LJ/'=bfiLDnlBETiDFnl3lh8hJ_4^Wf-%dYpUtCbNa!5#+0!W5Hu@9H;iD\D^rUqA>Z#>RlKU"]qi;#*AcnM&I8qckJpR?F>uL,q#eG`7ZS!\H9+4I6Zd"E;W1tC.U#RW[?Ya%QTOn<:,LqiF>;)[A#a5Z(4B2"%p\[6R17HN_XbF7Q#d7Ig"48em6I\TWbVaF%HEc#&<##QVfiPt0UhO]*5dca#3TgE/eC^f[Q)S;%-cnhG=Ml+3HOleLrm1VUI`_"eqK%:A82rq'K6Uq9%BHAimC`^dYO0Kh[6boV72%;MFU>DK4JX[WLkQ-"WAcl,+9g$h+#3SN(NZNX%6q.Cn10B.SKV`d5m:rm/T;`35eSl"Io:N:ETP2CZI&:ElE=RFJJ=U:p=G"kP&X.;*>63kGl`_]19LCW%YU-qt/E6J`0@!pPH2I=7%#-?qD,iTJJr`+H_Vf5BS+0A84YJ0-Cm@i'L;`\\YhtJm#]HM@'ph"1-ceLVUG?@45AhD9M]lF*U*EP<&\*n*HpA<N8IFaFdmFt2d%lL1H#.qu`CH$q][/L](cg[D15:u[s;A_5@8=_Gl\ZL8eUl0b4^qnC>!He"#Nf(ci2CrSE*Wb\:(o(u8%;q]<qV<pV^&)WY-Y9^n5%LX,ejC5,7OTKNK$m.["SY?!X.O"ap!%GeG!7l]/Z[erd,&Ji#7J+pJ]\;N'\$Fo42@NdHG,:E>$C7AZ]"h,5RJ@Mmjn1:gqlW$fu%N8udhqWc\"]d.;o/b]g/ViDLn<h`u^TJ]TW.T>J^DpH.611u@nnM#3N>$YnP\AkK=^(de5-D(g'3=a[!>SC:1ZU0b<U1)a#m!Y53%n@3qGYD!6aPNaT>GdW^do1@>^21`4`^fT7H-"PS[a-uj0;h)E4baK_Z'B!q_18hr@75Te=e"mUgCPlX+YA8Q5(U*`3p((O.q4$.)%MsJtKmbHQojinK,c0(0t"3^IgM^$o_.APF.(s8R^T+]Z*DUVtL]]6tel*uhLNiRs#Gbf2#ecRhG#OUKr/%<%%5/<%eS<r)iKs*R`%AUS>YV1fkuIooWGpV_hZC:Rt;9-^?p4A3)lKEfJ?\%Y\d&/+C>VLc5.C.KbjA6A$G1*YcZAhEO(Is3b'RUTqK?RRjAT\qBpd*C$k%/W?t/pqaM9FmufJ&I[0<?T!n^LXtK`H<u<n99jA=i0p?1o-VbI"r"<CU=&^Z$2(S]L8ZN^=t(l>-XF2U?W&GjNuMqB6[2!t1)jpn%a%":lN^n[s;*K#sb,/cY@>eMTLJ!]sTQ4QSW2/4T<Od`_>_9hWbEVD<#WKX8UNH!m@a[[%J23AT[$$I^dq-r95"-@3Pq(OW_,[4%%ZT;&;H!%o*rRNO&ragup'c.3@cO=$[+(H8misg][36K%/MkP;HWDke>U-u0&-.oB=TprMmNgZpQUrH<:pn>Gq(sE.Q1!o=sXPS$<%o/Y54<"&+uiD7c`],5;)FLg8?XCu4Ei^:S\f'n!Nam:^`A=gu2!]=#@96tKX`]5@o[;P$_:uQ]c@J4b*[q].\j*BLOY`9[9]B%R1%`+=1hNr8lO@B7S\=)Y8@q`k,HmdB*-q<#Z8m?a1&*5PhYJ3+'VMTrtnRiMPPrf<6uWqWfE>[:FqSa-qWkPF#HjF9'<5IZ0I=$4?4%CqJBcS+!pgD\TUln&StE30lYsU]@P.\<<(R:;t+E0FgXGp])GT_qPr*R(=#>cc$8Tn%p/c!$QNdo3Ee)/VqEo.+^fqG1`Qp:4i#l%ak]ZS2\a'>bs<R%eAl[LDCoMP2[i/-=17VsYm&K-9Q7Ff=?>mKdH-Egk9-+9i9iV@e+-`pNe;-C<X<M3)72P3VSO]=+2nk3ce-#<%HLpCn4MTXjPaRMR!Z,Od]p*mf;(H:Cp\Y)Yf:FfN:L(qsNtLS&]r#W$PX&GS0]=5-aO[pa#<`TF`6]VCmXQd7QPQ4G2t@=d84"%N%qP7c.q.`Jda/=F,<i4(Z\PY/kQ?s1CNH3!N0,3eu6[lrFSeOaU.hP13gK\]"KcYXlf5<XBXXcBDP4'%!hXi<id+ca@<q`f@SRm30%h]OJ6#n%(C^,;sX'e=[ZBo`^=N;YJWT&H.QR:kf2O@)%<-(3+ujEdA'qk?"lo"@T\V,+e[^a@gs1=V.16"i,fWmo$rTLt`5_*A`O%Iq<dYWdr\H"]U>RE>YX+Cr0UM("=EI2Tg_6b$f=ZQnVX:8h^HZWWZh97Q(]9TMnp<[Q,Po^F!GE^2$5:poZ?>O;Z(1(0I6BOPH;A%f=l"Q>0:U9o(GBaHCkgh3LhT\/uftNVPRs)eD-jgd2/=R1<O_S[VZMtBNr$59(o>AQ]+%6YD;ij@5/SQnL7)D?"V0uLc0Qji$_)J%%I'hbWTN_0F`Q>_a(Mp?Ag-MUDg4,43g;'^DLRRSN8a%:HGf%(''Ri1^t1p<4_D80&\"!TR"9lfb[CV.2:R"$=1/<eY-k<c#<@kV%QiDYiA<VEIbYQ'$K$-)l+N2pRjcsjHU<HDC/N`Fk$u#gY//4K4VU?S'YjnUS!pJ.!Sd-X=W_-d8/r%>/n&?Gp@-\sK\F["gb5i($%'+5"82-JNbnH$K<jLEL!AWVaBhSRT&AX%O[CZ2Tk:=!!eLC;%B5o#:]?*htcaIoOVa\/Rr%#_2_,G,0O)doOD'DMu)3D+$'di4pD%@[eY9rl`A=rEM+RZc"nQd5?TJSeJ8^B]Xj=]\^55<_Km8hU^u*'>9Df[t\]u[!]("_"RpsgNL(eFr^=X'AS:2Qnu.09a%94Q!f!E%.dl04ALi'X^PkZb!4$eP(OP[$Q+XT"$/C1RQ97pJW!'OtLSNf#YbGQpE2XicH<:gqE'5(kTp?$mQA8_L-6TR=q9[3XV8qPt2TE!7%$WHa]`5/?7k+;C_4XrR'WK,FdmF:YPeLZt/YlcW01P%a[=XYr!q6?3SGWD.Em1a%*'TbAHhR+O39]Y44`l:nYMF8M4EjqgX-+Ts'%6>nC/R^hLkgFRAbX\npW'LddGeO.`k'FdLU@4lR<T5>@R*=gX_(cj8U1T9K+L\Lph/;]b"9H5EbUnr96[CdiZA"eM_A@&BMj9cZ-%>pB>CHm<q^Qg>3p6S-sU%hg&T*GVD0MP3m"=E\X12NiE-6<8M278:!#>\%%tEeA:LDh]f9l"o/*HAb`aD63.h@>jRtmOSN'olF8_%bB;t^Zu'BDU@(qTiFkA7e2!EacIY+pR[,*eAT0\7c\KO2?&=\r1cele"\mo:UL9[;I*L\2o%:,,!:eo>hB#0/1if^(i(K9GQB,Te%Q^KM,m'@gb[c;/qADp@L,Q@h'K`n_<8GG[)d>msQXZbSZZ:7O#Y3+JrK%u1j1P"=U4^i0bnG%R\(54mkq'#h2"%HP=^1_G1E>*Ru%F$ELm^c2%2ietVGi+)-Ed#a`XE1%WI]']8(H+rCf_<cgh\=!+NW4gs,V*MP"Ya.^%`5dPMRTD%KE-*hhUa(qk/t,Ll@7>*NP7HsO%2.!A8e[n:%l(/+\E%I;3+-4l^aYr\qii<LL5/tAsBsr%"We9"E<deR3=B03VXMoD7"_0-Cq0MV5Kn1=m@kH>5D/63f`!/i8Kf->!%'i8"*Nm9T7JlPfHT!_BN=r,]KX5$oh/I-=]`Pf7W[Zbid`.m&eJo:('(4;]83"*3Yf6j+#E>C13jsqc*;80OPS$1j]Rha\Jq2dkd%g5p9jM3WY04`-Dk<#`B2NplcNH)0J,1u+eTZuUa'f,OM9lNFG7Je9AS^WF@#^iq"q!a'^^O"TWh>FXp0pV=g,C9^eLRLJI>W^23B%bj*;62SN9LX0_=*8hgLg_<GAE(,:@J_G<bnTf+p6#!suXR8C7)d9]jS1n3$d'd($>o]^^.PcYaEf1"Ft2AC;#WXm!m?qK4oA;9SF%3Kn`/UTEFnV:L$b3*p?@!XCG/Y],[5GrU@Wdb2c^f3<E-Z:9(VZY*@":E3g1+s*F_PA%N:k>\m1UUu1b41U>]PV)\@kTm21b6[m$%es4#d<>22Z;I^sGEsHTeM5`!k^qnT*\[<Jj'g1KA<>Y!O=@Lpd&2JC68<YE*fGC-h.ic7>L!2n>KA"M;\197`-Oq_hP1]l,W&!9b%(1$ef@[E1umT&1i6&4d5&Jg:Jmk8helKVuOCtnO'@I0/2F&tjlXAqS0J_auZ`MC$L3Sd^'38nZ0lN8,O_FHr9>]49#/FJD7HI@0C%3GKTq0]lbdnIgkVF=G:]fKe@^DN.4!qWT9Hd.8+BEfcu]cqc#TL/('"XjC!5+LiB:poET)%jGL@)oDs[5ah?b!C:8>Lb`u6LZ<K^%fX@'7pQRHicq3dt%atG>4(BUX(pE<E*it["puY!,0+h03iibqHl'T.2\J;hi*),?C[[F[@%Qq&E+ms'jG6l@7.(@?3Za,dDn?!7a%URc3LnYoS"@V92YSCj=g<6OrhC^;nWBq125\ALW$I.$0.AeSNbfWh*)@l\Km7Q$nc+rJPO!rT/=Dp\.3NM+m![R.WS"^*5)fo'^&%rN.'4A\682G/WT;\V968Q<WY5X5)\:KY6*'plgT;M2/Z7/bjXge:OBUV,i\fW^s8-;-,-Q1np[A$YD_k=s_6bC9c0Nh*;:`aZ[g5%S?eaHd=FHh5"2N)pi@IrZK6>H9e.0[,lZ@ACFMgL%G9fh=OQ`=X-$9.jHu\bY2q'TPh91f/uaU_8LbT-?&H*M1;#]'UQNs[ZbtJc%i9lcGfuVh6`8T4>c+S!O\=$N8A7-'34-$d[,Xjm+[ZSXC1*RYTer@mEl)84O\:?Dq"c6goZdZaE;_.<aVE&!8Uk=K\HLi6N*U$l@%j`6o_kM=8;l8ufQODhBP'k_[/U.$Xm\iRm[L^Hl14Ta/@7t,;D[IH8]p:#XjD_t8p2Y9fgaP!seN[Rnk!uE`aLZn;!?^&1nbn<pI%9f9=rT].N[?IZ!C9*kBTEd^$=N+8VqM2SDIGQU=;W63'1I7*+Tm.Q*-%N=MZidA0]]/M>0en&QU]@'OK,Zi9J/Vc;g1rfoH/2a0N%K/b0p+Gu5>5R4[*r8\.XCpf.geVMbus-mTNYlUAs<dm!69TKf&$a\<s%BmZ_*ueRgRFU!c#,R]=io!Lh53_n4_70ZSLu19%hR1aG%LlN8sF>jV:@tek7YLZcf`i<Ou:STG8034^Z8m>>pan7N_^NgGGq$8RYX1\%gPT&odG;eUF<=F:)U)j:jB(c^fA`[A,=/7KblWlkU%6lgmgRfbU6D?4I]j;%/eLLupO(UMjR6-X^)V\[%sRN2IJ`03F4pi=Wlf#G1ujas\DF9Pi+=B(eU;i!8eliQ]Bf0@fNPhjOp%?d,4%k<p>IH"?Y(muL.f4'tLEl^#bsePV,6<c_#f5fk;QdY_`kntY/:k+2:?j>KSjGgMoGJG(BZ#?46W*%df[YCZim4*\<PWn##lBsT?J%4IhE`SB-4M[eE6$=BEq]Of`Oo[5<]N1q&X"UWJ?V([-dGqV4JOU0;=^`Btl*CMU/3'r;=30S#27KAMUJKAK)-k2n1)%RLp;6>h5]%3Hsu#KNu.ODQFU,#[hn=Ep^q&[@;_e=#[RoiRE-:[(jH3d'1J*aAh)-\!-3sP&94"$WQ?2CJZA2<8C9]2CIXD)Q]Ps0MYY)UZfK*%J!`h[Y?MiQNfh,1TfRH3Up%<L==GQChHXeU2;5n23,=_/Rs6_k+1Ni+iS-_>+ZqAQM9-7e!62t9.G.<'G6M[<g$>6'bHoq*-e+^2%4JF5G_8Bm6,T?lo.t$F_0>cpu19!Q-CLhds"PT=eX^(Er-`$k\6;q9-#du)5+fTCRcF-9e-ggM&g01rFZ;u19k29WW$uPh^Mm@>/%G>;S1:Wnbeh.&1Sf*X]^B,[APd=`p$OQt8P[AF63N0Y,:[8tlggmXRUiQHB8>!(W=Q5b7SAI%p8I\aG,b,2`I_L(Ek\8(DC`,u-0%p$HqH8L:ZEb?+".G3tS'Eer%-f^(Z=kM9q"a8'+I9BZ$.Tk8Ht7be/u;4st,-JS_BR@q2$$'UNG:2HN`PX3SMR!>KaQS)]MX-Yrr%(,I+!ch6Mm9o5*R>FL=C(NKgcnNd)82%Di")M$-L+K(2#]gss\8N1FG?18s[>_OW/$kgV;-P$5JFLr_cC3D:>K"`9g"Rq'`T>8o`%PK+jK,HXIF$$"[\+>?.El4SDs0m9Xt*K30NlGB*j]$OPf6llkJITHfcU"2McRAg6Q\FG2(bnQBdM`+glCRr8hZ$,%cRitK/5oT@]%;ePDP)[R^B5rX(sik;sgaRank%Oe2a7kkauH(r,SpJ[1uQPFLE=pc1C(O2[X)5_5sV6:'Hee@.S7h4WiLOA&iQ_7UMW1dIdZ*-ik%'6MkeEp0aNo[%=n4`o16HBdornc.o)D='/2+%0BSWi3_lbB=B(,+5`1"cdX*Z\DaSJ@0sgBNrfAYh[%#H&E!6Z<g2(<4i]'X0`RP%p6$T[*W;N2W2S"qBZ46mT$q71+Z9LZE>[1O"OCr$1Pe^C3rUP-:TRnWqUOI+UFukMVi\:+,art7OD>AQ4-%$<V3Pgl;dA4=HFYD7%>:'5;XQ?dP?ohCH:?@2_$`5^-7kS&-g9lrG>$DWKJhYL$q;L7H;M;T\'Oe-s*Wjh=#7Z`VXoM9)`oSOC0Ps$?<N*($^B)lm<49!1%\`Id1rRG$\q\VDujs&[Tj0(hgn"GnN<HGM*WqrbO)tpOW?E(^]S_=?U/XXcj#hlXg)aZbMe_mK!";X;#A,Ig7/LLdh"ukkLXr-g]%,FrKrX0r6,oilmQID*>lMS,5+fF[?*32XJq66#m,HG=5'o!Z/0)[k#)nR`a'K)=;p6J@NZ0m<DcGT#DEp:TK1P]qT"<`jKJLF0]@%<dM38hF1OB3JY=5F'7-AF]n@mB5'l-WC^7b]uUh2a_K*FmljAh$\qUqIJ6ku$gb4`]?c)^HTcCQ:aYX"QA?ce>o%]=3fToS?(^rC%1'ed=DYYrY0'75"JL7!\hDLMI">'=Anik52H)YH%,k&'5k_%2,n$>^Y\a0$*dL8.>&F*kh]3LMl\Ot4S/kMGl&m/El8XSTP?sPBV%R,q4R&Nq'QoO*k:"5[UP"NaW[mP7@#R7SRHR3\KMUk%T$P#,a'3)Mea[.?>B3SIak8^L]gkUr2Ib]4#g/sdj-EXAg"QR'dq.BnqK%OeM6Rb9cX1P;3__.UdOhP_Y,i$>Ie]/6$.X5]\:6THY%(s+#6BM)Lf1JlBufCPk6Ci:C@T9T_gYHlfAs/+RA*cQaNQ(ATJjq]623%+b0eXZ@+lgg?#Z*17nT9o3"\Rc[a:9/>^Rg&Edku+Lu*tO>5ZSTo:nq7*_Y9ZYTt?cDCoSC][2R-1@::#+<UK#FZ.\)/(XpV3Lci%RkC>0Pkc#(Qd8RPHig[uV?rq5CC7DjG1R+\3A2ibAs^iR^!*B.]6qWgANkh$jYO%mo*NbrRkfFoLc^<9^^QnTWg6WUetcG-Hq$aY%1Fgm<UEu0C'l9MiP0/^b\Bh'%P3oPk3&@0RbZJsoHhKCJqW$n2gQ,ZZYA^T3^:^ti]QfD\7TYf46X[e4p*Bju]8QnI4_C_No*Wd;%^8mbJFc)IQ>Oa.GlIhmQZ\$*WUiMTF^.q/"i1cL;eJaaU/0S._/,$6T.iX,Q:(\[_V$nC!bIIKipE%r!cML43`fY1n*lu)AT=A``%O$/L[/R(EAptB7B-=[Z!H9AtX7C_0BRR?)Up@m(X&uQoDNG[HSMeqFlhE,!-!@M+0Udf=Z$gB"@bO/rnESp?H((Cj!0%=o/\:=;+%=:uQA>2L3&\K+R\YifFcS\YB?WT[#+#IeG\YV3#a^0i6t./MA$4%s.4Bk;(Xp''b<Hf#X@ns`Na0Xj$<^0k%/?sS%dUD7!`Mlm2n%oio%[SSWH6$IccR$GK<8/%E`6YcbckDEH_j9\YTT\q6@(Y-G-;D**bWaF+A8Xh=?2Mu.#Pb<`W$8^6QhGe)44'/3:-iJG4'"&i]k%M`c"P$J(&/[Or;-dNSZ(3n]//.rQcF^9a)IpMHZU?9?j)&3,W%&4+?PJjM+pKR&\SVanF0Z_Wu`IF%N^h8Bu5HppTD9Biu1S_K1;%dM%hBJ=>*2@rI+gUuVsp=JVA9JO`C\p?Z9t_(_08aPfEJY7al`0QZ_(X+l[1ek7\\GWSA:7Y_L21.K0:7`Q2b=K=Zn*ZnKg2,/f9%/:E>fiI_er7gQQF1slkd>nM_J"3tb"4?b.s7p7<)kREe+6FrUEjZ%q_qRFoadUE)`<.smp,:SK]^k!.q@qu>fYk6H?@mKP(j!1+i%_;Ql/U-1=KD^`UpNugi"`(r6d@Iq2Ug`jXta\Md=!C?u%CNm!2*\d*sbpMp-c&@'DfFrdH6R*[C5B41SM\L92@$$:JZ1;>aQ0nOc%U!6>_N84c,@`'Q<,0\6iY$nDQ@fo2%gIuXn49m;0,T"D&j8a.6/_&!iTFSdUGV^;2L><p/=CT+dZ&$@R->_mpHGp)\(Z<\lQ1.L7%#;:^*keO4ri6d,C!aTa.^t._2n:Bu[9n<hF6kBtpY]tXkpu#0L"[71+Ges\dg@kmq=NODVpqWa]fcV5F^&H@s5-X00FGc+q,$V<:%8b%?cA_.haYf4h]6S0[%8/mrRFWX'9YfDtQP7X=uP&0DR&[&e7*#m:*>[iC=ihLODR%,[fq2A5)S(Qjjqtm(L]8cWp='SH6jA6,"%B<ltSm&.]JY,CAW=FM:cpi0OcVCR,"a9CmCCYj"b"cgK095p,7//Da9Qr^qOXUfZqIGj@sTbF!J-l,b_G.aR`=D61G:ga=X13t4M%/i=n>c,r?Lpr-umn46qED+J%DSrg`+^-D`p*_2H_&&=P:6NYj#Ns-0#%"E(%#q^%R(^p_Al7tX,gGLZD":8n"-kb0'BcRi=L+ssX%H'=<ih-4h">=XDN(f"p768.)/*"pon1*j(uQB8m?>ChIAA%O71cG!(V^l1`AGqAS$Dou*3+O&F`/<F\u"d6k4%iFdVhEUnVc1NHn%(YABtf<7F88<VZ/pE-DB]Qp[^PC,C']mkM2p#YnMqU*WmDgm2\0:O%b+9)!0rV?-0o@oW3nUo)IIW9hEh>FMRdIW9s2j[al".NM5%d3EuWQ>jPJT^WNDr<)a'0R*#i0<61CE_aturit2Tk[aRJIPZZ,V$u7VSc%RHE_?[K+?oUkCW>u)Da1)%GPARN.eK0U6g``1o@3&h%(ToD5*rg;pq3_0[)u][05M,=E=FLa&ariWpotD&2q6tkAMeW__4n(Aml;1VbA?l<M291@ie5XR(pqY[L#G43ZkI?fcV\Xuhbh-r*%f-2<NRqdl46!ot\AAU"Cf24`mq)A5>1U`eF:GTAXdC,Y.)fi9TCKS#,pl!]Ohp<61MOn_8&c;'qk?m%nIefm+K%b^QnuH1e]X892%Eg@sI/C\CaO6#rb[m`3(Q)p_m&oCr[?#;6QAmJ$3HBcrf+!07P]s_,7Vnlt<d6@L'cemN,l)MqqW>f$ko.P#ghn?c&o/B^D99=nq%G\-F]:uE^>04/HprmP;deiJ;$Mo3AYV*;lg46QV)mJ6G@X_-'!W>%*`npL;sDlch8;`Ptap;>cmggCP+-@8+oUX,u3rVYsYpATi:%Y:_em%*,$Ujo;+-"P1stjg4+?5JOnBHF+r1b%6$Rrr-kHFEk$gc^S\]FSp+L>/#HN48E8q4,W-G5J=ThVpB972:(F4.[MH%D9jge%ko6J5j;a632:(aLg:k<#S;,/ZEHkAV8)sJ2rUH&N]mZEh.ArIi!IjYE.f.E/rT51=^s29BbDYcLj*b)[Z<B,F)9R0@"PUKYeNsdG%In9opa3';aNeKc<je!VE"T*63m\6Y0G%%MV8tOqOHN.LHAlc]K+]f]O?\@-sKF3V$q)p2U-MLA'ELXui'bkkCTRrfn>e_Hc?0kQP%A`f^7T3jdo\Gk;"?+RP[h<n:^U<oVa]up9old@lRkEYF/RRJC!lJha,r0jg*h5?9t>A3%-j5,PLr[;\anEg)Gp@e+$rK1:u.&toA%WF^p\P.cu\']:Idc7^im.,Snps8:,CHdtuZOPs5HU:\a%/$IoCWpD].F<:SO30=p*jt"dOW$l#<`jikA!Y^fZ@7Bd._4QmEVAg2o%pMYF^9(:iK3:)8*[lo??T5LaaVuQ"Y.qUGTB&;>"]Xi>82OtYQ=1(9!cH:)pldJLRe@%PH79+eWPl*dfpYNm4"dF^V]C7U:a8>Y\%TpAL#^V9RBjq?5B?^aY'bn>5"Y/$Xa]Qee2]tQ]k^H\ncq!:NE:*)@N/md=?gg$K/IP($gqXLn!gq;FFIf.72LOZhF]Va!sSJ-9%%5(@po^&%gjns&h:p@eE6VMai8I[BB>(DiDkDn">]-Z4D*1Vui^MZ<+ZI^><C+9'1Nh.PdRh#67D2EuM:%o9saqUPE'>K_rs],g^M%c`]0p6?6/?rJb:LqW<+9#@]<(?@9;3\IW:'k7>>bIXQZbrK7-iHh<;bj8&EJ(Yjkfqr`$M8*']9Qj=43@^#c<S:?!uh1tMBV<Zsd%5l^@UHOk70rLQ"fh0\\cmf)A6qit]A3BmB2h)RgFd!7Idp1;:Zpp_GKre`u:s2-7uHhI9N@Vu$+%thL;M\gm/ZFK"54\`E]dAPaj%bM@UF@XIYAMg\&rb5(uCi>,(,`\9R,YMW^"]`2H5DJ@,Z[oYqDd+-C9Sbg616h1'A9Yfp,/;eeM2dc%&S$0U$hJ@X_FE@%=2a5!e%-]?p9p=9*pD_GEArq^lCQ=^%&Zp0J^k;R<t?Ykd@hHmtphUOh>WUCdZX6ol]9<s;d/KE6KK]E)]WSrV\\BAIG_S?%oqf7&Zp<B)M%""Y\lp%?93.UppJr[`^sMJeN(oCgGklk54!Y.(m0:N!Xcg\X_=[cW3\Yi53Ec,G6EkqqM@c/l('e2E,ccL8K;-(SCLgs(T-h4#@;%]h),_c2#PLWJ?6ngDmr@^Y+!\NaV(is4P]_4T*m>H#rt>i4ln6H:sePJ4kV^Nq;$&cYq*I?Z$.rRg^`q5JFgVF*P;[5GZSR[9X3X%%s-ASi$NOAfo50V0\E"Gh;A:(AdY"LT\)b:7QF4l4(^foT2LS\7"O`FZ%W3p1cdh8rp'FLH0TP0@3=m>DJd8Qo>F-/5t#g)PKh)&%%H1tn)7St=5FD8il^J\thRpPZ]Y;()qo2$QD0,g^+)gV^8@2gdDa)uT)fIMQ\qosGFoi\`p?d%\]XJ[EGSCmqett'-roMo32q4g^%ToQ;DqqL`.]/Sn0`*[mdoj59V?8Ia,$?7E7UEHJ[Kn:@.0Q4_[DLT"l_u8`iji.2ok80I$pVo7^DjJ<<g%k=,\*'s(RnmqY,SI]B%lclIU!+&o:]HLD8(B/kmGtkfQiEFjD%:A1^EVRp_gDBV6K?qjsc`^^"[HXd6)sbbn=52IgLr\@(REu`m#/%UYhJVcLDf<?H/c"B*%8)'N9[EUPa_FNO*!!6ReRKjH2@87qU,_8XB.2)gi6h\7/+8a^*>,ti4/5*:-rESgagb3A7XmW?pBiS.lDB3Co)&[_no\')sq0=aq%pSZV%1'.3Y?LPA/[Y`@n]lJLGI<'Y^.0bRiFtR^fI^ZS`^\6s[d*)!*]fl:;qVpr@p6R?#;a^Mr7$N.j+d%((c+r1JVeq\^oe%86%Qf09ES86duF2'AhR^*/A)"Li[s4A&qA=@e,SUAIfR/\>(6WHq<SGg#[OtC`5=ZNkT;d%M;;p=43hIdARf63le($=CIhT3q.;9F@/%P^@k)o^(T7jUbHOY?q\e.e^4%)'-Z$ZYJjdZGdJE^FmTbQT)YlU?%Sd7]Z.X'q2dFF00uC<t).Eag-6VkGG(bEpgWHpi7=3B6Abh%]tn4bH2mBn`$gD2?u6RsqU.8;7JMEe;97j+WgLCND9^2g_r\5nI(#+GZ\tW?<NK*qK_=m'1N$Q(IB38)hLkX-Y-+6$FdDV7SiJh0%IOLr6BY?BZ)tM<d]^3^\b+?aB$ko\>hg\r0'"N$<FSKe<jSIKCCRNX?2:nRhQ7ZnfIHWXLT(7ZB_^Sb75"%3"[R=gK>A&`Sf?HPN%G1FC2:R[X%5FRji2p_EFkiq*)DN57R:QrN(5526ijF$1Vr:n%trM%UX?eeU4WB>5PAk^2KmG)nMrgYia&16i9N0pr.m8Wr+YuoiD%6iMOSgH7K7,>$iM2g7d6XPBO'h)*GH?(G&Ujed=q$Og57aMmD)_j3A^o$Hpg`@XH7(!iE):a:b)*O7*fgs+/4;6QlL3EZ%jm&#]i%S%KT^54sE/RX%!!kSY5,jTChS0!C9g]0(%20m,[!E`^F;cFm<(\RHf)3o"!\f9-8aqXEJgnT'O>.mDKX#Ts)g8;rCj9<m&CL=T^L%]Qrdq6_>`t]mVnO4+S3n3qJACH(QIb7jd&+rlAfc_ioF:Cm!1R/US^GUeoUP=HfZ46u@7[ir_6LkD<ZAfom7t>uh]DRHIemWq4Nd%$'t)YU@t7_:25!UoLn)GUGC["l]2n1+st%]epHsGO]sf^^@KD3Q52hn<opXp9QnsXQf#R8SDJF9lt>ak6L4R1o]FbdMo/:3]?lL$%1;IF#O*iXfLF\uY]K,h2qrb1MlJPNfjuR-VQ)S_b^gaS+!l_/V.\9<cHZ=:j.i]V\kcjUf]6mp+r%:>.kN2C:f+,g^T;!!]mAn0c%O:e'+??N_9b]=LW!qksF"eqsgpdZ&U)5p!K3q!?rDL^K>oLGTKdB:Nb_U>[Lg[2i:Tu5(P-/Mspa0)hEW=,DADLctl%^0e#(:Rks%#WH>U6]Hk"&Q.TAlS_\NgXB:[&X5KYkOA?7VL?rO*_o42j4VYTCHS..FeM1O2TNG!e()Y%Ac/ldMq(/,])I/(;8qn/bPjbYgf/2"%Z+3VJgC5Xa.PYM;o)ad:@F:9'lA.(F?RiU(ZVX'/EsfX(Z&76p^/4d,nRR%?S"&t%dlL@!nG(=Z<V!Hgi8s@P`-uC?DOr29B@*,<%S_e@e#dQT<'Kp0--p71`\&KEAZRt[VT>"TVp+5c9:Ed-mlh$qO/Y%:\rb0TGRsm(TrT*.DMn^8#n`tHZrS_nq(Op\j5'_@a]_XeJ%388iMB&R_%]=#D@rp!01]Es#s:V*#'_m=FED]3-'du.k"LF7:0`ksSsJ&tLD^,LhFn)iL;cb.n7*M0ZF37cm%rWGIS&$J[@p26Ci%(G`MN1[iH/Di=%(j@6u+i6THaZes=e_[inmde_MJ4?-V\N*TdD/f[$F\_;>CZk_IL7[oH'1tOBFHLKIg5C^%@5HaIi>@2WdE,8<5%%55q,gsOa&/$i/mjEoWIflV@'9m8Z?PniV0B`$rgqU*PLq8gc9CX.:-dqFa--<e04msMf2HYAs4[/&gMX_t>W=>u;;n*"Y8EF\be%-Vh7SSi,\KU(&dPqrkNeF5pN^hHt."ki_7b00[-'rociHeXq?b[9<:PYG426NNq8O>9=<'D/G4HJ+W:#`:]*QG$Y$n=8$9F`0m64%IC(`[qWuK%b_t/;O8;'g%`e=qMEgCnmoeu-e;M2)Ni\iUNNpn#c/_XI>cm[C+')#u)E\j`p%IY!ZB'I@2BI8$D1,CGP54Iam*b[8%UZPnA!e:2t(mpAu)B[9WYP[PWr.H/W]m-p8:=FXEa^:S$48A/Q-WQY.]S..Pe+-B)Z=>D5ICrn_;?-RUaDL7<XduPc4hUdjE9r"p%8(WfSMt+S7r92DS05fH52eBr\5ODench6hL`6EQ%n@IhYf6?-=Z,qhMT=u"fe67pb(0_lGYI%5No^2PA8&ZSCp:j_q?T-dUc?*Uq%k0_i7h#"QL+)Qs>)`)\"-$'M:N1^)OH<E#PiOS9DX&l(kkZ#Un^0[FX&hXX.OH5,tNNrCd\&7<Uo?mNiM;1UR\(bQaoqQ;pcdpi_%qJjX2rj:f(IC(_P1U?iN-9QYE3oFZB++5kdrN#Rc94nJ[:J3nJC!q;hIsT"n@ZTUdG\d$Ef#d1#D;e"B*^"^IqU(k[S'RFZ4poF#%I9No4O7,Mk$Tt`ni9ounUQ_YGU[P\ZbL2I>DTlsfo:q;MK"5c%n#tNCP)hepI/ilW\#4p%rUAl]Wp$3%PO[=YK;Z1#8f%3.B75($%DR0&44"l*]hHPCj<VXrp\'<P&..g0q>lVI*I^iJQd<4d5p#!g/++:[VH2[!lbt@E!neHUsmItEnZG=lMn:r$"><dEnEkB`E1f(:C%5()qjdHM.<H26CGjO_".#Ju`R%i;D?F8\#iB%25#/=t!uRYTIP*M4Er`YU!\gHXE)^A7<s!BrR!qP\e\#`.m1nE1%m\pSVaVF)&H%^5V`[:F=Y)Em$QBFT(=2Ie:hNr:@AYS_Tcb[(5[2^*92?lP,&bp2%8;n@*der@\,tlX*F7bt$r(2qquV\[sutn1d/m52"cKk""qV%Sa1o(2u_4&=88`EZ+rHk_i_Xef?`NQ:5<r*IX6+@4$D^i0)fuR&t-DI]D_PNiU:uG_iLp4T;QU#IN;e&%rYc;./HplYWaj*[QM-Y%?]-2Rk0ZU/Y)h<3]jofUD#V(><*@VP(Y@Wh0:RFYf9H-$\$qL5pb==Kqq8mGV3`:T?C1S9qe5<Ko*74n^M[1])IqONe,EXpn%lic%dc0)-afeq+?d4ApB+'3KG!=W:-?Wo-<c$M/9kcWBq.oJ=p[HYc@`bg7-f2$hrihXa2-mKSjf&ccf>!VEhVOb_=:*i40)kO_e+MT+%PO;uOY<-Yj,QGJ<=IUr=IIHnPpL_]"q=W(kbLs5NW;,!C0<]sdLU6hp_2<Z/qNUF9cF4>`^/*fu_68W@cGIXr\6cUQVgCMk[j*P%%Mr4MOIJGo&qq4O!Y@AY\T=gd5hK`#klh0qf_<]+.]C^DY!l$ZUIs73N]mRNk#JYEfU$JT]Ir:"UN3=#rHM;9*@VY9"n2L@#Z"!;$%_W94pLT/2BgP]-sO0;HBmtsGH1#<oK:$H5+IXAJc\n5B5CR4WEL8VI$fu#VHDa"TU]`0I1jh]'NiJC?oGPLJ=r6LYefrY@]L%`eY%I;Nu_nk;OEG)>*lI<k6LF>5E9kh[>N*I:<7+/b`Z0_]AABMpCoOYq-&k1\qZonYE<n7pN64/8-F'tj=WL%p/s8"H3Gd5P]@]q>8)%2u1#^UEf)3B1kI(XY0o490O7V&23:bI<<j4CthJS^K,`(A(WI7kf1X8IelnXej\`-dH6(r_;4;8UDrC`$iD=J;=EmcG'RFJ]ubZo%jPdu]XcLV+*hDcfZp's`@-k>&ifAE_qrJn?=oVp<EFo#[krY,W<4kfm*KJ9+H<C#@=Q:@OI-FmMOd(;/p;h.)o$4U+Wn'W9>b=1'%;:V6M>D&R2?\T+RG:0eiHhlSVa87/YNkAU6Y4:<?h8.cH7Ts3FWO2Tsr(2okjmAIml/g*X*Sp\bf*^lZB3^g7AQ+WHGkjh[pr/3f%cP%f2h[gl]?g5hJan!o]LE[e[5HU;m+21mDJ^.UT?;6s&bG.Ptq;o/ZVlO>&c\(il;`U5gTKP'%:TO3=o'^]`jD#J_Z+%6Q2O=0"%8B-t/D1J_3_lk-\9cc%<9sG'DZLuup)rlFP);6&>1U<A3$s'8BO5/"(!bU#3A+u8do-#sBh%[UoIOQAg9l<e<+jKt30L*JTk^"^b%_d6MN7334OD!L9Y?2$eNJ)4^anq-[#Z+%0"k1:HncB/&dgflA)@#KL%PP=NPFJIa;$aX3u%q1NAc;7"-BW?B`lI0\3m=ic\Vo>\"%m!\\ADiE6!m]FI6^5r<MX1P]Aq^PmVm*<2L%nFZ!HWp6NFe<I:jM"^pkb`[^)c_f]'0Z4K(O=E7p3GaLqgik_m@pL5es..\fBfmu%2]HHIDXddGCcsUE=WpkLI=?HG3?H?:)>rYr(3JqG]/=i[>=E#5S1>s[Vrj"'g=kt/C@,1uQhp<+mS!LTH)PO%f'2/0DJN;+4k;Nl%abQBdYo);h\S>1Z>p`Mp@FdWG2VTKNb(ad1gcBl6I+W>;B?@NjnbFi)-,l):[kQ_&-U*i1l.>0sRE=gVl&*beR\+>:<nrsZ>oO![%GiW,lq<i34qelqXX6)J2jMUZ_Tb:PSXNfsY%'AlSib`\rNYIThQ;Te1nK/tZ$"=_;NPgkpG3RkNqft38O;f![o).C.OZ@o^jcAs'%i^qEH:D?o>H'5PROquB<WuO^lmG7)#=^+u"Cqq*=283CkR(Ct0D0te`UKsm3e5BeX8,AfGGJ.3V`OmjV58p\2/Bi%8l]C+g$=2='%:CWL_^A%4bfoVL.n(4CDWC^`Um(qM&V9Rme_/:T*IJR6IWle%ZE^-+cN$#3&O/k!9\$Kt$8(G-'@cHaUCsVi>ad,pcJ/)jd[!f)Z%]0tt1`=0%`2O^tb[m/X8\8Hmuep=fc>@Su)O7D!XG**a^K=4mBrR`YYY8^sl#'R8RYaP7(qr#U=S'IA4jfKRDAW>hq;Y'P'=DMc4%-f4ace9Ce#D2`>bYrWi-rmZW69'3F(dh3"!r)//@<A%Tq+DN>?%],X/W&'OJD0`<Bl,NG=5S>/A/?-`X't(\ui:Z5rCIg78\D)$p%^<JH)r[&"i:TWFHp43iQj-`A]2gQ#W,n(u8fLY7g)Iko>lCJ&"h.%=gqu(=r!^PoBYZH=hFFI$J?b`OGnj^km?bL=0$FTA^2G65l%of6AsIbKG-<5Oao)7W!*9/Y:'k*,goApq-Yp1s$@7X#3BhUZ9.;Ra\k8Q[OYO2\]QMMuH][lFYJ*4)9peaU/^UJ&r)$sn[M<+-)B%-]_;hVUU(`5Y0\XGlS$(SDkHKm.6PAT'YOp@1qg6U+X(Za^;-&Sp.-pHb^SMSm/*OB-/%%-(%*V#sH&(J^H?dTQKU8r7A!]0Vut0%Y8ggAJq90F26o8SGYS'1cH+6gUnQV/7V]6ZDG"j/:$MAjDiE4#V@=!s?U)'`g*QH[Ni+ude]e_E>J$r<FuAKlqdM];_YMdci0URY%%_ThGT79#J?Su/8?SpJbZ9.4"Qr'Q(Vf1[]hRs'-eWtS/Vsj&_0\'Q>UJo^.fWnVMYW"_0g9PIS[B$m\M<Xa3%@Pc'gM4I'k.:8W%/4-l8p]SD,g"`)ZU7uf#.WdRMLL5.a<TC4Fbj&7VY>C62h=\<[8[SnjQ\k6Tn#,!(lsV`QQoP!-Rfh?ek<*@KOib</e"bdCq"k5c%[7:LL;PJ$u6#,Ji(O;>[D1d^"0TMZ%3;3V`0\3P&:O.o&b_Xnu=*#fHk%A2*a?NHHg/NVkg[/:@Pp%Ei)Zu182eVr"FaXY3TX43^%:SK@T7Zbube%_`d+tgaeOa_S*[n*7LKD0S:QY8h?"oIOkU?rF;p<%go8jd5af'2Si*4J_='\Rfc7^,B`W<_5p3\7^:;VTV.AR$55%`Mm*?=5CfM)EClGmn4\cqB:,-B9A9M&bt5$XE<$OO<s@^MV7s/hQn<pbkuneYLaWWgH\'I_/qgHe$Yg\+kP1VA1gG<IA]?7QU4?L%1\0D1T5r4+29?6$$1+``e?;I\c5>oB>oS7Va1cKHUn@Zb(\[%^_8GQ4^f!2D>oQCKFkk#8?.e:B88!?\/h98^e'\0&fSA<,X[4W5%Tca0GXV[`?qpJpqMX:57?5d<Zql-D$X*%hp@1Ge63;mO.S1[3%pe4<sR]gho^>(4Z$+&M>dY08YR8'8fV.#VB!]$p^V=&$O;N`Q2%&IUQ+>qF,:Q>Rn1V6a>6=i8[QY5E196D^c#?a5No\s-0.=m?Ude`?>%kc(cfn?JIh%jb,fHTGG]8B"9&41PQBjV1Y"5V;AiWhiTU%\Pt:(h,H@J-(/Q1rr.@1QbI8bCG;*"ilc[]e\4o:Pd_Cll>L":AE_H?oELlBf&">N=0)n'>S\2jV^-G+>P`2JB-enE8oq-Zq,VYA%1/uMiR&_s?.Tj34\PeE'0VF`JTLn)GhohV91@\s5*1m!%q^j;X[YJLjfn6"+]#NB1C?VZJkW12JmTDnY>sYCFC]?86eJ31+eUkKa%crF/o[9!am^P8o&K!$gdQl<R$$G'KMi4WpiW[m9O@tUbSX0/+*G/jStkc17bp!WnUkc-/sZ7&sB20@@`FN,Bf?:3>9OBc+#G#`'i%=6@;b<rsuPm:f+&8FNU7fA.(K(QKhWe4XAS^-4>g?Tmb=&R$:@Q$%E'9.kL8N:5;AH)=_?ldT'Ke!Xo.<O3NY\d!u=*oj<bCo6[s%d=Ual3EL]Zc#3GWHdQoNSF/`oYC,[<K2i>ZZXaR0BTGT'ojl>H9ST\(EdN*_T^![87!ZNu)<C,;?t+2G4'G`[eD&J&:%pL1VJEG@%HR<9A^gNmDqF-@,@^k@$:#8P.>3pF9<029;.19&df?Ln(?/6'6Pu]]>hX@_Up(T(J=Z<54,<"jJT=gifZ)5`+*8.AfEQC,QNOCVO%3s`E(>%H>cM5dK7X'<Hnh7$`EMIgGeYrm-Z*B9SWKLnosM@,1-(U6#Zap\*)Wkb"&:g++tl*f<9kbX<CqWNObH$1PSV&@;+S?!E=%<F2-&Gl-QIacIuGkop7:#$%5sT9?>mrSl4B3Uf2]nQf+d2=R8o3khaS1$+muXbPGLp@_rL40'+l.'H>/V6b?IdcZL9mc(YHZsr-j%OIdh6,hdZJX<%'FY<*AfDAR53p=MMKL``*l$Q'>RQf=;Gol>=l;:\$+i078+^9dJs?+Be*a_2,2VGYCel[X./S@t(A,+RcnOb`mW%JMO;nY9iMJ[O>Fe-J;;-HW$du1/dQ3PaAn&kPahl;''2jD>Vc#aIK<XD)nUIQd+e?:X[]elIh<FQ^aa^],g^K>?.b*$rtmT,aCP0%]tbC(Y#8^X<>NXj8=f=/W$2T(b8uijNR`_7;L>KeSSfh?Z>4TNh0>^<T^&[Y5)Rh'"d05)>$IY(AR+J]EqRL%BBokdW>LfQRhi')%YcEQ#FN[F_;&!(dV#8md:[I7'3CLk-NN]qgFEJ._-hc+^s&j*_CEPBHN3A/onE5']LeR\O"8:;js&1F5A6RY,ouk^.7q;t,"lmAl%9b>UuWhUd2IeA!"+>P6&58L,#VL?_K**Jc(ekWB7-*_RD;.r/nHFS=YGTC;iC24A<M,/<^lAU9TNeX9I>Cus!345L)fli?[V[REN%ZM,WTS:8$&Wg10B[<sNl\klEZfWD<Z[p6qi%+VJkq0LS6FY+V8=Xi,h6%m4"jbHfHGB1Ar4o+Z$nQaeZZqXM4A>u;=F?SN&&G:"2%&(:[tn%0Y/53J""?4U,-"[2'q\@s^tCY-IHa\X!S4WJ$Rh]1:N*j5!#d*hj-qpr[HZ_<QOhdGd/$I0Y\B*5;lX)UbI!:&MuFNLEP%%CdI^^_\L-lMsMeDh'HA0=G3#JSO@9k)L92[k6q,7!<*4glM2Rq_,..&?;-)fsRHPbi%1e?M'G&SpM>LC6,WlIV\;XQVP<+3![10%7,+gH`:E`LLA*4OYTT0c'"7'lS2M]fDuV8hoGU7heB?T9rs!o"g&#g8.?S,:Cq01aruU9t3GVmNHN7llIl3>:JD!^5)qOUefhW]+%R-d>0Yg9Xn[%Ho6HLY]QV.nNEXSmsCDPs1>]BVAX&Mos&@9@4/C._Pfe<u3D%tgfOrVUki'rfX7i$qVhruF?nW]f>PU*B8LjMaf8%0D-emV4YK_Au8n9eu9j!7oSV8oidJ]rtst$93e"=7g>qP1ptp\,Fk\g5;CX'L@Z'a#Z2,a18SrdEbqDFE3RBoB(WH+nfFWHATSf+%.9p5iAaNC*hYbOnQGVb/+?I%3T9R2-U'^uUKe(']CAMS;5O4,Wh"f&,Khq(B'"shAT=;l7#BlaY$I0:Z\GGR.)?;NRCHmWf%iaZp%VYuV8hLZ.&e`\O.\QU/HMUVf/q/p(efrrmRDU&]jk)RNUUBTr!+@*.'f!rTaS="c<+>`rpl$Kr:EW,jjV7G@BmBu8`$O7(.<mU-P%fZNd?o+.l4:7o:,I5:cph889_ks57%GU6.GYH72@?9`GL(IqNV-7%B9_3<am'YE`pajspp@#'l_UtG(Nqu'T!po:G!CiOpcdsbH)%gKnUE)/eTC.k9n1X`hfVK*Sncqb((s>F,]//%>GO\5p66UUX;#7p.FpA:'#9Y1W-,mpnW9?38-IVULUgMqr><k':*`SMs\K@5kK@%fI[!"[D)>/<QRaN+5`HpZhgf*f^5?3fPNGns6.Jg#9R.lmC83qm,bDeLLhQU;mEts>OP3L.WT?BD0N[aWhXlJ61UAQc0fIa@BS1&%mY[9V:AH49V"JS>rb7?5Vro^Of351Qk.L0E%FLK.1gZhO=/p</];FBG/Qc.VJ$M4,Zs"]jWEs;b6LIg4IP1T!5"`I4kGio+.p_^;%X7JGOmr`"saVEVV=*UT7?T6+"Lr+9SH?SalaNMSje`@e@p:S,^9B<\FoaU*t\^L;=h"t,.=1@LW]&#;@HdQW);RW-mG5qI"lLW21%\+B0KdTu0E5h?J0mCetV^,Sf)eT=6/5RW8b<&IrY/R@oB0`=u"'k)[tr6f48>u<1Z+-hmMKX"0+mI+=TQWoc'D=rFZl&*(;H9t0K%eT=5TI6ESF9/U!PS0k!]#?4E!<(iR9N!uAJXpAZS58S2KeT=5^HcpaV<&It#3EH<aVCS[CCX4"A6oA84dO+Vl>"r'TV#8?SrE%G_%dB>:UPBg?,R]_HqL"T:N<RZ)6eb)\rHW8IZgQmJnVX%s8mTiQ=fbMe1)g!snI93MZC:YT"X"j*Y\tT[:><U>J\tTZQ"0\RPMO&AF%_"V,/=&_hZpKma#VCO,<CQFD_U7/6`Q7f@JqQHbH>)]oEZ3F3$=/1po!7c0[[<*/Xnb)>N5+,NdV?<3t?gL9!';K/jfPk`a$h!/U%=85a!>,ZQukkjY&L/_kmh!;\c9'`5.3d&-h[V_5*X-Be$IoaIkW4)q2Dd*APV,bj\KBaFS/Q#@1G.F4<;pg[`]Am%RHMY5=<0TpN%-"/:Sl*N);[T.@UHUJ%Bk<I;I<C0!?FTjOed:22Rh=XUN<d`.tq`.aN9_.&D\LX"#cYLISlX"X6;9;hAOKR0&i77YFk+]IO-hR=3%<ik3<Q5\B1eNjnApO:po.ABpad9W;HV3S&rmZQ;5?LiV>;'G\Umdu.+3VRX@e^`6dl7AON^TLT7g-%krVD^ZdG:h.k<ioU8fq3!H%BQ52$Qg5!in'<SLcTcqH\urTYNER'Oj[gG7X4"4+_*F1)[S!7.r(aD9_\QfoB0FYC5Ga7?phZn7GRqsIReO<g+eK5:G&Z,2D[2[>%osSHj<0tPc=+BKj?^JpUahC+cm%s>6nA\RKrS131[<Y@1VdBpE00.]k<[lfeZ\tAs0<D:cJN[@BRiYFsiLH*e$e8Flri(G3Cur)Q%$a8@J7qYT!bj^SZ.UC3SVc1.&XE!-5Kb4?$D)._L/T(;VR_!b'V)d&;4dk^Q2rtM8#".UsJQ6O#^FUsIk_8bLc>$WAe@kGCd8[mC%`(K2A`V56jZ_-+>3D8eFl8YO5^9bu>PM"na4?3VF/nF0#_@,+6WhYYar,:30PaZF@f*ur+qT@eZmdA&K*B2d0s5*$IDRcaO`d,V\%+=\I7V[%<B?5N=7I8euflB9<X\EeE@Kh$K6e0WYUBX6e?m^h3J3n&poFhcn<m]#>>;Ai#6QV#dWpKm/%efKhkFK't2e1[md*'#L%%$u.bqD3^.a.'3CF\#?mOf5n+%T3fpHU,+!hT)fYWU6d.QWS/0ShG<sXE7ra0baFQhAP=1lWc'QKkc=EUkdS[e!]Jj")qW6fqc80M%9UcnrUPS0m3p1:dCU($R9H=jVp"]6L>tQ.3]tT]810h@k$`:(*`,oshoA/m(=/+'JD@ofnVf8QlOqiCP/spu@%(.:e=gs?hQ=7;O%SBVq+prZ48M_:uC)"*_/L<R9n[Dm?7mq:lV%>AHGlNusT'k(D'U:LpU?*X;JNV<R;d8_>LGon!&,CcJ(E1ui?_>^Wb4M%6/X&\iJ%?)$^fShQG1HEO8fD/la:[sg#8oY%'Elu_@cqM@A4-$o$OK_pb6eW9%nmoDZU>q\@s%,O-S=`,:aX=V\7+cZ*\<MF`XcJ++ed&#M\%CqEd3T8Mpm)Ik0jqc%R_h<Xl<fr`b)%laINpgmS?T)WkHm.'RV<[P9lCmEWOh2JG-ba!Y,>(=$Z]',oK0ti>o>:#U8kdRR-mUkM'%8)()_Y&EI#D_fs6rh;Jmn)sD>P1m[5M:0hZlaq(Y@1f*4(`2u;UHb/.kAk-Y\_Hf2BDSU-o'_XgL;E"fs"<3B/,e\LmF.[TAKO&e%qIjp<>I=!JYB5>t[@L)4,p/+)gFb/'J+PT_RaK1eaI6]@r6#d_c?E+"ppinkc^A&(jP-<9C\?mc^=)2'RbSA[N6[)rfC.!HmXD1S%M3j+,>ufV>[%8n:]>a-qA_m9h.c(#:[6:\Ne3HRI99T;**KjGg<",e)<1'u.-HNFmV,i"J/PW<]a'`[*8[$/*.;1S0=*-7AVq'X%%X""Ilng@5i^FH?iL8N(FXgOcRF.;d8\NR",Uhk2n;Z##ri0W/U?9_)@G]He5?o_!;,JR4=BeARo3cefc`DuN8,C$mdPIW?Q\<<na%\GEd;2gebZ_=HBkJXdXf#3l_t)X6SA!2;S2[Eng3@pdglE,MGt]I7=Hj13b87$dGTUMGKAKGHFqFmI#XH7e?^4A2^b5*eh[3H?bD%<O7H*gXUAJ.q+I.]0Z862;mD]@.8JVcC@?;l<I]J[TG3*&%a<Cm'pM)f?3SnLpdG<NUE\sjR&(-:]+au694a?8/C$)^GD^0+kbKF%3<q/$p0;+Xc$4"kA!8'Yf"[.sS<faf:r=3t%]L[KWK0rmG'RFsb*b?SWk9%M0D`*,=c>#HT,lQrGi-a0rOt=^X"gdNlIq-@\mGBj%bDLGUhl$H!SO'EG43/0.8iu>e([eX?>PrN6._rVQJGG/lHPD:dE'9C`29NMo>'=/O"q];!Ihc@_IUtBeR1.Vm;up%OE-0%;mTB^\%gFB$@AnN0$)27pt;,:9[^/]]#,cR^Cm&70=?&jAOeB@X.pS\-E+&Y1$P)EE,GWKH%Z^uKWPcpu(g$X8;?i+\Cs/SfgMGT#C?cq"!%7^bTfb,7GopgD[PoMRkB&pq4kmiIhd'qoT!^QbqmIcQ&cb#e?:b!%H>CI8gjW,;!Eae2u.eg_+]\^bU0B1(Wa^O]@)%I@o0rpKGp%T3At5koSNdL%kFDUI#,A<qj2W0=NHQ\,+qTCoI9FIatAnW@-Q_]m_7A1:R+FSIO-8]mdA4Eo6Wf<G.%sOK6+`orCs321U&P[$%Hu%c;!t)TD/1^:Ta6fb5:#\=+..,]l!g!\C[p16H'hB^#/-W8>bZNc0oYU?Zj@ka][!XX&HM*W3l=JA+fM;Y@"]3A!CU+p\InIlIY&&%<2K?c<P,gg=jT=hlW9<.e[j;7n,)ka;"J#n?GGc38GrSElW5*'a^fMfFg#.piG:eKlFlWY.h8L'\,,3(B=R]LI[t1lfj"E<4JdCk%VjMi0WeFS#Vn;ADY?t_.-8csr9BuO`^ZpL<p57Ashs8lp^X[>)?cP0.pUo+]H3'3Kg%rD6YEIL\Z',E4Y?uEo\;0tVqDcHhrB@sp%lQ1q%p$9;[U\J01l4@r\[V]sWqGgbj>4^VN]meM@q@0;OX]p6D@r*jnqGkS*o2u4j^"9Ia<kgidj6Ij[UZt%W^(8[aDtP'jI=,=K%ko-HYFPc?8b>ipM$.IeFIN?BCD7BA<'gmE+l^)Lm_H[!,;jGqGR8^];HG%k5b09\Z=8`#Jh!6nT]%?BEqUMWnmIsr%[$R5*UYkNH%^YX"6$L[T!Ikc=sX'aW[aP!LicS\Ku\,'*pEn8^QIO0$YQiS42m%3tJ<@9hM?qU1+f<;8<cKhoJokU/]-gG\_htR!?k#^F6?GAD7%eT%Ws5M:\BHi9sg7&)*Mg[/=^C;V`b,kcMe?ZeYN9-a1TY@$t)IKfGt^$bQo14n#1)8s4;F`!NFme(@nAH#WEb3I\%me*V]%UH(o%CZ"GZXW3:rKMZ6d6To74'gl$8d$aEd4'0QFNR-`dmq8;!7PRQh\N98p]kfDNa1Rg!mEqDYD/;H,-OY2s0W,_=YY6/gJVpa@G<UWb%'k+unT-j#]BBR9A1u7PD1jNd3k5*fBGre(\j8/H(m+D5'pVRC=W?4gkr-UDHH$;6^GoFY#:Hjbe*#X3K4$!4\rQX-=rmtP,o^.D=%X(,cYDn!b_IpUAX`e(\SIh0E&PO0GbBA[l]DOnM$j.4McJ)A#KYI;0[rV?<Aq<l8XMnA]g)j:p?#:n8e^\@]a0E8\RIe<SRqW$#k%p"8#Un`st7FElm;oQ"in)ZBJFo&KH6qrrA%`Pgcnd6HCDrNV:2lg#qiYD/shCqLU.Q=$4Z5<AM(XEEjNU:(!g_n*8Gi,ZllGe*G;%qYJg-g$?8BMrQbV1HS*opopa)>l;2l]b'RY!_J,Lp1CG?%hGg]IQW)[Y'bLu.$+jC=C8XaF1_9grTX%P_UF5!eeO9mO5Tg(h`&N4%F`)PEJ*r>SSUA+m&aTpUf\)]GR]Fa+mTXaSlJ^CPX3p.Yq=<1=[i<Z6^V,'(i5H46"Oh()W0$98g2+:tn@*4ll1LO.ok1VKf>#&@%:.>9I)c81?YM8ke--JL0`m3>C<L=F(Dd@6TXegHOlgQ/>Dofr/FM,!lbCAD&c.u-sY/eFqhq$fmB<RW8n&B.E\:&]$qV-2aaRV5:%kq):!Y:2stTX))t@01pQ9Wua#h5sIh5'pnFI@Yl#o':8?<k;P;*M<:iXgu-O=m'2aAB('"r&Y;Z5)Nm,=hH>tEoHT5IBkr_A@ICt%IkXV^aI;_68cDX(C["ar3Btc<$6R%YMm)nKZeFp1k&c?-\YG3-Ip5.)r3U$`s17i4l-]4o[>]G_44"l2i`l8s<;)*4Z(prH)?.u"%1I(9\-g=FOloREI^8F1tR3-$2TD_H4fU:eom>^Lq_mF9lorqQ&)df)TkteXRIQ"@k/[Wb?D;akbW)`\(D[+t!/Bm+4/E$#g2>:j"%lKOqam@1"X+$L[kpQN%.0$BJAGIj<o,E%57.#YUijIqo]\CtmkFNNE;q<+p*G=7br\WqYnEp$cA4`f`@GLP$!%j!sNYMsjmD#U^%%p:"\`O+(kmj]aRT(jqiZSND5sE;mnsq!S"=2=G`=nKs3W['B?d)[S-;W1E<XL3^%elVr%J^YL77_JU`n8$Crd@sr(ho\Jf=PD*H*%MocD%m.E7!7>1Iu/\3p*k6DOA(>h@KdR?-[YM@.Y")I>g-26S]/8lrkq.Ou4cCXsABA#f0cR.bW:Nk_BcQ.FV(?9%fd-^&D:&[3D%fS(L>fc0WE9>rF]gm^+gSpdo-^V8FdBTC$\g0RI`o'F<>r:G-a4Wpdbhd64$j'90RSjYperf-J+]W%_qATdlhGk1Bb#?CJH=DYn*%iRt-S\)H"Rp?V57`Tt"N1TPFPL8WA2mIZP.iMjR&Xs#Pe,N+5hA>XDY<RqukG]AkKfZV_m'e//NDl:*?X<aZr_4J)oK__iqW']J8%n,O7#jofr8Xoo5tg76SeiRfMjFnX:kLmA4Lq%LV`cI-Hhes.S0N'5-Kj?LaHT`4dmEFOS#bXsc=G$qTbXgpl=65XUT$!fPG0lM6Z%i]O+n+k$#D'8LDMCes)USZQ%[+X1mf<hDUj[,g3=AkL?%0Sn#@cUTV=o:eb>66-(5e2/u:=IKG.?h!Jp,@NO^\\0==@I%e8p0<\n%T7D8hmKcXX3MU@sIBfa-gqp4>h,[=S[a(t]7<eUt_rGF2%IITinEn.gg;U+Q0"e0CVRQBnO"j'=/uQ!%)cbnX=Tsn4\$Rq'n%78b%CfpHs4LRA`RWNQIYbR-<\P*h5qVHt_d`=mI0'lAQf?X=ugk?AhFZK23Aq"_<k?5U(eCOADPLf]u\R.!CVH^&o>`PAWf#jIBH]t'X%Q4f3O8;ng#0HEA3-IhkZ:)g&5#"ac>"fGq$9J([[3i#oQk;-M=SX1pd6-F%_8HCbtH"Ms4SNE<b4i\eL1GZb<,8eaUqfr4+XVKS0%^78EV6QrV!pHNYgpsFqnd5R[dnp;=ddisTOgK3V`I*F9qoAau)#TpC2O?9`-/@nH>@*+sW41jMlQU%Xd]5QP2CCr7lZV4]5YjQ>T%,%R"tao'g\Z34*9m7X,8AoWkXT/A!+O<iWt6'bp;2VItO_lY4%p23&WbjC&D<"82IC_Gt0X';p8QRB8j7G.Od*;R:;m"=G:krsVK%*D]^u\!@hKV91E>T2)c)W6mn@XJ6.EMVCK7q%!$VcSg5CkYdTh9Iupi0kBf/K;8,r%3@^`ajuHVqU;+DI]kK%rr2?`>[NsmXELYO%"4SW>mD>G4s#Es$h:9.I4P@<5m&(5<-GH&9:VsmdR4dj#k)OuN0U$b@'jY@jd*]h84kksdLQ?XMIFEoIl.h<)?$m+M];\I/@dpT(%Y1W]a\6?/KY(P[A_u'6^`29in`QcKDk43V?0[S=IC\Mc0\W,^cPNKFKhfe=r0lL^t>MC24;ln.Xkq]<!h2*a^LFZEY`Rj6G?i,62%LGt]s4nmr\34O)h89U'U]@\*/Rd4`-S$VE]ZH)An%<9GU\mmF@XCDr?hDef,np5<$:<0U'h)9I!B0&$K3gSGsD&TtQ8f[esT'g;$%U;c\u\?c"d<6(cmCi2`WC#gaY*7$5oCC%)5fZIr>q`%]G]8tko<:&B!h<itCpfa0ONjB#Xl*CpKH0p)Ugp@k6/aR(qmJYlg!>TTP%c^VqVV8FarJO'ib-QoQ%DN,n-2oh,slj5^X4F[d<K-*i;LitcKm#$h*@V3f1T<@G+-82OJV>b?Ja:`WAO<RqnfcT5._o>gTdrb;]%mHG>0g<--mU('lH+6Kjn>ckB[3]i7L/cTCAQ+rN:l9t?B:u0Djp4j_r$InH"l0LYt=G.!rkLbkX[\fhDD<s=%\d7"H`f(T1C1Wia%Qs%4+cXmiOmr$:`+0W,BMOBGWm"lDPlA^Ki93_C:Jq*3&\*fH(@`T4UQlKs<P'"X,Srj6JPnj1Yq<7h$-GSOm7rIt_o]tT4Q(Pnh%bN8?Z6'TJm,A[BV>k^O2@(>6EId-RNg]4r\3o.3&0?.m^h1bZiVn3H]I9ZLbDI#DRp[mHt6>Xi;VS4Ou1jQb./"t-J\$a2o\%Ps?%i3Ma<%$%41o?j$S4h_.W35]?+s#M-FYJ=<LpMlK`\snNRloSSB*^A[l#/NFui@AN;*-epH`$OfZcnAjV^o[2+F@*_tCEJS>/=>st%*BG(JD#*,ZPN7K@?G\06I5@3QlN-gkS_;&+h^+n`9P^[tBGeJ<4.FeQZFop3p<M>^F7.Z$X+r`\CSH)a:e"l5HCY8oot<qCi[ntO%pA&Xb#Fd^A,$EjMo$2R^aI=^_?:%XjP;j8@5;Ki/k=Tdi2L/fc8t(Y30_o-m!p.OReP=CVkmC7hN*Vhp0.q7::Cp9aIm0@.r1bj:%6L>W$QtH`$os+a-I^RD%ZF]9Y(8d64mS))l2NZKk$K3"XO,5kOB4.^:s)5.S7ZlU#LE\qijo<T=\N<$hIX1nXa01DpRDu#Ags]oE%]mFa>\UJsQqX4"UhQC0+hu,RK\/h"[RX=mSjk6u]?TgQd4?4FN;.Ma^IJ@M40Z-:r=_R79DLYksr>omID*E3NE4Gc#g0`(n*rYe(%GB3dMkaTR/T[:`sP<0lHiL-=QjJQqRS&<^!o5BCs?L4d(cWVtA"dR43?cnTTK0LG"c[K*5$pV8Q8aBFZ=0Q`](QP*4>jXX\g59ea%UWph$Rd6:^^%Z<oT0HLAKp<6+$Gk"!mrhqSaj^VkI9F=K\]k!L]f/(Frp(I,s'^.o2>T3nIGB4EnF+T;a]@Pdfr+6b+H*KuR$DBb%Vmf;2<G?5iZpdb#8,ms;3A\CRmjIID^tgr=kg%L5ph(L8fc3ffRSZiIo]?SHobfTRi:%0TWTOmQQ'7@Ik?<8!'kE6Z6joC,_7Qfk%=qNQ2$@c`JnY[.=T0mlm\:%XTIb;(an8II\)tT;XPM%U-/5<V)%XrNcgDfI\(sZ2c^g/Z&2R\gb_T#4VEb=#2dl*1gXY5m%"T$Z9%eb[_XTF04=]X(#6[;!#U<N-iY4niX^A6ge?)!a[ff%#qPATV9B=]\6OhGg3s>DX0`a\pQrm%m+ebhlL=*'fUU$r=VZ=bEeY/s%c^%GmU78?)4JMlsutlkt.BDgFMmBiSW>,')*_VQ?[.,O&J+AgI.=Bk+inshoGcfTCSWQbGL,+0+ECc_<R:4:T.KB2++t!rS"l#Wm^i'%1I'-K(3fDug@M%<5fO%N0;ecc&%e,K'=8TO[KK%a(G%14-UZaZ0rfSe+G^lsMrFQXQ#C;2:U4Sn#b4kDk=kM5kjmc1>3VEH>#VY%%5!Md6pWAH'W?8G9XJt9`ZPfE\$;[^9-/c/,k@b-8.2tVE0@r#<2qpf&SrTTIV"Y$IW(D/o`1%gnr*%9d0tf@=6kfHT6:bo3)-M?m%;&Y(u)-L=uA:O8k2m(O@IkK?lhVP<2Bc"N21>,:T\f)LkrRO.sRWT]9qIIbfYKd^8@EoP@?jJYJdm3WZc%/NQQu%>+gU<As0V49&%R,a^Oe;WjTS,.ht]3Gp&J@k`U,e1[sR_&_^1u@kt0Y"Bt5BG3g.OC6rRQ\i!*j=G59c)c0FqO.+]hB4cGI%*fAdLY,]19sU&5#KZ%@--Fj="Zdje7BGI-[\oI_UN72$(e6r^!+K?-<@>I6W'4\f-SL<YR`L7N-!Hr7/Gi<9Oq2/4\F9BX4bI&BbrWfcl/=OI_'3XMj<j#%#'2EW#]ns)+(L[Tj2u^kdB(18)PJ[P`a$8gYd2^JI[eK_].80PC/Gd'P<Eo0-Z@=A[T$c'IU2S!@:j+D\u88]RFtgMk150tW6\3`%haOjU2;G%[',.6q_^@*Y[nt?A];]DDU(4\B[C`YY/7fE+Ztu*I-g;h"csj2JOc?K.[SP.B[@Y8N&[-6L>GTS>f@j_7Z^U2Sl>X`5%?0&IcYPW]"^Hn#G<hJF8m]f&uHYh!mG8c05L[h7qdr=_8L=RE8F1ZMJVRQ%]4F20j^$*(F@rTSe:0&T@Xb8LZcPWUCSUNM_e#_C<%R0[(924Q_I9hoZ8G@962,Lc#nc[Y1K0i5GaAa.l>%W_jFq&cDF1ES]JT`%)Hcd'IuZ;I4pVe9eX.3$XF=*cc\\>*3.#gK6GhlisR%Lrcir.iUSGok\@tO#l<Z':WZNC-TbT$Mo$bd@dt02dc-JVVC-lTBl\+>G"Y([FLmn-A2,Xer%.Vl;t(/dE$@Rhi=h``04Pp*a.r%%VmC*,M(c!8Bh)HKlAiWKC\9()+%2/jAq]m5K:Bp1]8s+I`EdEFC&$e#_ITo4P98Zl-b7j$>3OGEf(O,2mnV/kM1<T_'k_Z1!PJFu%GIOpTnX6N6IeEK4,0,ZtBD$Z(0s,Yl^,#Z;=dqN90Rl)II!"=_(C)%Kd,W.nD\$dscF5[bkT&Bk0n"P@ge2kG7jlKFcF6:k^XJgf%'_"1VkOO`A\io"Pdj\JNp`JKq/[PjfXT'f`WeFK]o!&F\=1-DT<kPCGYIaOZMiC5d0nbPseh0_'@ACipR'aLh]tM%p"9-.-l&T0f%gP>g"?8q3orBEsS&-!+!+kqj.*8a8=L$%ct`l.T0O43D<HZEe([*ZYEe*Gc=?cTXj/h[^<ru7Cse)$#Mh.NcUo0`B@JNWgCBL7G`%*QZ_#dj0NF#;X5ML,JU&rjVWO)L%1?48J2R__M<RCKP1&o)!q-O6?)SDe]&46f-1JThf$sTbG*8VI9^YdgiL)aDn:ni-Net+)-Y%%Y2tDdju%S1Q+;QK1CPh$/RDt7dc*-$bH[n_DMFkJ%B[]u6.9k/**ZTUGN`9M*:t\`g!Z#K4%!\$CgU5_%[qCu91L!)3,X,1oj!ck%h.H#nrfH0^\)Q&Vd/:E<q/.nI\5>'O,P:1XK)c!nh51p?kY\o$>kAjlrRaDsphh(^SigRCUEC=Uq*?h-CmXTN+\(J'9i(WIH^6>V%QhS.k)>Z)AjJ`thiS-,?&2OT]^)[F+&iFNo%jrD[@>LbAjmaAeSfQ!6^!IkTDE*s4oONXG7@C-68D<E$f$gp8>b9^B6YV`a$YB.O%!:u4)=W(ud2e<S3NkWlV[td#2#)d)%d6bSc`N`+nPnD(_Z"TiD*]]65>)Z<IY0IS1T)9ld^5rp?FT^l*()E)>R_BjIUj?Rj!=.cp%\K!0'9]*<'fa3]*(=1sHXAJo[*!8Yh[>S=JWORNG"@q$-$j.%#F2MU+@H"$f-^&<n$ff;PaQghTD5".MUWrP&Nf2-qGYQf?2D:02%MWHj$n]6p5a)dQn_%kD@8d:u2]Nt$_o@B:>SV'HK,80jpC19`B9G:-Oh6]<Uj:ak7:+.r\Q&9*.UJo@$Fn,!6e;PBDW%B:c5ai8=%OAiEQXomgCS>IB1I+(i6D%'$+g*U1r/EnaP2heg;Y2=?].-=TZf3t.FaRZRM@pua[iKRosMO:Z(KQ!@.'_=>gl!VH4'hDQI[es)\%Wusfj@j.-g</>"A4%He;P&2p!j-Le-KbV*+gW3mA&Q.W\l`P2L+</;-iau`A+J?s%NC&DaOVrDl,`BSi\?\M/TY4Kg]RV?Qe&?>r%fP@WHM-t=TOA.JQfsRu17ee/]muc-S$4E"#lNc)c9sQ'SfB8<?bUG>TGoVb*b&3nDqpQ*?YsKuYQn^q"i.+?VRd@V_A%iR6D40RK%$c1rZT)!D2=4seP+LI(mf"m]>jYO12X=HF!b.K9]f55peQEACi021(dOi?mf\4Hu.Tcu"DIg88Q)J"6dQL$0W6;oH4,dc[0==.O5%[X$$cAAkd-j3S0-'>Ef>_48kD7c6nBBJQX?1%ssOECALbdXqp>Q_"&0bM_*k/=nE)Lf=tPd[/<eT!G%BA0GN/Ts11Ha>OBZ9o^0u%'tll0l,b!1rT"EATnl44Xli"tMYrbtO\S&beVt`;A[Y?id>Pr/*UXGp3/_:7X,p[X-+k*!d\d@b0+d!(/s!Ob_`6d'Z8Nh0lniQQ%fLL/@['E&A\C)X,9`'Z`4CbA%&N99Ud$<#"0=LA7N(,uP#gn>PAU.iDZ1*X3B7p:sRsRLWjDQ0)Q4<1bng.-aQ>@s_<)7\7)i:f9%C6P8PW2NhL$<tdHKf_Cfkr=>979_/Jc*)t5$M[T]Ma.pZ+d1UMLAmrU1;aema4r2R"fW\=ia\=UXE*ftN5tOpQS!#YY`/KY"tPR+%QHgR=Mf?@B3YRe38c4Nt(\p<OH!hMZ#)+Uamu"+V4X^r'HP-`,]#)t2-1]kjBc;h+P(@na?D8)Qo9^!$n:VF*d$WS9;6"sS@\IQV%Y)GIS;s54#\A@N"m)un-::ah^I?%K(p7CU^5>a;3,pLtTY&LJ`Le^0r?MIZ!\H1cVSLn]a*k(AQ@G!csXB+l0%$JU&4V1.EKQ`UH%"Q;l0c@A9K/]oD;$'oER]PO*?`3`W-19JVUT+X0IbH%@Q4?oO3"VX;BWotOcD>9PO9#_Z.6Y\q0as).FJ`brs3l[I'G6F1dDgMfh%?n;&Y5^j7k$REpYHVlUFnjmUdfJ5.r0LG]9,S8_GEb/K"P/rF5Zu/9dbGW<)o0UuTOYDTL1!BF'^++<b:,+81D?0m(7>WFO02!^_%7[R<=Meh1GC!!=We46aMI#%gVa0O=-<fR?`al`9$Y=05sh:tt6WrVb2YrHAu!\UjR"+fgW3_V&[YRn$B71%&u!siuH;@#?T\eX`\%Jfu#.L^SJc`X\XMG+e_CXe[P%-AgD&,#jLt=]^`6<le(`(6Pa%GsSM@^'gNsm2j?XN9m9-m>5!I8]5B'6?j\n>S.ScYnt=u?H:8F%ZNci9\<5rc8=kf(lVR5qG5"FD"eoq_L[69&#,-i5OIG=6aCf5]Ph(Bh@`+RT6Wn1Zi'[f1qHTiIN@^'Ve,cHfJ;BpcYnX?0P6OLJ%a>[1l$PS.c\6cP;Cm;_dXf4qoq<Nim^p]/<?_>Nf,;[@G<jh-`4R_521.Pboq0]u,I2,8T#UWbh/682VRgrXjLIbd$"9It2JfUDi%4p1s7Y[T-h"H8*fj9h#[X?'HR,c_hNi)A%`_?>uO7[.`W#Wk(&/9'C[;^-8C4ifB9I7;Zn"6&"?Vo4toOuE(KaGCTm>^D%>#dA$Z%WNnQ%Q4NT7Vq):/4mXH`,2**;R&l#n\i;Qlc%k.p7IGs?%+o^\\h;mXbX=f)01r.Zi332qf_VfifOE;JQ\C*4kZN;Z[V<R.ZiNS%%CZ@?T=$)@o:!kiS/!'lP5i*-#^ikFL8L74A@b/@o'8[F=Fp;.Wo755a!@E`jn22%+U'raV_ZVSM-4G&-appP_-MepPGK%(F+Xu<4%%42&JNL;*(g(Wq:/Q!5JdYX-A!KSn^1W!VD^`u&)dNYNelpU3nTo4gU=#`eV+T@2pKRq/tLkKh[Ph661Hm#UYhajjdf98E$0I&to%!&GTaYpGhA><RKNl.gJ7m0oc?ZW2S\*i5;E5QQ4(HeH7I3A>Y_(SXJ(\BkCAms6emp`46\4=7*W>F198`nZg,0m=G2C/\6EJ-Fm)%J@PbZfP#ob#>0m!(Ce[OQRtW";'(u]*UV*K]>WlnFJnVC+H/\$?n(4.ZYD4gLLIt%oDr^JcBK3)'<XG#8JO8HD&B4G>s0s?Abe$6%3oAaOd"Fp9"&B<TglQR)',O>hNF9q.m)-ur[2!OJRUH&dI%V.W/Y+s#-eJFKff$d0-fTon(*C"KW`'L?OCeN9V^u&rkMT?CctaD^%o6J19[aXmL7c4=Di!:l;iuG``KdAcSbRbpN4!q05;aj(iD)T]R.;dO5nT<*N9a#GUS&ZM[.Hi;U`)u_A=o20-Ygqreqsm);#$`1:%RH%[JajQ#;*q3Io2&[&^$-T2;,Befh:58"kAK4%U86[(u-Lp&_]!QOsMh!T.L0P-SNo"=0>[)OWVPb0O*qcJXM+,3\$o'(`%\'g[%I?f-V[foh5^(s`VdhHd+Gm8%>(2lUp6j_=QLQO!:Koa]mKS4GTCW!'3RE97(JuSO`=05RU?Crtc<]]RMkSWPX*lfC7,`WVTA&A)_%E1l`,ED'gGAS6h)GA+mOEUO<Y:+jB5HruOCH(YKA_ESJ@^k%ZaBU.OEeF=&C`,i.;n;QB23WY"r(i3%c$j71LA)\pZ8juu>g2o#'%@Hp0'n/2KH]I/V(B-`*$%$]P-L_sE:9,oHE6YS4-;2,]EI*YeiJt^r5X5@uPkG:U@8)QTPe&/io6(dHmN%!M$d[n&-,Rr*SZp_-'%]GU41dh*>Qit5.DY3RHFJADON7EhZs>ED1q[ig/?0Lu='c/gaTa:T%ZFs7b0>F0Z_(]>Jg*_ur6mSUhQ[`o7TU^4/\rmjdQ&L)5q%T-MO!YPO?-*OFdr`K'FNG\K>B,>K+/[Y<NgMbDmc3+g(FOsB#/+Md^m/I3gV+#XI&6;0'9!f'"=^8*Q1%F1Y0/n-Wt:S'$roEi$j%r"sEt3q22T=9S,^7$U0&$TFXR&$LM%i5EJYPnc!sbcNJV-`1aET@e.qGf(`0$cc<2&Ss%`Z#"R!BdJDMi^_bA'uUgoaa;aD=K&P%%[NW(m/G4a7#9+CA4?ub74qZ-R]n[/lJHN8VpF.4G\D8,+^<790&h"a+)mNqK&BKY0LlL:!eSATW+%$<$WWnR[+qrJsh'TH8l"(2%%]RZM;/ijQ*Pl-[5,M:VCZg%ZC#*+tjnKVHJEK\FcDFC;>;s4;2"umEl(ODQ#UhJ?[QO$lI.WM,C^B[e\glUk7#C(tG54N;YBE5LY%-<2R"BH(tId'<U.i:T,FJ["A=0$"0(?!5g3()XtjGoq,+JG].m/MRNKF_GiS&fM\mg'6m+`h$V,[[ke!.AT28Zn"3j`od9<2Mu)_%&5L:iLWXC_^r3^<3!g*:1XS%GeeL(g-'X>.6[Hg]N#:1SPWN<dD(_Xequ^dk;HkH%"5Ged-0lND_2`R[mfBG_J&jMUkb,'Q.\s[M%8rPp%/$e_0bXR,066X=1%,]ch0BmRG^L1d:>9#**%[!@aoFr4";IfI<R+KG.\fd4OOf*hbQf,`Y!8\*W)lcGq2Jt"2+:g;*@S[ZP%KP(B^Z!m4=,h1*#"A3)=[QpYLQX+1=re24UIic3>.k]8fM.2r:(ka(u`$dMj1&qk)K9hqZYsn$e<YoD+X(FlSh(Aac=>fk?EG3-%%g[Wr`gI?HpjKu@LKI*:K&?p_ZC"\^cZ3so68QpMfk'i@'+Rn%uKt8?4=1]#r!F,,A0!cWEK-?.T#nVRuBe>h1EA8og]XLW4_ujuI%!q(kX&YiRR#!#)OMr/&daZPin_Slk0U<WIn/cmZJ=-WFN>/]/,J^3A3lNN244=#%Nd3e_nlX[m8VtEj/"HL.Y70AQ;H.1#n&*,\Q%G<.'ohDXO6Opq=K4=su-@/U'*&DU)r(h/085DUR=H3L@)E3tN,MF5o5!-*]noU^IL)_n]2r[m!#6cLEgLUU`c2de3'Cda=,^hfC%%n4\CV35VD#,<QW*RQ.ZS>\-IZg&T;67u:W8`5]ne$W68NaX-Wslktu05qL9g<BicX+9WG_lLs3N1h2&I:sKUpN-pA3>[)%W\BPFS%1!F=3j[#lHLd;U#nAT0n*WUm7;aFS&=;=T0:nJY/\#MQ$q%165Vi0V>nGaq4@'A$$!c<a`#6kf`_H;BFcFN%YZT+G]D]N46%NSB5%?\+-.PRe:gE@NgJKPEcV1rKQ/02@,Dk[3[<l?u'8n`*VN!Dq*`<B,euWb]1OnCc#4PhdiBZ`=[4fjGX0p*p1[_o3PH"8WIn'`i74%OllnOV@Feo*BF0e9F&`CCWK85s!\3=PUp5;JG<ST*>\Ed&QckG]Oe$SRb;/q_?]#K)9_[b^D>oEWUg7pDabS%A`+:eUTgA8G'o;s%gNgj'N-i(hLkd<(L\<nWeA>gVTg&Osg)/!T[TNSW7A;\G$Yq5P@K`5GF9e<CC;egj>"h=(Ojr$KC!5#FJ-nRDoL5)J;0#9"-O;T*%Ba[:)TQcD>i?N/"&N_]ld'CQ!!dT;<&:&k6`3r*>fS3B1Ya7X"J;juP"0a,&G2.$BrS-&gP)V&Q4sD[uKii]3'Du*O&T*W=i!R><%PAuF(k=XV3@7!d$@1>Vd7"p7`@VHF^,-E3B6FO!:+[um=R(Lq#>7?(>lie^f!!.e-BesIT4tK`.W/cQ@J=dt;69Z5q6R*m"'[(Zu%F'4[]!&+mW?=YG!liT,!9g-33/'LN;JSU>N_Q^aj;C3KY60qeg;ckQ);bG8@e.@B>3*ApZT_+Jk%O7cC0!Go%;V#\(5mEa/FMg.t%U(\-u.pD3d<e(kl)B?%20O-0i*FK:6_$rq"dE3Wi[5Dt4Bru(i0FLm6TZmYQJcL?R*^-_D=SOVc.l%OAV.kQ`C*PcX.hpMg^'rF/%?u*gbaeYX2lRI@aad`Bd)\Vp8>h\ll>n5SdBT"`Q"WI9"ahT&gWeboO>Sjia9&al$N4-0?[Kb+k7USn]+ZdIOj@#UE"#)c6_bS);%BS3]<3XW16Uc4)N&@mEU*9b>.OYN5D&L'^hm#ruSr*7JrfL&H<)G'H3l)MD]_e_fh,Vg@-ZoRbZ/XJRp]/"53M@@9)iN6.M#DJcC%KCLrcdN=XUV(K`HT4mL]q@rR8m/(K]XadgoQ*dqgPk<ECFiW:AG<H>,>KB9s'^29h5Yp)<LlP=d)mBCBS[Mo;U/7do>A_f>#DY)!%$'VX4IMkaAQSogB>XB0%b"3PB$Sd:o<_&RDoQ+_N3iKE`beS;+_j$i5K[q>)6jpWl#DkP%1N<hr'f%Z1,Xj$`bXJn%O,4lG5nuCF%]YV]VOag%kA(1`X2DPcHi>=5cTYrT_l!laGVgLo44_Ah*YT2$#ckZV6/]Nq_q+F6nYr]7FE#RZ`&SsO@=H]$i*#e[^BMn7_$<?Qm%f4_RGY!O'_*T&Z@/o1o_&d8Zt_&&IX"Yo)m-5mI?$V'iIbRjgV1:>IuKku)_>ln>k6S[bXMG\uq#\5.^%7(+MUh<'i$n[ba#5%jV%A:a\XC:J6C@"(-J'e+P2l,hYJLI*Pu1jL^>\V#_<2:`_f7>%EBT?KW&aWIN,hoDdZ"CdZni$5>)XrB)*BRg)>E%4M.I$6V,@N3O9%4/RmJ!Zh1a8nbS"E*M,5e&^,q'qONBCgu7l)#"A75QDBoK44,e+sG_Am\*#ILPlE^,D$LM\4Q9PKU7;/&(o&)2-OjQO!<@,ZOt>`%!E,K@VV9VadV2oNL$dV_lHhenq8`8D*+Q%lZIoM/^e.O$!t,DI/T_`D+0-XL'/E%ePZU*i3=c`lUpl:"SO\Q7rDQV0"a(EbFu<'W%[..ujRa!Y\=+0#p8@QeV&6+?Fbq'.K$YC=,P\6M0dZB[D2G?/GK=ZkKD9rP7<^@bO:t$CQT(ki]Z:X6#MKE/ZJn5jkJP5!VB#DN<%LC&?%V+Ac9D4UjT7@XZ4&I>M\B1U&E]Epn<j2HA*AjCsp&J>8Xr.H#BclVaBs(f!q4@bh>S-k44>h`MQD/`]QplL=HBH]]p/hD9<%()fQI!UlbB^*OG!6R=PkHruI1"qE$jR33`.P@PYVfeJ"*/0mnuVQh%Qs%".&V1#:bpg#>Z+A<pHoI1TuX.Y9f]X/0CP(=4!5TURt%!.mST_.(OmD^ip:9Zd8L;$sXd04WLNYlUc\):&qPoT-EqX:b#A%&=)R'-V;b03AmMEcF^9Y&rN])*JKEr:(=TpZY402A>6r*RTGF%7#mrko0;`9C_kXON&soG/Ilt1(`8G*^IG75bSlUFl&J"IY_a2?4lsJ:%&r3gHYOgIq]L;[-AZaMT_I4m%W$n+3X]m;p]tal]ReF"%.NZ)X1nk1g]"[_gS7j`]E!".rT]&,36i`2PrWSP7U('*7f/4<ghQf7l.LmRH4"*W8G*+WD"^/D\g<8<DTduo&fTlhL`=Z/TSfoXi%rRfC.(/_b)MDBiRem9&u'@m@t`--m>[LE5fc4Cc$,>p;N#TF_9/g[T9Bj`>^fX*4V/->0s->!N6l;m\>_EnRPa?3>Q(1G212m?CN%=N&?"5tD;4,#p`=$A4SIa91Ac-%lG,AeT&u&XK5K4JtX#(3*N2AX`pYSe/>oKHR@U1_i!L,beE40W*cTW58oW*"Z$Nfq$o-GT2MJ%Su7:8"a)H;+aP3PggOE[3LrnXQm-6MRZoMdYq_qn4gfm()@rkS3Z#CK"sbF`Ub$Hi3",pT6!6;AofYQmJVmq!\tauQ1aia$mCu,k%#ul#R490n8lmNUf$ILcm=r?KDW41h:Z:<N+:u=K3Rn$3[V/o17hIJ[0Zq-:3QUNJudb9r)83ZX-\4G<TpI0uRfS6gmD(-"u:d9cU%"JllZI,ibHVrBt6MCj>Y*CQ\S[LFS$<c#0.RY%@qGc4H)a=8=[P[>Ob'&N_9LU$+Y8pq9c%"O,5GlfsMW*U#[>#ApfPmZ0le2*b6%^oUB<dAE9H!A\_I._8116#I$#l^3P:`sVqpD9T4&g*0oo,V;V$J3#^;[bt;!JGn)5[=O:hMs!clA"Km47;rFg_1baZ4A+F[(3rf7%c$69_&LeCO*g.:(#h/3Thgi)<koInmbE1:$32on*=>#]deM7glVG<3%2Z?3U\5?eH(8aW\4<Uc=A"N6*4%Hp`N6jjYOB1_s7-d>m%+T=(h66D.#IQ]%[kJ`aqd<T-tbI5ohp>K0PCO"'s_8_62jhf\</si^"fRm>ifri?6g]RWmY7\m-nCD;<"Vq/sQH"59fbe5h;PD6L%B\Hb5o%!dFlmKj`0?N"Dr=o,_PZr!dZO"l%]*)66n$TXDRM.tR1)ZM!+I40\5YDu3XRMq^'J]F:0o9.S6l;Li,"-Bs*6'SL&(5\M%#g%T2>/HYC$qi[(fQjD4$&qm,*bnPB)RsV[&C[Ob5VX4bPD5kaZ%=)REn7(h*._1rI;)^%E#N!B%72?1D59fIZ9qlMRMHag5A'h<%<iDf?YJEl,`sB^%n1k&Z)UX/6-+;,lJC%?>]#]jE;bb4VH'SqQTQW0bCnUW-g0AM.kZO8G-?`F#%&f8&2JiLG,"5Mo,!NBs=e9>;%.2&AH"GN)koY(G#0rScJ3$@gN6`iOKF.9G^f[q-N=kFF='%Hc3@;KYrbVJ,^Z7L%ed:/hI&WPq&8rCtT*A3NZ;W<4<,Po/kK*tD>%7?jI/KN,<4e<*?nK&L!(/JLWE19JjnD1D[b\Yb#qF3R^teM?EX53/sadm]ta<:oF*A%8UP!>C)s$)OnU###G[<?+BDAn5B(#!ab"%BJM=/)752R=)XE+!lZlr=?n2[/e#r?@H8,Q<#e9[5X\"P'uuslWbn>EE"'d1NH:#"2ddDP(WT"iL:4oQ/E:V&(^h1uN[(Aa6Z.E/%R-[9hAe$.A$c4XZ@3bpt"^PWCGTT\h!Ye>J<$%'pTbb>W`%W:X;a.^`mQ!T9*E4<u"#7#CgW3[Kg@J&,521UsMt$:GOjF`$1iXDT%*_'OlRf<=_PMZF;C!3`d=KK@nOj]OEkU6e3k[p@;,9ht&IL*<W(WufD>1F,_Tf#>kPlr<C![=uZZGp9DZnU-"ZGHhFYL.*[cg$+`%.!P4A0JmX\[Q,pGf5r5[oo/'\-F<!0anAZ\9Oe2#DX)=j8<Z@M<"LC4"WVhg56r2fY$r.L$d]NsaCnt_$7_U"@-TJf$Flcu)NZg'%#`,o;VFGUU\a(L`SKQ++9/*3AfDdNXgl@r8eTRNuZReh%d5L.?+bIi!J2@#r0l?_V@#HmEBcHDV;,9BM_Vcj?dm<=P$oOah'aPUQ%,[IR47Am4D$4*dok.><d-La\aC>/6>)9^N3Xf'NtF\4%Q?_c0&RWR`PS/X^(ef,SH<nSppa8-U\+hM%]4^sjnUBq5p:RhQ0(MFSp%,'o-3+JfBb"o+YU6?Af;,sYE:@6@q>BG'JE)ar#+@RaP/#4t8]PQt"/Fu7]C'[gRSY1e"`@A0BV&C*C-4;FQ!$=T&2cdNZaA=`k7%F#>_VD6[U?4CV9uUW*Vu4:`<EBV@M#n3"QfaDX<n,Odh=JQT3P:`Fp+Q+P5Vk0Q#:*`6BWg^?2i"S>e'9)%(_%9>u,(Bp)J$;,"7%_pP/n_'VQld723_K7Jg-BG(8<,.m+sRO'goOQn[FRWqG*0@[d1X98r;Q)OcM?+S+-Zn)ZIps^3)WhUW1:!XP2e^-M6Qt]6_HAF=\%5R%(Q1hD7X>%g<fW'1l`i!oP(fcj:!7X5OHJH(@_2^B7XT93t5ThV>C5,/;EN,?:K)9$N6Q)oN$i#XY"j-k@Bob^tdX.ZJrJN8ka%+c0qWnHBDtqS+/QjVWIZEYp[+&@M9lF!<nI7b-!#A2+Wd)FOjtUkD%u6DOttkKo)D4.joo%dG@s+u9SYWZbQN[om%_-=p/@?.]j8%Tk4;A=Yp1VZTQ`=$rC&%P!T2b<t(ip.7cDu^*:_O85c'_;fibBIKbmtR9c"o8N*sf2FKm!O7tn;TVUj&deO&8.6Ll=m)[BtDb")%%D$0I(7+G9_P-&RN]58fP@*aA!/6#,GMsDjT$)"5tW+ZHM$ATS'U2l9b@.?QVHBBJQc%8m*MHi>a.dFb3/(-`hVlH.N;HUA*Objo,%idb)^02A,0d(dK(14Q6TKF.EKT1VPQmhtVcl_8d+7_#(hAh5un%J<A";GirsU.RVDf?gG:Y_-qq<Y[;$PD]d+RcUM^?rEdem>B+t%+!>#$e]oEF:mT-W5lIbX/X0gYh(_3;[>%KYPdok7gb;#&3?S[:CE'f<[LLa3J/I%R"DKfVUm&UlY"!0QK%(/3g,2[S-KI[dM]rCJ%AH3C0)>!Jd<u/7eZh?d'cOSKN7#Up/6<=4X$DRFI?dR*jPZ$K`:"7`O7N9f1JZj)?4%P`H!/aO&?pGYG"&LoV:Eh/b5lde6ToEV6%!!-mTQjbA^e+*JE&.js/A`4/7>mag=:_jA#nG$!JJ[D\u!*l<fOKeAcE!QJA/J-K#3^2!.i7iddU!4#Imp7S5a-b+b+_4!X''<jb%;/+I;!X,1SI^T\g27>7bi?Pl0KF#\k$9FqVrCGZtBmIe]FB#_)@.,D\R%u92fb=L\4[@0da9m+n"6G-?@]6U(88D<u=_&ecW8j7d%*"5XTpr]i_;o(P/Qs]pdWCTI*$5c%(o`ltR6dK-?)R888LeW%?!=RL)8h1+=4u/ogK-dIP+X0OZ$"aL<%$>J0-3H_-aWa%k1Jp))%O?6W?gmOm/*)C:ld'CLg)K^To%`o*0_165XH',oDZjj=m<t:4RXFY1lTNb_/c4&i3o0CiH,!(Q=JdGslJcKm6Bf5Ek!F(bA.#U7/%5QJB?1n#VT&3pL+>E,L6_#O`OdV8j\[tmDXM,JtCb`Xk!S"16eU>+t+`5\'DCR@,1Ci`b!$#A15*6h_29]=@[[ku>kn=:taD\KX3%9na9!`j_(#KL>tc.Jme8EUX?>=JqkD0Ji@VUsoK9/BcpVVJ"=@7LY9ug@,P=57)9B'h3d*9O3GA4d3cppVpr.V/<0g;eLd:Q-;g=%aP(A=1ReqMUpNLEh_D)="L$0_Kbupm)+6;9\fEU"gs]AU6[p15.Q",aC(9Lo_.9hhPkHrj`6).G15;rHUrZTO[7)'GlWL439J?Wa%$]H3OOtbFkge0>5D6::$Nn#G7ZkQ8XXP(K^H>j;J5dqVVI'V36,tg\GS:9A2O/0LnH#S^Ta#kH]f@2_mcY!,*Whl-L%41>N9%PnI%Cj);E$tGMQO\h6OT>m7n:_NqjMY3440i#23)A\*i['dH5pW=J@(qTbtQB3e6BJCBX3Yoh#B_+*W':=#oBWOM:+0^,X=Pq_.iV#/V%VH@Fn&PHR+$4n]>6m7R'1%Ikk'>^c/CiqdBj?eQ*'&HYSK`P;3\.4[:Gh\bZ61W'fB>WD#i9HNU,9#G$;&1F+jCnsHm(,egei@Mr%gU#Rfg-%P.f>liOI4YS2/NEDY3#H>;7_$DPn<JVdImge(e]:ULM\0hf,2cl(OrE<QD._`LRL"%iBK#Sn.]]719n]!QXM>:_,fC^$%i&f'n)WIW2#5Z5D5r`(jRBJ.]WM.O')IenkK^p@@\38Y@_SjM&FEkk:l%0t9YV?AZObmA^@R?8j5V@eTCSKFPd:e(OC/V&E#[E<.%&G$V#mjK7.8];snXnHjp[T]s(A4_[b2ppfQ['Tp%P=&qQb7HV-].%H2br]c>(282U"D9,u-g[!o(595@k[Z(lp([&I2Tj#D_+H-a%X353)Csph-.oeF.pD.&.b-d.\YR#6Tco4<o3n^lu'#HEB*SFbWYV7DO7UfPSKb:'&QOjo^P(#`PYbVGt)[TqWe7fM\D1E^,b')2e%JLbt/"Btmo"0V,+SJQ!`SAH#",*TAd''52i#k^O]Jn\dY<Xj3h#R`Kj\3__KQ-R+_4AiKf86FUS$sZ(\Q%T<WaTshl.qVCUW"JHb%]+$'.XOBTW$gC5b+HfFXf.*n!-)8<lg*S'Q[7UmIKc_3k:>9`\M.on)+$&I3U*OHH)&0:T#XQTW$jaWmY`0jh@1C:k2uCVHd"ik]%J]S\76=sD2'k8O@/JSF6*#G)'1.=)QiZN_)Ln*NTH?>:KKC:'o)WA]`(Wr@iPXN#]']NL?NW13>*Ei6IlOf4D'ksJ?AhjeH^_RO+%5*Aqd!Q#VZ:.SPdNQ:WMRN6-O.2B>M+OtoeC(W3a&X88,4oJ,6G,UW7$t^)-LBho)*'k9k-"Fsn<m6.i?r#J70CTsd7m^-tVN:tf%'1c,2K8a\(T*A9f#]^$Q#[L5I8r<BEZ;Bj6FL?.XRDqpq!Q/*"JHDL#_FX"I[&sEWWe<j`Z;egHXsl1m=6,.EBEPi7PY?t;:_g/C%!2>[/WG<FiUY,0_&eJ@'^f#nuC5?kH$,aQM!a<hC2U`"qiesNtj4_pG"?3(Y)<#H/dn'#:27cLRNW`^YoiYs<XtLH9H01<-)=mm[%'HA>N&Z@C\4;qXMCfqm8r*K0NoO9tB)s1,8PfQlE-l,=0@nU>Y9RL$\%j2tr9lt*_=;b*N?$`ldaV*aX(CY'-RUkYSXQ?k^YA#d]%>-J3tQE(4j8]u.:GN>aR'[aNhcdZ"(AAV6&.'T/%`b:rQ&LHcjA5%000(in;_Bl:"**P;KX[p_k%]u(.EH;l>E<A%Y/LO(ug@PZe%VMS`ZabaD(R[oQIM9nFU'!Un=I3X>H,=I$IdDFNUDoAk<G7X'p2i29*XoV:o1^f77JnjraM7;3SQ4Zcs-k0ikZd"=>Dq6jmh5\@[%UX__5Ym1rlAf>LLC7PA'=dAHI=tXo1Bu5C!K/cOe=pE'A=p%6gOc?E!'dPW-.as3I=<SP[dQjuS1]pI\&\jP8*V<""S?['4IA#IE%b/ol3:b_%*(Q<BL,r<tlP)=GEa4OGf8R+?2"2LZdc]:GFDkP&M9Wp`EPK*\IGLU)F&XkQ<+SIX@l_XE"aiPkN6]Jgc.2c7JSA(n(%p^RD+Nb5jX#p7^\)WfI,&1^X2Ksr*-)$`[,S4m*_&u$)2ogj76#Y=:mD'AN@OG(rt-'H`rR"We,(7:^8X8$7$L5%^JLDpi#AE>$:%A)uR'1racn$6:R]J79Bog-c/31r7Nq#p6lU-O!G9,2s19W86V#[tH11/@*M1P:V*das4=qqB\bm#MNRr?BU"<=G%@c2R:7&F.AbU%"$>EI&>_Xl.U"qo8Hu$L+X/lg$6f\AKT2ad7Jije6.><j'ZMi\M/6Bb.9mZD@iPd]:RtoVeB-FcNUpuh;Qu"3EK4Zc$3pW%gUnd<%T=HOI(W"B?8qDp'ZnT$a@1(!ZPhRD,_T0=)29\K49]>S#S1ie[#u#nt3)nf)Ldf/pTrfes@b`(;34oG#nF2O:(3Kn40f&lJ0jmb`%$,PDj:)YH=Kq=&"MT)Z$"AYZ2cCiGViZo:i1VZ$j:9I056.Q6DCp@jjS:Z%u#>t;ca@J&.UEBD91[u4DFPuhF8_uVT/@:g4:B;i`%8m18$`Z_nK/3QJQi"Rl(d_dH"0n;W1(!n;MenP<3]JLIUHiQ)#FrCccn`LhR%@bu3_5*$@->E2WH-d<=0a1IkK-X:Pj<igc'Ku$.%#WI_IE;?S+c`L\6^eJ3Sf1Re&/[hrfj0+i&OpA3K1/uIr4=UOMM(J5d+C]prfJq/BcN8qiK1s4DV,("O-o0cAX@KuF0[e;-,'3oh%^.+h?]`Y\dneZ*0]c['mUV`(\H`q*E\CS-Ph##10Fp6LoZ0'mV:]YDjd"SDLZJ!=,H@uB_$(*"!>2#d.^iGclD3:j!aFq!Q7r\g"%+ql"Q4LE@-P4(PM)C7?mmU/PpQD8hc1gC,W+P4]m^6(_qY^&K=O3SN6$"aEoE?3"oOi_CX8mU?JD*en0/7[*P-ttpOPgGS5j&f.`%V3((X'o"oKB0=j0V(3VPUgo9V0MSZ<?"+HqiQb79-oD%\Pe$iBI!BBDl2pK&K&34SNcdZ`ArF7/.K%Ihf1oEnV(U+$T$WWu(FD>l%8]jpi2CICXe:m"CBk434[^E&,Hm8-e`!$ud_%fV"96_Wfi[f'eU#7(l$#pQrd)2%[ibEd*R&)C=#[P2u[[PJ!q,uF')@XidZu+3g%79d3SO`IW"+43n4'bb]+[?VmIN`'\F+_3FWR8RiFj;ubU]VjBbchTnq66%<(6suH'`,c2Z:kC\UYme$&>jQ8Q/:eam:@Js-a.*XV%!_rm^W,/00[9sfX!+?n>;,;9X0]rHs/-0C0"nHGG;n)X2UX`tE.RccRGZ]2p)a`aX9XE"_#BDgs6cps4:%/Q:d$</E!%1+5?^rm.%_V*!gRg,VqPO*WZ64M(<dhO*u4d@TWXFVC$RL1TY;qQZ.iSd2h6`f@GY!ndOSq%,&iHn0_SrTM[KTUqM`l]!_i!C?uWbZD<4lL#D%WuWOtpCYc$ngfbLEBR%V-GN`Uk2*HBMu7<;WV;5Mj`l)V6PttDGrVEChRea5Ju5-/,i3;T/'l^g2"Nm>+::A4T9W`b2UF,NU'-qk%%*u1D6*U^t9dD2aeOOT'aD4YB8`G/S!"Fe-!_]%Z7Y:n5`NFnSZ9?aD@H8_[pUYSlC8eZWJ\u#)GgBER;,?8-1^//&dP.4Z'?b35%p*sd6LeA!O'UD:q^`@L[^;:MCSOhO,o,`0*]0=6i4k_7`#ghR5C5qhh1LiQ;^hc*SdY.;3,O,hYLZo28Rcl4GmKfkeNMk;=Q_92s%-lto]K$M,#.+<].O-R.21eL+\VLFL]2Ip3PfJ"VXobEf!/Ot4\mZjTmBN)6e@WPWgW/C2S!)>5b8"/._VUJb<b(hkrcG:&Sf,=.6%anq[O)Ls\Vr)u&+jg;B-KE6>Le.&WKgB?Hj:mEPNOqt<iG3(#App;hc9*&koUhGWd;![_7ff28Ji9tYQ"C[IFc_[EX`c.(XZq0BQ%<,Ep!ps?T_h9^fk=eS=9jfqrB1A('^VTU:%G?mDh,60e=?q$a492h"YGFsUOdKWp\G94I&k%3=/1oDl:)0;0,dV=D<%3-`].md_T%M$]d7i%n94FS7T/@=b[Sk;Z.Un9NG1NF^%.ER'FKHmJELNGWat*H\E_+5p7?<7U!<?@>$locT,qU'Ki<H-GZ\[8/(Y%hoE"-p:?Z%KW=^T=)oQ[X31f^+M6=sPPDbNU^4=rOdF#DD$8O;?p-)(KJ?c@7&l_Mr7tu12Xm/#X2u@e'CZ*sDH^B7o!gr+U5gZULU9Ae8^.$O%@%[Kl!gJ1KI6!UO84a_J[s8U[3*,>A&te2M7)6r=EB2cY3&P\R>E0O]RuikLC<Ko3(@WXkh]TLD+jt2$n$k(P/8='"98;=Ej\]X1%YdbZcB7%iR@0DM-jZFND)Suul\D4u!:WOI*.QUH/JfZ$Bq7T395Vp-F5/gtOf(MN%:aZENp#Y+WcjT'MW@t/l9H%Zj%)VI6W,u#f%&/1salpp>1r%mHq&.U\bSUhg-PX0o(=u>8n`]D,Up9'b%hgs^Zc1P>$^T2MD,6VLjBO.`M'_hiT>#.m_nDG6H>4\Bggb\]pR!NdA%FE+\"RtT^6kcdW!!(>bEmZ<Ol7N-h*RclJn@6)?2AaH#XE+$s^?ihi^VumlR2md-k]_]%IIONL")%O*6FmR,FC.@O2TpL"oPj8ge%aMY=m1s_\io#LS@cbSlm@TlQfT1NuAAn:2K&_gfbAL@M&8gqF@3dR&#$a.RVG*E-b8K!VUkrGgnLIT-`2,&JWiO+tX9YiQ";c-<9%">%aM6<9>kH@q!=%1sbk%*Ns'>#C;7'AWeB(gH/D)BQd:BtRa?eIWKBbbu9<i;ZK7DlP$eF4:B2m6j"N[$n28oCoMT>]]Hf$d+mE%k%TRSPFT*OT%,Wc=AOr5lcHK[k:A#OFtItt;JlUd6HARHCXZ5AJ7h67MU4sTrL?!n];.JYQkkng?-NqHBlUpt15'4)3<8`:YRJ!F%m=]&\h/VEi@1d>]7bf1=.Q7YbB*`9#]TEgB($/a=B*aD$'nU1;KT5Z+L)+2pk_PIf/7I#9P_uOjpY/nG.7Hj1(6nDYe!.!D[QDJk%dY(^*gMP\_&XL7VbK81tl(*qM[HPbZEc>E@Y+u2J\!4$Ig9g(d2C;!BFR>l3>#.nu)ekkU.4<1#mVIM&0]hBN@!J(_AXF59&,f$.%&5u?lnjXHAJce,)3B8B%<34E`LMXA,W+06`RX0!AC4_]Z[\I_rAEEJf#dugdWORiF[%&,@@'-rEc&$`<6U4[F_;hm37.fh&fPW^H%an:g;nj&[H[*!.S=EQ0u!Ah^UY+nZb%$&<fT$b,3N[W=;#Y8!U2m\`2A21*p(lY<Po^#h(.\fT4VnqSbgpNA'TW68:<-l3CYAM3C%3p;pMfdYClQt^Pj&V13P#@S6X-a8Wo(fBG/C8O3CE^Sm4L-_VZ-5#o\.=">3)&Rt9-:CM,7P'C(SDDWbRCS/W8P[GB<(0M#/'3o#%5\@E[5-^7jGm0un&eeA*Na$s'<Q@[?mFhaW#/!NcV;s`VS8E-VD!*f"Uhf%Z@(WHr%-,,Z%]t%,-t$Qa^2GP?ej$ZjW0\MlY-F9a%@i#EY_gj(BEW$)/m?Xe34Rn^\PP7k0i?e:n.=$0,JX\d@b99DZ2thteM3q>,dnkdH7Ce#L,c@u$2RoPS.Ck=EfqbL.*9lE=ST&@t%W?d7$j<Zgh?G=Aa-7pT+G_ic^^/C)+>aSVTSK1g-3)Y9lj><Z,JKYECl0RnM"OB^Jam&0-E!fj`5`@'RJ["^+,`>p^===k/Fl]7T%bs9Hi)/uLW_\*-?"99A)l]=,D'6.ZHSotd.G=KO,21u]AS(*R!;$VD[i;[08[B-l]"2QXXJ+1J$$[Nf+QFUr:JIBRDqd>5J"N!k%%$jlb,\>m+d)/hAc`c\*+V66u,N]U)YBir!<6jF;.3G,1d,W^kram->C))NPbV6h]B7NR(@YDgpdIWLCZg0o;W<iSrXe%3<`d`EHr%CauaQ.Q0\T7L*;'&5ZQJ4mETUVh\m*LJXhF#D^BUmEKf2n$hWS_ooI7<Z.gFWaUa6n^d+0eI:?gDWgW-N\K<GQl($gFA5'(-#CHJ%q]$e%G2VN@m<4qk&a5C`bOG]b<LZ0?DU:+%M>_U`(oW1/G&iCdQrG9Lmeuk7KPQXj)Fq.I(t*0PF?#_2goU/>T?s5L%ahoZNOKt-%L-omWB)n8])QlWCiT:&P6a6mOOA929S:L9u,_>%akU1LZ1.^^dcu7jE,-\TS@k&(N8hsM&;04*4Lqkb_XiRS7"I9?$-8cHfV7eP=%c6Z5<1aPY2?s[/QpJ6I5m4kJ$RQBZFc#a/J6U`&7EAH06o>LC,2.NlcmF<Idc<tYeJF5,AF==][TW&Lf>V]F\R$ENR@.@)oZPjR2%7I-ULCnf[ZZ%nomT>&*T(ls^;J\b7JA+PqG&2"/[o4SCB6CJ;u1n>aeTdU,'V[20=bahJa5aZBI:ici!NtH,])S7`VBF,Rs5rm/2%*@UIsar)`[:M(&V[MfPiLM(g$F#p%(Zeul427bMEW2BZ52cDKo&-5t#)GX\@&8J)=-%SK"b;C.gOhp$D#&]F&)1a@BNADR"?O>+g%em%4=fUqXkaOTKi+g>*.gS1kk-O5p0Q"#iIotcY?4mg0pRfXgtqj[[*aEV[@4+$(aCQ7mt!#L!AJe/Q*-a-)l]O_b!c$CQJE'%mo%NgmG<0T3M_XiWIegm*@%rus6qUPo>d>>$!#]2m[g[5?pH3:si)$5[p*DUmj[\1:<<CtD"W2<Us`g/pF\jnVfP<]ma&CV<I9g6)Jr%6=+*$9cLOgbsQqnbr.,1%+3ZPn2lk[iii8?\/WpWq(%J@m+BBMhJQKt@%M&7,lVQ"noS7.5U%/b'T5IS,meg<T0QZR23n\SZ.I>\%B]Y!"a+@@Qe^%Yi/+OV!#&SHs5G;Z!GiT*Ca^30CTI"qJ`We$<^g%tT*AZnbd*CokK6FCLBLQ:O"108V7p42r^kT*].gC>?$X,:;%O;>3D6lS4n@^,c1L9)5./N^7IY^$8]crn/A^i$YG6+E;BA#LD@U;Qpbo=8D"`D[>!Tf!_8@<bLjm=pFW"kp<`%025[;A9djL<3`Z%LoWir`,g0*(OHORkTiSX248-#RA_QLW)'!`FUI$PC^](]75&&NX:<c"+:O]a-I4t8]<.4Y,_Hi<26tF]<+R^.Ss/h6Q2`lcZS5'C%6e0u90rsUcVA.R;%R-967JoPqU==%.br6/AR$er]f\l_^FH8O;BCLB;V^M7?0mjg?d,]L-S?t(hN`<u:ZiI'jM>a-Q$A(>2,dSCA%_R.j%eM'eTC-sbTLA<KHCV%-U&kHrM[_"YeQs>0p$OR0?r!F9D(9(844cJb3<9^p1iqLe[9X?E+L^uS&CEKl*DCUf/Npd-k'Dcq_%W?*r#XgCqgN7ns9Vb#q1YTtph<@FeF&*'%Y(+\YBYarYM>)'UID8EV-.YruaR0;?!#FcIlGsRBU'YBY)+\s6+Gq?nN5^rd!LQ,g&%?f[Xb<+6gT8i*R)++=SY8&PVOrC_=Gd3Bn%NRA!@\'TE1OOe#L%eI9E0WZJpj`"_D:!qKT'i.AINRhs>i!Cl0,^^S)n!&rI#AFSu%:$FWgPWH1h0Ekp3-`X/#D?<Q#'QBnX/JYlN`'%>(;EIb&2/%R#=sl9h?qI'bcoSFDj,f-YNUk>G7$&Vs^DZ/=a'dt1AMqUL)C,E]%\4f:fas&a@L7g4%ie"t0;#Fc^#%X#s?l?uK$,!6ZWr+t,Uf9DFpFf&tL=MYc@Z^023f)\3PY*<8RQ./U3\e`l@`g7S#=P?+GUuCR%IMh@).:i\(8DGm&lY@H8dB*=k8:>@67u\17Tspkl_3#$Q2,:eWSsWF8Uj*cpPS0n0-c%LuV(`*/2bZ5_KhlSqapBW'PRURNTF`$Z%F<RtUe[uVTRtLQr+&H8=*oF`HS:C=5r:]OFp[=IKY.$&k?I%_@0!El6DjN]g]&$b"5;)t@:RAQ"pWq%Gp$_cZ:9V.ma63?eHM[Es%rElY]J&K,#I/`j2O"^M8s"RO'~>%AI9_PrivateDataEnd